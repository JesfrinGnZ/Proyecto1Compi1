/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaLogin;
import java_cup.runtime.*;
import static backend.analizadorParaLogin.sym.*;
import backend.elementos.Usuario;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexUsuarios.flex</tt>
 */
public class AnalizadorLexicoUsuarios implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\34\1\35\1\1\16\7\4\0\1\3\2\0"+
    "\1\5\1\10\10\0\1\44\1\47\1\27\12\6\1\42\1\0\1\30"+
    "\1\0\1\31\1\0\1\0\6\6\7\45\1\20\1\45\1\24\4\45"+
    "\1\11\5\45\1\32\1\0\1\33\1\0\1\46\1\0\1\14\1\22"+
    "\1\6\1\26\1\23\1\6\1\45\1\37\1\16\3\45\1\21\1\45"+
    "\1\17\1\41\1\45\1\15\1\12\1\40\1\13\1\45\1\25\3\45"+
    "\1\0\1\4\2\0\6\7\1\36\32\7\2\0\4\7\4\0\1\45"+
    "\2\0\1\7\7\0\1\45\4\0\1\45\5\0\27\45\1\0\37\45"+
    "\1\0\u01ca\45\4\0\14\45\16\0\5\45\7\0\1\45\1\0\1\45"+
    "\21\0\165\45\1\0\2\45\2\0\4\45\1\0\1\45\6\0\1\45"+
    "\1\0\3\45\1\0\1\45\1\0\24\45\1\0\123\45\1\0\213\45"+
    "\1\0\5\45\2\43\246\45\1\0\46\45\2\0\1\45\7\0\47\45"+
    "\7\0\1\7\1\0\55\45\1\0\1\45\1\0\2\45\1\0\2\45"+
    "\1\0\1\45\10\0\33\45\5\0\3\45\15\0\6\7\5\0\1\7"+
    "\4\0\13\45\1\0\1\7\3\0\112\45\4\0\146\45\1\0\10\45"+
    "\1\7\1\0\12\45\1\0\23\45\2\0\1\45\17\0\1\7\73\45"+
    "\2\0\145\45\16\0\66\45\4\0\1\45\5\0\56\45\22\0\34\45"+
    "\104\0\25\45\1\0\10\43\26\0\16\43\1\0\201\45\2\0\12\45"+
    "\1\0\23\45\1\0\10\45\2\0\2\45\2\0\26\45\1\0\7\45"+
    "\1\0\1\45\3\0\4\45\2\0\11\45\2\0\2\45\2\0\4\45"+
    "\10\0\1\45\4\0\2\45\1\0\5\45\2\0\14\45\2\7\7\0"+
    "\1\7\5\0\3\45\1\0\6\45\4\0\2\45\2\0\26\45\1\0"+
    "\7\45\1\0\2\45\1\0\2\45\1\0\2\45\2\0\1\45\1\0"+
    "\5\45\4\0\2\45\2\0\3\45\3\0\1\45\7\0\4\45\1\0"+
    "\1\45\7\0\20\45\13\0\3\45\1\0\11\45\1\0\3\45\1\0"+
    "\26\45\1\0\7\45\1\0\2\45\1\0\5\45\2\0\12\45\1\0"+
    "\3\45\1\0\3\45\2\0\1\45\17\0\4\45\2\0\12\45\1\0"+
    "\1\7\7\0\1\45\7\0\3\45\1\0\10\45\2\0\2\45\2\0"+
    "\26\45\1\0\7\45\1\0\2\45\1\0\5\45\2\0\11\45\2\0"+
    "\2\45\2\0\3\45\10\0\2\45\4\0\2\45\1\0\5\45\2\0"+
    "\12\45\1\0\1\45\20\0\2\45\1\0\6\45\3\0\3\45\1\0"+
    "\4\45\3\0\2\45\1\0\1\45\1\0\2\45\3\0\2\45\3\0"+
    "\3\45\3\0\14\45\4\0\5\45\3\0\3\45\1\0\4\45\2\0"+
    "\1\45\6\0\1\45\16\0\12\45\11\0\1\7\6\0\4\45\1\0"+
    "\10\45\1\0\3\45\1\0\27\45\1\0\20\45\3\0\10\45\1\0"+
    "\3\45\1\0\4\45\7\0\2\45\1\0\3\45\5\0\4\45\2\0"+
    "\12\45\20\0\1\43\3\45\1\0\10\45\1\0\3\45\1\0\27\45"+
    "\1\0\12\45\1\0\5\45\2\0\11\45\1\0\3\45\1\0\4\45"+
    "\7\0\2\45\7\0\1\45\1\0\4\45\2\0\12\45\1\0\2\45"+
    "\16\0\3\45\1\0\10\45\1\0\3\45\1\0\51\45\2\0\10\45"+
    "\1\0\3\45\1\0\5\45\5\0\3\43\1\45\7\0\5\45\2\0"+
    "\12\45\12\0\6\45\2\0\2\45\1\0\22\45\3\0\30\45\1\0"+
    "\11\45\1\0\1\45\2\0\7\45\3\0\1\45\4\0\6\45\1\0"+
    "\1\45\1\0\10\45\6\0\12\45\2\0\2\45\15\0\72\45\4\0"+
    "\1\7\17\45\1\0\12\45\47\0\2\45\1\0\1\45\2\0\2\45"+
    "\1\0\1\45\2\0\1\45\6\0\4\45\1\0\7\45\1\0\3\45"+
    "\1\0\1\45\1\0\1\45\2\0\2\45\1\0\15\45\1\0\3\45"+
    "\2\0\5\45\1\0\1\45\1\0\6\45\2\0\12\45\2\0\4\45"+
    "\40\0\1\45\27\0\2\45\6\0\12\45\13\0\1\45\1\0\1\45"+
    "\1\0\1\45\4\0\12\45\1\0\44\45\4\0\24\45\1\0\22\45"+
    "\1\0\44\45\11\0\1\45\71\0\112\45\6\0\116\45\2\0\46\45"+
    "\1\0\1\45\5\0\1\45\2\0\53\45\1\0\u014d\45\1\0\4\45"+
    "\2\0\7\45\1\0\1\45\1\0\4\45\2\0\51\45\1\0\4\45"+
    "\2\0\41\45\1\0\4\45\2\0\7\45\1\0\1\45\1\0\4\45"+
    "\2\0\17\45\1\0\71\45\1\0\4\45\2\0\103\45\2\0\3\45"+
    "\40\0\20\45\20\0\126\45\2\0\6\45\3\0\u026c\45\2\0\21\45"+
    "\1\0\32\45\5\0\113\45\3\0\13\45\7\0\15\45\1\0\7\45"+
    "\13\0\25\45\13\0\24\45\14\0\15\45\1\0\3\45\1\0\2\45"+
    "\14\0\124\45\3\0\1\45\3\0\1\7\2\45\2\0\12\45\41\0"+
    "\3\45\1\7\1\0\12\45\6\0\130\45\10\0\53\45\5\0\106\45"+
    "\12\0\37\45\1\0\14\45\4\0\14\45\12\0\50\45\2\0\5\45"+
    "\13\0\54\45\4\0\32\45\6\0\12\45\46\0\34\45\4\0\77\45"+
    "\1\0\35\45\2\0\13\45\6\0\12\45\15\0\1\45\10\0\16\45"+
    "\1\43\101\0\114\45\4\0\12\45\21\0\11\45\14\0\164\45\14\0"+
    "\70\45\10\0\12\45\3\0\61\45\2\0\11\43\107\0\3\45\1\0"+
    "\43\45\1\0\2\45\6\0\366\45\5\0\1\43\u011a\45\2\0\6\45"+
    "\2\0\46\45\2\0\6\45\2\0\10\45\1\0\1\45\1\0\1\45"+
    "\1\0\1\45\1\0\37\45\2\0\65\45\1\0\7\45\1\0\1\45"+
    "\3\0\3\45\1\0\7\45\3\0\4\45\2\0\6\45\4\0\15\45"+
    "\5\0\3\45\1\0\7\45\16\0\5\7\30\0\1\34\1\34\5\7"+
    "\20\0\2\45\23\0\1\45\13\0\5\7\1\0\12\7\1\0\1\45"+
    "\15\0\1\45\20\0\15\45\3\0\37\7\21\0\15\45\4\43\1\45"+
    "\3\43\14\45\21\0\1\45\4\0\1\45\2\0\12\45\1\0\1\45"+
    "\3\0\5\45\6\0\1\45\1\0\1\45\1\0\1\45\1\0\4\45"+
    "\1\0\13\45\2\0\4\45\5\0\5\45\4\0\1\45\21\0\51\45"+
    "\u032d\0\64\43\u0716\0\57\45\1\0\57\45\1\0\205\45\6\0\11\45"+
    "\14\0\46\45\1\0\1\45\5\0\1\45\2\0\70\45\7\0\1\45"+
    "\17\0\30\45\11\0\7\45\1\0\7\45\1\0\7\45\1\0\7\45"+
    "\1\0\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0\40\45"+
    "\57\0\1\45\u01d5\0\3\45\31\0\17\45\1\0\5\45\2\0\5\45"+
    "\4\0\126\45\2\0\2\45\2\0\3\45\1\0\132\45\1\0\4\45"+
    "\5\0\51\45\3\0\136\45\21\0\33\45\65\0\20\45\u0200\0\u19b6\45"+
    "\112\0\u51d6\45\52\0\u048d\45\103\0\56\45\2\0\u010d\45\3\0\34\45"+
    "\24\0\60\45\3\43\1\0\12\45\1\0\163\45\45\0\11\45\2\0"+
    "\147\45\2\0\43\45\1\43\1\0\10\45\77\0\61\45\20\0\1\7"+
    "\7\0\64\45\14\0\105\45\1\43\12\0\12\45\6\0\30\45\3\0"+
    "\1\45\1\0\1\45\2\0\56\45\2\0\44\45\14\0\35\45\3\0"+
    "\101\45\16\0\13\45\6\0\37\45\1\0\67\45\11\0\16\45\2\0"+
    "\12\45\6\0\27\45\3\0\111\45\30\0\3\45\2\0\20\45\2\0"+
    "\5\45\12\0\6\45\2\0\6\45\2\0\6\45\11\0\7\45\1\0"+
    "\7\45\1\0\53\45\1\0\12\45\12\0\173\45\1\0\2\45\2\0"+
    "\12\45\6\0\u2ba4\45\14\0\27\45\4\0\61\45\u2104\0\u016e\45\2\0"+
    "\152\45\46\0\7\45\14\0\5\45\5\0\14\45\1\0\15\45\1\0"+
    "\5\45\1\0\1\45\1\0\2\45\1\0\2\45\1\0\154\45\41\0"+
    "\u016b\45\22\0\100\45\2\0\66\45\50\0\14\45\1\7\3\0\20\45"+
    "\20\0\20\45\3\0\2\45\30\0\3\45\31\0\1\7\6\0\5\45"+
    "\1\0\207\45\2\0\1\7\4\0\1\7\13\0\12\45\7\0\32\45"+
    "\4\0\1\45\1\0\32\45\13\0\131\45\3\0\6\45\2\0\6\45"+
    "\2\0\6\45\2\0\3\45\3\0\2\7\3\0\2\7\22\0\3\7"+
    "\4\0\14\45\1\0\32\45\1\0\23\45\1\0\2\45\1\0\17\45"+
    "\2\0\16\45\42\0\173\45\105\0\65\45\210\0\1\45\202\0\35\45"+
    "\3\0\61\45\17\0\1\45\37\0\40\45\20\0\33\45\5\0\53\45"+
    "\5\0\36\45\2\0\44\45\4\0\10\45\1\0\5\45\52\0\236\45"+
    "\2\0\12\45\6\0\44\43\4\0\44\43\4\0\50\45\10\0\64\45"+
    "\234\0\u0137\45\11\0\26\45\12\0\10\45\230\0\6\45\2\0\1\45"+
    "\1\0\54\45\1\0\2\45\3\0\1\45\2\0\27\45\12\0\27\45"+
    "\11\0\37\45\101\0\23\45\1\0\2\45\12\0\26\45\12\0\32\45"+
    "\106\0\70\45\6\0\2\45\100\0\4\45\1\0\2\45\5\0\10\45"+
    "\1\0\3\45\1\0\33\45\4\0\3\45\4\0\1\45\40\0\35\45"+
    "\3\0\35\45\43\0\10\45\1\0\36\45\31\0\66\45\12\0\26\45"+
    "\12\0\23\45\15\0\22\45\156\0\111\45\67\0\63\45\15\0\63\45"+
    "\u030d\0\107\45\37\0\12\45\17\0\74\45\2\0\1\7\22\0\31\45"+
    "\7\0\12\45\6\0\65\45\1\0\12\45\20\0\44\45\2\0\1\45"+
    "\11\0\105\45\5\0\3\45\3\0\13\45\1\0\1\45\43\0\22\45"+
    "\1\0\45\45\6\0\1\43\101\0\7\45\1\0\1\45\1\0\4\45"+
    "\1\0\17\45\1\0\12\45\7\0\73\45\5\0\12\45\6\0\4\45"+
    "\1\0\10\45\2\0\2\45\2\0\26\45\1\0\7\45\1\0\2\45"+
    "\1\0\5\45\2\0\11\45\2\0\2\45\2\0\3\45\2\0\1\45"+
    "\6\0\1\45\5\0\7\45\2\0\7\45\3\0\5\45\213\0\113\43"+
    "\5\0\12\43\46\0\106\45\1\0\1\45\10\0\12\45\246\0\66\45"+
    "\2\0\11\45\27\0\6\45\42\0\101\45\3\0\1\45\13\0\12\45"+
    "\46\0\70\45\10\0\12\45\66\0\32\45\3\0\17\45\4\0\12\45"+
    "\u0166\0\112\45\25\0\1\45\u01c0\0\71\45\u0107\0\11\43\1\0\55\43"+
    "\1\0\11\43\17\0\12\43\30\0\36\43\2\0\26\43\1\0\16\43"+
    "\u0349\0\u039a\45\146\0\157\45\21\0\304\45\u0abc\0\u042f\45\u0fd1\0\u0247\45"+
    "\u21b9\0\u0239\45\7\0\37\45\1\0\12\45\146\0\36\45\2\0\5\45"+
    "\13\0\67\45\11\0\4\45\14\0\12\45\11\0\25\45\5\0\23\45"+
    "\u0370\0\105\45\13\0\57\45\20\0\21\45\100\0\1\43\37\0\u17ed\43"+
    "\23\0\u02f3\43\u250d\0\2\45\u0bfe\0\153\45\5\0\15\45\3\0\11\45"+
    "\7\0\12\45\3\0\2\45\1\0\4\7\u14c1\0\5\45\3\0\6\45"+
    "\10\7\10\45\2\0\7\45\36\0\4\45\224\0\3\45\u01bb\0\125\45"+
    "\1\0\107\45\1\0\2\45\2\0\1\45\2\0\2\45\2\0\4\45"+
    "\1\0\14\45\1\0\1\45\1\0\7\45\1\0\101\45\1\0\4\45"+
    "\2\0\10\45\1\0\7\45\1\0\34\45\1\0\4\45\1\0\5\45"+
    "\1\0\1\45\3\0\7\45\1\0\u0154\45\2\0\31\45\1\0\31\45"+
    "\1\0\37\45\1\0\31\45\1\0\37\45\1\0\31\45\1\0\37\45"+
    "\1\0\31\45\1\0\37\45\1\0\31\45\1\0\10\45\2\0\62\45"+
    "\u0200\0\67\45\4\0\62\45\10\0\1\45\16\0\1\45\26\0\5\45"+
    "\1\0\17\45\u0550\0\7\43\1\0\21\43\2\0\7\43\1\0\2\43"+
    "\1\0\5\43\u07d5\0\305\45\13\0\7\45\51\0\113\43\5\0\12\43"+
    "\u04a6\0\4\45\1\0\33\45\1\0\2\45\1\0\1\45\2\0\1\45"+
    "\1\0\12\45\1\0\4\45\1\0\1\45\1\0\1\45\6\0\1\45"+
    "\4\0\1\45\1\0\1\45\1\0\1\45\1\0\3\45\1\0\2\45"+
    "\1\0\1\45\2\0\1\45\1\0\1\45\1\0\1\45\1\0\1\45"+
    "\1\0\1\45\1\0\2\45\1\0\1\45\2\0\4\45\1\0\7\45"+
    "\1\0\4\45\1\0\4\45\1\0\1\45\1\0\12\45\1\0\21\45"+
    "\5\0\3\45\1\0\5\45\1\0\21\45\u0274\0\32\43\6\0\32\43"+
    "\6\0\32\43\u0e76\0\ua6d7\45\51\0\u1035\45\13\0\336\45\2\0\u1682\45"+
    "\u295e\0\u021e\45\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\45\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\5\1\1\3\1\4\1\5\2\1"+
    "\1\0\1\6\5\0\1\7\23\0\1\10\2\0\1\11"+
    "\1\12\2\0\1\13\3\0\2\14\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\120\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\120\0\120\0\120\0\u0168\0\u0190\0\240"+
    "\0\240\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0168\0\120\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\120\0\u0550\0\u0578\0\120\0\120\0\u05a0"+
    "\0\u05c8\0\120\0\u05f0\0\u0618\0\u0640\0\u0668\0\120\0\120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\2\3\1\6\1\10"+
    "\6\3\1\11\3\3\1\12\2\3\1\13\1\14\1\15"+
    "\1\16\2\3\1\5\6\3\1\6\1\3\1\6\2\3"+
    "\1\4\2\5\1\6\1\7\2\3\1\6\1\10\6\3"+
    "\1\11\3\3\1\12\2\3\1\13\1\14\1\15\1\16"+
    "\2\3\1\5\1\3\1\17\4\3\1\6\1\3\1\6"+
    "\1\3\52\0\1\5\51\0\1\20\1\0\21\21\7\0"+
    "\4\21\2\0\1\20\2\21\7\0\1\22\5\0\1\22"+
    "\5\0\2\22\2\0\1\22\33\0\1\23\54\0\1\24"+
    "\44\0\1\25\33\0\33\26\1\27\14\26\40\0\1\30"+
    "\15\0\1\31\5\0\1\31\5\0\2\31\2\0\1\31"+
    "\34\0\1\32\55\0\1\33\40\0\1\34\75\0\1\35"+
    "\15\0\1\36\5\0\1\36\5\0\2\36\2\0\1\36"+
    "\35\0\1\37\55\0\1\40\37\0\1\41\76\0\1\42"+
    "\14\0\1\43\5\0\1\43\5\0\2\43\2\0\1\43"+
    "\36\0\1\44\47\0\1\45\57\0\1\46\34\0\1\47"+
    "\27\0\1\50\13\0\1\51\5\0\1\51\5\0\2\51"+
    "\2\0\1\51\37\0\1\52\54\0\1\53\43\0\1\54"+
    "\72\0\1\50\34\0\1\55\26\0\1\56\5\0\1\56"+
    "\5\0\2\56\2\0\1\56\40\0\1\57\45\0\1\60"+
    "\61\0\1\61\46\0\1\62\27\0\1\63\2\0\16\63"+
    "\10\0\3\63\1\0\4\63\7\0\1\63\2\0\16\63"+
    "\10\0\3\63\1\0\4\63\1\64\6\0\1\65\2\0"+
    "\16\65\10\0\3\65\1\0\4\65\1\0\1\65\1\66"+
    "\1\67\31\65\3\67\11\65\2\0\1\70\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\5\1\3\11\2\1\1\0"+
    "\1\1\5\0\1\11\23\0\1\11\2\0\2\11\2\0"+
    "\1\11\3\0\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  Usuario usuario;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoUsuarios(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3004) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error en el lexico"+yytext());
            } 
            // fall through
          case 14: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 15: break;
          case 3: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 16: break;
          case 4: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 17: break;
          case 5: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 18: break;
          case 6: 
            { System.out.println("IDDDD:"+yytext());return symbol(ID,yytext());
            } 
            // fall through
          case 19: break;
          case 7: 
            { System.out.println("Oracion:"+yytext());
            } 
            // fall through
          case 20: break;
          case 8: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 21: break;
          case 9: 
            { System.out.println("Codigo color:"+yytext());
            } 
            // fall through
          case 22: break;
          case 10: 
            { return symbol(USUARIO,yytext());
            } 
            // fall through
          case 23: break;
          case 11: 
            { return symbol(PASSWORD,yytext());
            } 
            // fall through
          case 24: break;
          case 12: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("URL:"+yytext());
            } 
            // fall through
          case 25: break;
          case 13: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("URL:"+yytext());
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoUsuarios [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoUsuarios scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoUsuarios(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
