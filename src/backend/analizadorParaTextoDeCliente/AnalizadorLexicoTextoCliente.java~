/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\3\1\1\16\11\4\0\1\3\1\0"+
    "\1\41\1\0\1\11\2\0\1\12\5\0\1\6\1\12\1\33\1\4"+
    "\1\7\10\5\1\74\1\0\1\34\1\40\1\35\1\12\1\0\1\56"+
    "\1\54\1\60\1\55\1\44\1\61\1\65\1\62\1\51\1\72\1\11"+
    "\1\66\1\63\1\42\1\46\1\64\1\71\1\57\1\50\1\52\1\43"+
    "\1\45\1\53\1\67\1\11\1\70\1\36\1\0\1\37\1\0\1\47"+
    "\1\0\1\13\1\26\1\14\1\11\1\20\2\11\1\73\1\15\2\11"+
    "\1\32\1\24\1\17\1\16\1\22\1\30\1\23\1\21\1\25\1\27"+
    "\1\31\4\11\1\0\1\10\2\0\41\11\2\0\4\11\4\0\1\11"+
    "\2\0\1\11\7\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11"+
    "\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11"+
    "\21\0\165\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11"+
    "\1\0\3\11\1\0\1\11\1\0\24\11\1\0\123\11\1\0\213\11"+
    "\1\0\5\11\2\0\246\11\1\0\46\11\2\0\1\11\7\0\47\11"+
    "\7\0\1\11\1\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\1\11\10\0\33\11\5\0\3\11\15\0\6\11\5\0\1\11"+
    "\4\0\13\11\1\0\1\11\3\0\112\11\4\0\146\11\1\0\11\11"+
    "\1\0\12\11\1\0\23\11\2\0\1\11\17\0\74\11\2\0\145\11"+
    "\16\0\66\11\4\0\1\11\5\0\56\11\22\0\34\11\104\0\25\11"+
    "\56\0\201\11\2\0\12\11\1\0\23\11\1\0\10\11\2\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\11\11"+
    "\2\0\2\11\2\0\4\11\10\0\1\11\4\0\2\11\1\0\5\11"+
    "\2\0\16\11\7\0\1\11\5\0\3\11\1\0\6\11\4\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11"+
    "\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11"+
    "\7\0\4\11\1\0\1\11\7\0\20\11\13\0\3\11\1\0\11\11"+
    "\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\12\11\1\0\3\11\1\0\3\11\2\0\1\11\17\0\4\11"+
    "\2\0\12\11\1\0\1\11\7\0\1\11\7\0\3\11\1\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\11\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\11"+
    "\1\0\5\11\2\0\12\11\1\0\1\11\20\0\2\11\1\0\6\11"+
    "\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11"+
    "\3\0\2\11\3\0\3\11\3\0\14\11\4\0\5\11\3\0\3\11"+
    "\1\0\4\11\2\0\1\11\6\0\1\11\16\0\12\11\11\0\1\11"+
    "\6\0\4\11\1\0\10\11\1\0\3\11\1\0\27\11\1\0\20\11"+
    "\3\0\10\11\1\0\3\11\1\0\4\11\7\0\2\11\1\0\3\11"+
    "\5\0\4\11\2\0\12\11\21\0\3\11\1\0\10\11\1\0\3\11"+
    "\1\0\27\11\1\0\12\11\1\0\5\11\2\0\11\11\1\0\3\11"+
    "\1\0\4\11\7\0\2\11\7\0\1\11\1\0\4\11\2\0\12\11"+
    "\1\0\2\11\16\0\3\11\1\0\10\11\1\0\3\11\1\0\51\11"+
    "\2\0\10\11\1\0\3\11\1\0\5\11\10\0\1\11\7\0\5\11"+
    "\2\0\12\11\12\0\6\11\2\0\2\11\1\0\22\11\3\0\30\11"+
    "\1\0\11\11\1\0\1\11\2\0\7\11\3\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\0\10\11\6\0\12\11\2\0\2\11\15\0\72\11"+
    "\4\0\20\11\1\0\12\11\47\0\2\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\1\0\15\11\1\0\3\11"+
    "\2\0\5\11\1\0\1\11\1\0\6\11\2\0\12\11\2\0\4\11"+
    "\40\0\1\11\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\12\11\1\0\44\11\4\0\24\11\1\0\22\11"+
    "\1\0\44\11\11\0\1\11\71\0\112\11\6\0\116\11\2\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11"+
    "\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\11"+
    "\40\0\20\11\20\0\126\11\2\0\6\11\3\0\u026c\11\2\0\21\11"+
    "\1\0\32\11\5\0\113\11\3\0\13\11\7\0\15\11\1\0\7\11"+
    "\13\0\25\11\13\0\24\11\14\0\15\11\1\0\3\11\1\0\2\11"+
    "\14\0\124\11\3\0\1\11\3\0\3\11\2\0\12\11\41\0\4\11"+
    "\1\0\12\11\6\0\130\11\10\0\53\11\5\0\106\11\12\0\37\11"+
    "\1\0\14\11\4\0\14\11\12\0\50\11\2\0\5\11\13\0\54\11"+
    "\4\0\32\11\6\0\12\11\46\0\34\11\4\0\77\11\1\0\35\11"+
    "\2\0\13\11\6\0\12\11\15\0\1\11\10\0\16\11\102\0\114\11"+
    "\4\0\12\11\21\0\11\11\14\0\164\11\14\0\70\11\10\0\12\11"+
    "\3\0\61\11\122\0\3\11\1\0\43\11\1\0\2\11\6\0\366\11"+
    "\6\0\u011a\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11"+
    "\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11"+
    "\2\0\6\11\4\0\15\11\5\0\3\11\1\0\7\11\16\0\5\11"+
    "\32\0\5\11\20\0\2\11\23\0\1\11\13\0\5\11\1\0\12\11"+
    "\1\0\1\11\15\0\1\11\20\0\15\11\3\0\37\11\21\0\15\11"+
    "\4\0\1\11\3\0\14\11\21\0\1\11\4\0\1\11\2\0\12\11"+
    "\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11"+
    "\21\0\51\11\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\11\11"+
    "\14\0\46\11\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11"+
    "\17\0\30\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\11"+
    "\57\0\1\11\u01d5\0\3\11\31\0\17\11\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\11\2\0\3\11\1\0\132\11\1\0\4\11"+
    "\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11"+
    "\112\0\u51d6\11\52\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\34\11"+
    "\24\0\60\11\4\0\12\11\1\0\163\11\45\0\11\11\2\0\147\11"+
    "\2\0\43\11\2\0\10\11\77\0\61\11\20\0\1\11\7\0\64\11"+
    "\14\0\105\11\13\0\12\11\6\0\30\11\3\0\1\11\1\0\1\11"+
    "\2\0\56\11\2\0\44\11\14\0\35\11\3\0\101\11\16\0\13\11"+
    "\6\0\37\11\1\0\67\11\11\0\16\11\2\0\12\11\6\0\27\11"+
    "\3\0\111\11\30\0\3\11\2\0\20\11\2\0\5\11\12\0\6\11"+
    "\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\1\0\53\11"+
    "\1\0\12\11\12\0\173\11\1\0\2\11\2\0\12\11\6\0\u2ba4\11"+
    "\14\0\27\11\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11"+
    "\14\0\5\11\5\0\14\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11"+
    "\2\0\66\11\50\0\15\11\3\0\20\11\20\0\20\11\3\0\2\11"+
    "\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\11"+
    "\4\0\1\11\13\0\12\11\7\0\32\11\4\0\1\11\1\0\32\11"+
    "\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\3\0\2\11\3\0\2\11\22\0\3\11\4\0\14\11\1\0\32\11"+
    "\1\0\23\11\1\0\2\11\1\0\17\11\2\0\16\11\42\0\173\11"+
    "\105\0\65\11\210\0\1\11\202\0\35\11\3\0\61\11\17\0\1\11"+
    "\37\0\40\11\20\0\33\11\5\0\53\11\5\0\36\11\2\0\44\11"+
    "\4\0\10\11\1\0\5\11\52\0\236\11\2\0\12\11\126\0\50\11"+
    "\10\0\64\11\234\0\u0137\11\11\0\26\11\12\0\10\11\230\0\6\11"+
    "\2\0\1\11\1\0\54\11\1\0\2\11\3\0\1\11\2\0\27\11"+
    "\12\0\27\11\11\0\37\11\101\0\23\11\1\0\2\11\12\0\26\11"+
    "\12\0\32\11\106\0\70\11\6\0\2\11\100\0\4\11\1\0\2\11"+
    "\5\0\10\11\1\0\3\11\1\0\33\11\4\0\3\11\4\0\1\11"+
    "\40\0\35\11\3\0\35\11\43\0\10\11\1\0\36\11\31\0\66\11"+
    "\12\0\26\11\12\0\23\11\15\0\22\11\156\0\111\11\67\0\63\11"+
    "\15\0\63\11\u030d\0\107\11\37\0\12\11\17\0\74\11\2\0\1\11"+
    "\22\0\31\11\7\0\12\11\6\0\65\11\1\0\12\11\20\0\44\11"+
    "\2\0\1\11\11\0\105\11\5\0\3\11\3\0\13\11\1\0\1\11"+
    "\43\0\22\11\1\0\45\11\110\0\7\11\1\0\1\11\1\0\4\11"+
    "\1\0\17\11\1\0\12\11\7\0\73\11\5\0\12\11\6\0\4\11"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\11\11\2\0\2\11\2\0\3\11\2\0\1\11"+
    "\6\0\1\11\5\0\7\11\2\0\7\11\3\0\5\11\u010b\0\106\11"+
    "\1\0\1\11\10\0\12\11\246\0\66\11\2\0\11\11\27\0\6\11"+
    "\42\0\101\11\3\0\1\11\13\0\12\11\46\0\70\11\10\0\12\11"+
    "\66\0\32\11\3\0\17\11\4\0\12\11\u0166\0\112\11\25\0\1\11"+
    "\u01c0\0\71\11\u0507\0\u039a\11\146\0\157\11\21\0\304\11\u0abc\0\u042f\11"+
    "\u0fd1\0\u0247\11\u21b9\0\u0239\11\7\0\37\11\1\0\12\11\146\0\36\11"+
    "\2\0\5\11\13\0\67\11\11\0\4\11\14\0\12\11\11\0\25\11"+
    "\5\0\23\11\u0370\0\105\11\13\0\57\11\20\0\21\11\u4060\0\2\11"+
    "\u0bfe\0\153\11\5\0\15\11\3\0\11\11\7\0\12\11\3\0\2\11"+
    "\1\0\4\11\u14c1\0\5\11\3\0\26\11\2\0\7\11\36\0\4\11"+
    "\224\0\3\11\u01bb\0\125\11\1\0\107\11\1\0\2\11\2\0\1\11"+
    "\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11"+
    "\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0\34\11"+
    "\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0\u0154\11"+
    "\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11"+
    "\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\10\11\2\0\62\11\u0200\0\67\11\4\0\62\11\10\0\1\11"+
    "\16\0\1\11\26\0\5\11\1\0\17\11\u0d50\0\305\11\13\0\7\11"+
    "\u0529\0\4\11\1\0\33\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11"+
    "\1\0\4\11\1\0\4\11\1\0\1\11\1\0\12\11\1\0\21\11"+
    "\5\0\3\11\1\0\5\11\1\0\21\11\u1144\0\ua6d7\11\51\0\u1035\11"+
    "\13\0\336\11\2\0\u1682\11\u295e\0\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\11\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\1\6\5\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\20\4"+
    "\1\3\17\4\1\16\22\4\1\3\45\4\1\3\36\4"+
    "\1\17\6\4\1\3\1\4\1\20\1\4\1\20\4\4"+
    "\1\20\2\4\1\20\4\4\1\21\1\4\1\22\2\4"+
    "\1\23\3\4\1\24\4\4\1\25\1\26\2\4\1\27"+
    "\5\4\2\30\1\31\1\4\1\31\2\4\1\30\5\4"+
    "\1\32\1\33\1\4\1\34\4\4\1\35\4\4\1\36"+
    "\1\4\1\37\20\4\1\40\2\4\1\41\3\4\1\42"+
    "\2\4\1\43\1\44\1\45\1\43\1\4\1\45\1\44"+
    "\1\43\16\4\1\46\1\47\1\50\4\4\1\51\11\4"+
    "\1\52\1\53\10\4\1\54\3\4\1\55\15\4\1\56"+
    "\17\4\1\57\13\4\1\60\3\4\1\61\10\4\1\62"+
    "\1\4\1\63\4\4\1\64\1\4\1\65\4\4\1\66"+
    "\1\67\3\4\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\267\0\364\0\267\0\u0131"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\267\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\267\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\267\0\u2199\0\u22ca"+
    "\0\u21d6\0\u2307\0\u2344\0\u2381\0\u23be\0\267\0\u23fb\0\267"+
    "\0\u2438\0\u2475\0\267\0\u24b2\0\u24ef\0\u252c\0\267\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\267\0\267\0\u265d\0\u269a\0\267"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\267\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d"+
    "\0\u2a6a\0\u2aa7\0\267\0\267\0\u2ae4\0\267\0\u2b21\0\u2b5e"+
    "\0\u2b9b\0\u2bd8\0\267\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\267"+
    "\0\u2d09\0\75\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77"+
    "\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f"+
    "\0\u309c\0\u30d9\0\267\0\u3116\0\u3153\0\267\0\u3190\0\u31cd"+
    "\0\u320a\0\267\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\267"+
    "\0\u3378\0\u32c1\0\u33b5\0\u333b\0\u33f2\0\u342f\0\u346c\0\u34a9"+
    "\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691"+
    "\0\u36ce\0\u370b\0\u3748\0\267\0\267\0\u3785\0\u37c2\0\u37ff"+
    "\0\u383c\0\267\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa"+
    "\0\u39e7\0\u3a24\0\u3a61\0\267\0\267\0\u3a9e\0\u3adb\0\u3b18"+
    "\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\267\0\u3c86\0\u3cc3"+
    "\0\u3d00\0\267\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\u3e6e"+
    "\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\267"+
    "\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201"+
    "\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u43ac\0\267"+
    "\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594"+
    "\0\u45d1\0\u460e\0\u464b\0\267\0\u4688\0\u46c5\0\u4702\0\267"+
    "\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea"+
    "\0\267\0\u4927\0\267\0\u4964\0\u49a1\0\u49de\0\u4a1b\0\267"+
    "\0\u4a58\0\267\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c\0\267\0\267"+
    "\0\u4b89\0\u4bc6\0\u4c03\0\267\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\7\1\11\1\12\3\7\1\13\1\14\1\7\1\15"+
    "\6\7\1\16\1\7\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\14\1\30\1\31\1\7"+
    "\1\32\1\33\1\34\1\7\1\35\1\36\1\37\1\7"+
    "\1\40\1\41\1\7\1\42\1\43\5\7\1\44\1\45"+
    "\1\2\77\0\1\4\76\0\6\7\1\11\20\7\7\0"+
    "\32\7\5\0\2\46\1\7\1\46\2\7\1\11\20\7"+
    "\7\0\32\7\5\0\4\7\1\47\1\7\1\11\1\50"+
    "\1\51\1\7\1\52\6\7\1\53\5\7\7\0\4\7"+
    "\1\52\3\7\1\53\3\7\1\50\1\7\1\51\13\7"+
    "\5\0\27\11\7\0\32\11\5\0\4\7\1\54\1\7"+
    "\1\11\1\7\1\51\10\7\1\55\5\7\7\0\10\7"+
    "\1\55\5\7\1\51\13\7\5\0\4\7\1\52\1\7"+
    "\1\11\3\7\1\52\14\7\7\0\4\7\1\52\25\7"+
    "\5\0\4\7\1\56\1\7\1\11\12\7\1\56\5\7"+
    "\7\0\10\7\1\56\21\7\5\0\4\7\1\57\1\7"+
    "\1\11\1\57\17\7\7\0\14\7\1\57\15\7\5\0"+
    "\4\7\1\60\1\7\1\11\1\60\17\7\7\0\14\7"+
    "\1\60\15\7\5\0\4\7\1\52\1\7\1\11\3\7"+
    "\1\52\14\7\7\0\1\7\1\61\2\7\1\52\25\7"+
    "\5\0\6\7\1\11\20\7\7\0\6\7\1\62\23\7"+
    "\5\0\4\7\1\60\1\7\1\11\1\60\17\7\7\0"+
    "\7\7\1\63\4\7\1\60\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\15\7\1\64\14\7\5\0\6\7\1\11"+
    "\20\7\7\0\7\7\1\65\22\7\5\0\6\7\1\11"+
    "\20\7\7\0\13\7\1\66\5\7\1\67\4\7\1\70"+
    "\3\7\5\0\6\7\1\11\20\7\7\0\2\7\1\71"+
    "\4\7\1\72\22\7\5\0\6\7\1\11\20\7\7\0"+
    "\4\7\1\73\25\7\5\0\6\7\1\11\20\7\7\0"+
    "\2\7\1\74\27\7\5\0\4\7\1\54\1\7\1\11"+
    "\1\7\1\51\10\7\1\55\5\7\7\0\1\75\7\7"+
    "\1\55\5\7\1\51\4\7\1\76\1\77\5\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\100\1\7\1\101"+
    "\17\7\1\102\5\7\5\0\6\7\1\11\20\7\7\0"+
    "\2\7\1\103\27\7\5\0\6\7\1\11\20\7\7\0"+
    "\2\7\1\104\1\7\1\105\25\7\5\0\4\7\1\57"+
    "\1\7\1\11\1\57\17\7\7\0\14\7\1\106\15\7"+
    "\5\0\6\7\1\11\20\7\7\0\1\7\1\107\30\7"+
    "\5\0\6\7\1\11\12\7\1\110\5\7\7\0\32\7"+
    "\5\0\2\111\1\7\1\111\2\7\1\11\20\7\7\0"+
    "\32\7\5\0\4\7\1\112\1\7\1\11\1\7\1\113"+
    "\1\114\5\7\1\115\1\116\5\7\1\117\7\0\7\7"+
    "\1\114\5\7\1\115\1\113\2\7\1\116\2\7\1\117"+
    "\5\7\5\0\4\7\1\120\1\7\1\11\10\7\1\121"+
    "\6\7\1\117\7\0\15\7\1\121\6\7\1\117\5\7"+
    "\5\0\4\7\1\113\1\7\1\11\1\7\1\113\16\7"+
    "\7\0\16\7\1\113\13\7\5\0\4\7\1\116\1\7"+
    "\1\11\11\7\1\116\6\7\7\0\21\7\1\116\10\7"+
    "\5\0\4\7\1\122\1\7\1\11\2\7\1\114\5\7"+
    "\1\123\7\7\7\0\7\7\1\114\5\7\1\123\14\7"+
    "\5\0\4\7\1\124\1\7\1\11\1\7\1\113\6\7"+
    "\1\123\7\7\7\0\15\7\1\123\1\113\13\7\5\0"+
    "\4\7\1\123\1\7\1\11\10\7\1\123\7\7\7\0"+
    "\15\7\1\123\14\7\5\0\4\7\1\114\1\7\1\11"+
    "\2\7\1\114\15\7\7\0\7\7\1\114\22\7\5\0"+
    "\4\7\1\121\1\7\1\11\10\7\1\121\7\7\7\0"+
    "\15\7\1\121\14\7\5\0\4\7\1\117\1\7\1\11"+
    "\17\7\1\117\7\0\24\7\1\117\5\7\5\0\6\7"+
    "\1\11\20\7\7\0\2\7\1\125\27\7\5\0\6\7"+
    "\1\11\20\7\7\0\1\7\1\126\30\7\5\0\6\7"+
    "\1\11\20\7\7\0\13\7\1\127\16\7\5\0\6\7"+
    "\1\11\20\7\7\0\7\7\1\130\22\7\5\0\6\7"+
    "\1\11\20\7\7\0\10\7\1\131\21\7\5\0\6\7"+
    "\1\11\20\7\7\0\14\7\1\132\15\7\5\0\6\7"+
    "\1\11\20\7\7\0\27\7\1\133\2\7\5\0\6\7"+
    "\1\11\20\7\7\0\25\7\1\134\4\7\5\0\6\7"+
    "\1\11\20\7\7\0\10\7\1\135\21\7\5\0\6\7"+
    "\1\11\20\7\7\0\15\7\1\136\14\7\5\0\6\7"+
    "\1\11\20\7\7\0\15\7\1\137\14\7\5\0\6\7"+
    "\1\11\20\7\7\0\16\7\1\140\13\7\5\0\6\7"+
    "\1\11\20\7\7\0\15\7\1\141\14\7\5\0\6\7"+
    "\1\11\20\7\7\0\7\7\1\142\1\143\21\7\5\0"+
    "\6\7\1\11\20\7\7\0\1\144\31\7\5\0\6\7"+
    "\1\11\20\7\7\0\24\7\1\145\5\7\5\0\6\7"+
    "\1\11\20\7\7\0\14\7\1\146\15\7\5\0\6\7"+
    "\1\11\20\7\7\0\16\7\1\147\13\7\5\0\6\7"+
    "\1\11\20\7\7\0\1\150\31\7\5\0\6\7\1\11"+
    "\20\7\7\0\13\7\1\151\16\7\5\0\4\7\1\121"+
    "\1\7\1\11\10\7\1\121\7\7\7\0\13\7\1\152"+
    "\1\7\1\153\5\7\1\154\6\7\5\0\6\7\1\11"+
    "\20\7\7\0\6\7\1\155\23\7\5\0\6\7\1\11"+
    "\12\7\1\156\5\7\7\0\32\7\5\0\2\157\1\7"+
    "\1\157\2\7\1\11\20\7\7\0\32\7\5\0\4\7"+
    "\1\160\1\7\1\11\1\161\1\7\1\162\1\163\7\7"+
    "\1\164\1\7\1\165\2\7\7\0\4\7\1\163\2\7"+
    "\1\162\2\7\1\164\1\7\1\161\12\7\1\165\2\7"+
    "\5\0\4\7\1\166\1\7\1\11\2\7\1\166\15\7"+
    "\7\0\7\7\1\166\22\7\5\0\4\7\1\165\1\7"+
    "\1\11\15\7\1\165\2\7\7\0\27\7\1\165\2\7"+
    "\5\0\4\7\1\167\1\7\1\11\1\161\1\7\1\170"+
    "\15\7\7\0\7\7\1\170\4\7\1\161\15\7\5\0"+
    "\4\7\1\164\1\7\1\11\13\7\1\164\4\7\7\0"+
    "\12\7\1\164\17\7\5\0\4\7\1\163\1\7\1\11"+
    "\3\7\1\163\14\7\7\0\4\7\1\163\25\7\5\0"+
    "\4\7\1\171\1\7\1\11\1\161\2\7\1\163\14\7"+
    "\7\0\4\7\1\163\7\7\1\161\15\7\5\0\4\7"+
    "\1\161\1\7\1\11\1\161\17\7\7\0\14\7\1\161"+
    "\15\7\5\0\4\7\1\172\1\7\1\11\2\7\1\170"+
    "\12\7\1\165\2\7\7\0\7\7\1\170\17\7\1\165"+
    "\2\7\5\0\4\7\1\170\1\7\1\11\2\7\1\170"+
    "\15\7\7\0\7\7\1\170\22\7\5\0\4\7\1\162"+
    "\1\7\1\11\2\7\1\162\15\7\7\0\7\7\1\162"+
    "\22\7\5\0\6\7\1\11\20\7\7\0\3\7\1\173"+
    "\26\7\5\0\6\7\1\11\20\7\7\0\14\7\1\174"+
    "\15\7\5\0\6\7\1\11\20\7\7\0\2\7\1\175"+
    "\27\7\5\0\6\7\1\11\20\7\7\0\23\7\1\176"+
    "\6\7\5\0\6\7\1\11\20\7\7\0\7\7\1\177"+
    "\22\7\5\0\6\7\1\11\20\7\7\0\23\7\1\200"+
    "\6\7\5\0\6\7\1\11\20\7\7\0\1\7\1\201"+
    "\30\7\5\0\6\7\1\11\20\7\7\0\10\7\1\202"+
    "\21\7\5\0\6\7\1\11\20\7\7\0\1\7\1\203"+
    "\30\7\5\0\6\7\1\11\20\7\7\0\15\7\1\204"+
    "\14\7\5\0\6\7\1\11\20\7\7\0\2\7\1\205"+
    "\27\7\5\0\6\7\1\11\20\7\7\0\20\7\1\206"+
    "\11\7\5\0\6\7\1\11\20\7\7\0\2\7\1\207"+
    "\27\7\5\0\6\7\1\11\20\7\7\0\1\210\31\7"+
    "\5\0\6\7\1\11\20\7\7\0\1\7\1\211\30\7"+
    "\5\0\6\7\1\11\20\7\7\0\10\7\1\212\21\7"+
    "\5\0\6\7\1\11\20\7\7\0\4\7\1\213\25\7"+
    "\5\0\6\7\1\11\20\7\7\0\6\7\1\214\23\7"+
    "\5\0\6\7\1\11\20\7\7\0\20\7\1\215\11\7"+
    "\5\0\6\7\1\11\20\7\7\0\1\7\1\216\30\7"+
    "\5\0\6\7\1\11\20\7\7\0\7\7\1\217\22\7"+
    "\5\0\6\7\1\11\20\7\7\0\15\7\1\220\14\7"+
    "\5\0\4\7\1\161\1\7\1\11\1\161\17\7\7\0"+
    "\14\7\1\161\1\221\14\7\5\0\6\7\1\11\20\7"+
    "\7\0\7\7\1\222\22\7\5\0\6\7\1\11\20\7"+
    "\7\0\10\7\1\223\21\7\5\0\6\7\1\11\7\7"+
    "\1\224\10\7\7\0\32\7\5\0\2\225\1\226\1\225"+
    "\2\7\1\11\20\7\7\0\32\7\5\0\4\7\1\227"+
    "\1\7\1\11\3\7\1\230\4\7\1\231\1\232\1\7"+
    "\1\233\1\234\3\7\7\0\1\7\1\234\2\7\1\230"+
    "\5\7\1\233\2\7\1\231\3\7\1\232\10\7\5\0"+
    "\4\7\1\232\1\7\1\11\11\7\1\232\6\7\7\0"+
    "\21\7\1\232\10\7\5\0\4\7\1\235\1\7\1\11"+
    "\3\7\1\230\7\7\1\233\4\7\7\0\4\7\1\230"+
    "\5\7\1\233\17\7\5\0\4\7\1\236\1\7\1\11"+
    "\10\7\1\236\7\7\7\0\15\7\1\236\14\7\5\0"+
    "\4\7\1\237\1\7\1\11\10\7\1\237\7\7\7\0"+
    "\15\7\1\237\14\7\5\0\4\7\1\234\1\7\1\11"+
    "\14\7\1\234\3\7\7\0\1\7\1\234\30\7\5\0"+
    "\4\7\1\230\1\7\1\11\3\7\1\230\14\7\7\0"+
    "\4\7\1\230\25\7\5\0\4\7\1\240\1\7\1\11"+
    "\11\7\1\232\1\7\1\233\4\7\7\0\12\7\1\233"+
    "\6\7\1\232\10\7\5\0\4\7\1\233\1\7\1\11"+
    "\13\7\1\233\4\7\7\0\12\7\1\233\17\7\5\0"+
    "\4\7\1\241\1\7\1\11\10\7\1\236\1\232\6\7"+
    "\7\0\15\7\1\236\3\7\1\232\10\7\5\0\4\7"+
    "\1\242\1\7\1\11\13\7\1\233\1\234\3\7\7\0"+
    "\1\7\1\234\10\7\1\233\17\7\5\0\6\7\1\11"+
    "\20\7\7\0\4\7\1\243\7\7\1\244\15\7\5\0"+
    "\6\7\1\11\20\7\7\0\15\7\1\245\14\7\5\0"+
    "\6\7\1\11\20\7\7\0\4\7\1\246\25\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\247\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\4\7\1\250\25\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\251\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\7\7\1\252\22\7\5\0"+
    "\6\7\1\11\20\7\7\0\4\7\1\253\25\7\5\0"+
    "\6\7\1\11\20\7\7\0\24\7\1\254\5\7\5\0"+
    "\6\7\1\11\20\7\7\0\14\7\1\255\15\7\5\0"+
    "\6\7\1\11\20\7\7\0\16\7\1\256\13\7\5\0"+
    "\6\7\1\11\20\7\7\0\4\7\1\257\25\7\5\0"+
    "\6\7\1\11\20\7\7\0\23\7\1\260\6\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\261\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\15\7\1\262\14\7\5\0"+
    "\6\7\1\11\20\7\7\0\15\7\1\263\14\7\5\0"+
    "\6\7\1\11\20\7\7\0\15\7\1\264\14\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\265\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\14\7\1\266\15\7\5\0"+
    "\6\7\1\11\20\7\7\0\17\7\1\267\12\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\270\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\14\7\1\271\15\7\5\0"+
    "\6\7\1\11\20\7\7\0\1\272\31\7\5\0\6\7"+
    "\1\11\20\7\7\0\7\7\1\273\22\7\5\0\6\7"+
    "\1\11\6\7\1\274\11\7\7\0\32\7\5\0\2\225"+
    "\1\7\1\225\2\7\1\11\20\7\7\0\32\7\5\0"+
    "\1\275\2\7\1\275\2\7\1\11\20\7\7\0\32\7"+
    "\5\0\4\7\1\276\1\7\1\11\4\7\1\277\1\300"+
    "\6\7\1\301\3\7\7\0\1\277\1\301\1\300\27\7"+
    "\5\0\4\7\1\277\1\7\1\11\4\7\1\277\13\7"+
    "\7\0\1\277\31\7\5\0\4\7\1\302\1\7\1\11"+
    "\5\7\1\302\12\7\7\0\2\7\1\302\27\7\5\0"+
    "\4\7\1\303\1\7\1\11\5\7\1\303\12\7\7\0"+
    "\2\7\1\303\27\7\5\0\4\7\1\301\1\7\1\11"+
    "\14\7\1\301\3\7\7\0\1\7\1\301\30\7\5\0"+
    "\4\7\1\304\1\7\1\11\5\7\1\304\12\7\7\0"+
    "\2\7\1\304\27\7\5\0\4\7\1\305\1\7\1\11"+
    "\4\7\1\277\7\7\1\301\3\7\7\0\1\277\1\301"+
    "\30\7\5\0\4\7\1\306\1\7\1\11\5\7\1\303"+
    "\6\7\1\301\3\7\7\0\1\7\1\301\1\303\27\7"+
    "\5\0\4\7\1\307\1\7\1\11\5\7\1\304\6\7"+
    "\1\301\3\7\7\0\1\7\1\301\1\304\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\5\7\1\310\24\7\5\0"+
    "\6\7\1\11\20\7\7\0\5\7\1\311\24\7\5\0"+
    "\6\7\1\11\20\7\7\0\7\7\1\312\22\7\5\0"+
    "\6\7\1\11\20\7\7\0\1\313\31\7\5\0\6\7"+
    "\1\11\20\7\7\0\1\314\31\7\5\0\6\7\1\11"+
    "\20\7\7\0\2\7\1\315\27\7\5\0\6\7\1\11"+
    "\20\7\7\0\4\7\1\316\25\7\5\0\6\7\1\11"+
    "\20\7\7\0\15\7\1\317\14\7\5\0\6\7\1\11"+
    "\20\7\7\0\20\7\1\320\11\7\5\0\6\7\1\11"+
    "\20\7\7\0\14\7\1\321\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\14\7\1\322\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\14\7\1\323\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\14\7\1\324\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\5\7\1\325\24\7\5\0\6\7\1\11"+
    "\20\7\7\0\7\7\1\326\22\7\5\0\6\7\1\11"+
    "\20\7\7\0\17\7\1\327\12\7\5\0\6\7\1\11"+
    "\20\7\7\0\14\7\1\330\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\17\7\1\331\12\7\5\0\6\7\1\11"+
    "\20\7\7\0\32\7\1\332\4\0\1\7\1\333\1\7"+
    "\1\333\2\7\1\11\20\7\7\0\32\7\5\0\4\7"+
    "\1\334\1\7\1\11\5\7\1\335\4\7\1\336\5\7"+
    "\7\0\2\7\1\335\5\7\1\336\21\7\5\0\4\7"+
    "\1\335\1\7\1\11\5\7\1\335\12\7\7\0\2\7"+
    "\1\335\27\7\5\0\4\7\1\337\1\7\1\11\12\7"+
    "\1\337\5\7\7\0\10\7\1\337\21\7\5\0\4\7"+
    "\1\340\1\7\1\11\12\7\1\340\5\7\7\0\10\7"+
    "\1\340\21\7\5\0\4\7\1\341\1\7\1\11\12\7"+
    "\1\341\5\7\7\0\10\7\1\341\21\7\5\0\4\7"+
    "\1\342\1\7\1\11\12\7\1\342\5\7\7\0\10\7"+
    "\1\342\21\7\5\0\4\7\1\343\1\7\1\11\5\7"+
    "\1\335\4\7\1\340\5\7\7\0\2\7\1\335\5\7"+
    "\1\340\21\7\5\0\4\7\1\344\1\7\1\11\12\7"+
    "\1\344\5\7\7\0\10\7\1\344\21\7\5\0\4\7"+
    "\1\345\1\7\1\11\12\7\1\345\5\7\7\0\10\7"+
    "\1\345\21\7\5\0\6\7\1\11\20\7\7\0\6\7"+
    "\1\346\23\7\5\0\6\7\1\11\20\7\7\0\22\7"+
    "\1\347\7\7\5\0\6\7\1\11\20\7\7\0\4\7"+
    "\1\350\25\7\5\0\6\7\1\11\20\7\7\0\15\7"+
    "\1\351\14\7\5\0\6\7\1\11\20\7\7\0\5\7"+
    "\1\352\24\7\5\0\6\7\1\11\20\7\7\0\14\7"+
    "\1\353\15\7\5\0\6\7\1\11\20\7\7\0\15\7"+
    "\1\354\14\7\5\0\6\7\1\11\20\7\7\0\16\7"+
    "\1\355\13\7\5\0\6\7\1\11\20\7\7\0\15\7"+
    "\1\356\14\7\5\0\6\7\1\11\20\7\7\0\16\7"+
    "\1\357\2\7\1\360\10\7\5\0\6\7\1\11\20\7"+
    "\7\0\16\7\1\361\13\7\5\0\6\7\1\11\20\7"+
    "\7\0\4\7\1\362\25\7\5\0\6\7\1\11\20\7"+
    "\7\0\7\7\1\363\22\7\5\0\2\7\1\364\3\7"+
    "\1\11\20\7\7\0\32\7\5\0\4\7\1\365\1\7"+
    "\1\11\1\366\2\7\1\367\2\7\1\370\1\7\1\371"+
    "\7\7\7\0\4\7\1\367\1\7\1\370\5\7\1\366"+
    "\1\371\14\7\5\0\4\7\1\370\1\7\1\11\6\7"+
    "\1\370\11\7\7\0\6\7\1\370\23\7\5\0\4\7"+
    "\1\372\1\7\1\11\1\366\2\7\1\367\4\7\1\371"+
    "\7\7\7\0\4\7\1\367\7\7\1\366\1\371\14\7"+
    "\5\0\4\7\1\373\1\7\1\11\1\366\7\7\1\371"+
    "\7\7\7\0\14\7\1\366\1\371\14\7\5\0\4\7"+
    "\1\367\1\7\1\11\3\7\1\367\14\7\7\0\4\7"+
    "\1\367\25\7\5\0\4\7\1\371\1\7\1\11\10\7"+
    "\1\371\7\7\7\0\15\7\1\371\14\7\5\0\4\7"+
    "\1\366\1\7\1\11\1\366\17\7\7\0\14\7\1\366"+
    "\15\7\5\0\4\7\1\374\1\7\1\11\3\7\1\367"+
    "\2\7\1\370\11\7\7\0\4\7\1\367\1\7\1\370"+
    "\23\7\5\0\4\7\1\372\1\7\1\11\3\7\1\367"+
    "\4\7\1\371\7\7\7\0\4\7\1\367\10\7\1\371"+
    "\14\7\5\0\4\7\1\367\1\7\1\11\1\366\2\7"+
    "\1\367\14\7\7\0\4\7\1\367\7\7\1\366\15\7"+
    "\5\0\6\7\1\11\20\7\7\0\7\7\1\375\22\7"+
    "\5\0\6\7\1\11\20\7\7\0\14\7\1\376\15\7"+
    "\5\0\6\7\1\11\20\7\7\0\5\7\1\377\24\7"+
    "\5\0\6\7\1\11\20\7\7\0\13\7\1\u0100\16\7"+
    "\5\0\6\7\1\11\20\7\7\0\6\7\1\u0101\7\7"+
    "\1\u0102\3\7\1\u0103\7\7\5\0\6\7\1\11\20\7"+
    "\7\0\5\7\1\u0104\24\7\5\0\6\7\1\11\20\7"+
    "\7\0\7\7\1\u0105\22\7\5\0\6\7\1\11\20\7"+
    "\7\0\15\7\1\u0106\14\7\5\0\6\7\1\11\20\7"+
    "\7\0\4\7\1\u0107\25\7\5\0\6\7\1\11\20\7"+
    "\7\0\14\7\1\u0108\15\7\5\0\6\7\1\11\20\7"+
    "\7\0\16\7\1\u0109\13\7\5\0\1\u010a\2\7\1\u010a"+
    "\2\7\1\11\20\7\7\0\32\7\5\0\4\7\1\u010b"+
    "\1\7\1\11\3\7\1\u010b\2\7\1\u010c\11\7\7\0"+
    "\4\7\1\u010b\1\7\1\u010c\23\7\5\0\4\7\1\u010d"+
    "\1\7\1\11\6\7\1\u010d\11\7\7\0\6\7\1\u010d"+
    "\23\7\5\0\4\7\1\u010c\1\7\1\11\6\7\1\u010c"+
    "\11\7\7\0\6\7\1\u010c\23\7\5\0\4\7\1\u010b"+
    "\1\7\1\11\3\7\1\u010b\14\7\7\0\4\7\1\u010b"+
    "\25\7\5\0\4\7\1\u010b\1\7\1\11\3\7\1\u010b"+
    "\2\7\1\u010d\11\7\7\0\4\7\1\u010b\1\7\1\u010d"+
    "\23\7\5\0\6\7\1\11\20\7\7\0\10\7\1\u010e"+
    "\21\7\5\0\6\7\1\11\20\7\7\0\23\7\1\u010f"+
    "\6\7\5\0\6\7\1\11\20\7\7\0\16\7\1\u0110"+
    "\2\7\1\u0111\10\7\5\0\6\7\1\11\20\7\7\0"+
    "\14\7\1\u0112\15\7\5\0\6\7\1\11\20\7\7\0"+
    "\7\7\1\u0113\22\7\5\0\6\7\1\11\20\7\7\0"+
    "\4\7\1\u0114\25\7\5\0\6\7\1\11\20\7\7\0"+
    "\14\7\1\u0115\15\7\5\0\6\7\1\11\20\7\7\0"+
    "\16\7\1\u0116\13\7\5\0\6\7\1\11\20\7\7\0"+
    "\4\7\1\u0117\25\7\5\0\6\7\1\11\20\7\7\0"+
    "\2\7\1\u0118\27\7\5\0\6\7\1\11\20\7\7\0"+
    "\13\7\1\u0119\16\7\5\0\6\7\1\11\20\7\7\0"+
    "\15\7\1\u011a\14\7\5\0\6\7\1\11\20\7\7\0"+
    "\14\7\1\u011b\15\7\5\0\1\7\1\u011c\1\7\1\u011c"+
    "\2\7\1\11\20\7\7\0\32\7\5\0\4\7\1\u011d"+
    "\1\7\1\11\6\7\1\u011d\11\7\7\0\6\7\1\u011d"+
    "\23\7\5\0\6\7\1\11\20\7\7\0\7\7\1\u011e"+
    "\22\7\5\0\6\7\1\11\20\7\7\0\7\7\1\u011f"+
    "\22\7\5\0\6\7\1\11\20\7\7\0\15\7\1\u0120"+
    "\14\7\5\0\6\7\1\11\20\7\7\0\4\7\1\u0121"+
    "\25\7\5\0\6\7\1\11\20\7\7\0\10\7\1\u0122"+
    "\21\7\5\0\6\7\1\11\20\7\7\0\21\7\1\u0123"+
    "\10\7\5\0\6\7\1\11\20\7\7\0\23\7\1\u0124"+
    "\6\7\5\0\6\7\1\11\20\7\7\0\4\7\1\u0125"+
    "\25\7\5\0\6\7\1\11\20\7\7\0\1\u0126\31\7"+
    "\5\0\6\7\1\11\20\7\7\0\14\7\1\u0127\15\7"+
    "\5\0\6\7\1\11\20\7\7\0\7\7\1\u0128\22\7"+
    "\5\0\6\7\1\11\20\7\7\0\5\7\1\u0129\24\7"+
    "\5\0\6\7\1\11\20\7\7\0\15\7\1\u012a\14\7"+
    "\5\0\6\7\1\11\20\7\7\0\4\7\1\u012b\25\7"+
    "\5\0\6\7\1\11\20\7\7\0\1\u012c\31\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\u012d\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\13\7\1\u012e\16\7\5\0"+
    "\6\7\1\11\20\7\7\0\7\7\1\u012f\22\7\5\0"+
    "\6\7\1\11\20\7\7\0\22\7\1\u0130\7\7\5\0"+
    "\6\7\1\11\20\7\7\0\7\7\1\u0131\22\7\5\0"+
    "\6\7\1\11\20\7\7\0\21\7\1\u0132\10\7\5\0"+
    "\6\7\1\11\20\7\7\0\16\7\1\u0133\13\7\5\0"+
    "\6\7\1\11\20\7\7\0\17\7\1\u0134\12\7\5\0"+
    "\6\7\1\11\20\7\7\0\16\7\1\u0135\3\7\1\u0136"+
    "\7\7\5\0\6\7\1\11\20\7\7\0\5\7\1\u0137"+
    "\24\7\5\0\6\7\1\11\20\7\7\0\14\7\1\u0138"+
    "\15\7\5\0\6\7\1\11\20\7\7\0\14\7\1\u0139"+
    "\15\7\5\0\6\7\1\11\20\7\7\0\7\7\1\u013a"+
    "\22\7\5\0\6\7\1\11\20\7\7\0\4\7\1\u013b"+
    "\25\7\5\0\6\7\1\11\20\7\7\0\4\7\1\u013c"+
    "\25\7\5\0\6\7\1\11\20\7\7\0\1\u013d\31\7"+
    "\5\0\6\7\1\11\20\7\7\0\22\7\1\u013e\7\7"+
    "\5\0\6\7\1\11\20\7\7\0\7\7\1\u013f\22\7"+
    "\5\0\6\7\1\11\20\7\7\0\7\7\1\u0140\22\7"+
    "\5\0\6\7\1\11\20\7\7\0\4\7\1\u0141\25\7"+
    "\5\0\6\7\1\11\20\7\7\0\14\7\1\u0142\15\7"+
    "\5\0\6\7\1\11\20\7\7\0\11\7\1\u0143\20\7"+
    "\5\0\6\7\1\11\20\7\7\0\16\7\1\u0144\13\7"+
    "\5\0\6\7\1\11\20\7\7\0\17\7\1\u0145\12\7"+
    "\5\0\6\7\1\11\20\7\7\0\5\7\1\u0146\24\7"+
    "\5\0\6\7\1\11\20\7\7\0\1\u0147\31\7\5\0"+
    "\6\7\1\11\20\7\7\0\14\7\1\u0148\15\7\5\0"+
    "\6\7\1\11\20\7\7\0\4\7\1\u0149\25\7\5\0"+
    "\6\7\1\11\20\7\7\0\4\7\1\u014a\25\7\5\0"+
    "\6\7\1\11\20\7\7\0\16\7\1\u014b\13\7\5\0"+
    "\6\7\1\11\20\7\7\0\21\7\1\u014c\10\7\5\0"+
    "\6\7\1\11\20\7\7\0\23\7\1\u014d\6\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\u014e\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\7\7\1\u014f\22\7\5\0"+
    "\6\7\1\11\20\7\7\0\7\7\1\u0150\22\7\5\0"+
    "\6\7\1\11\20\7\7\0\11\7\1\u0151\20\7\5\0"+
    "\6\7\1\11\20\7\7\0\2\7\1\u0152\27\7\5\0"+
    "\6\7\1\11\20\7\7\0\1\u0153\31\7\5\0\6\7"+
    "\1\11\20\7\7\0\1\u0154\31\7\5\0\6\7\1\11"+
    "\20\7\7\0\14\7\1\u0155\15\7\5\0\6\7\1\11"+
    "\20\7\7\0\22\7\1\u0156\7\7\5\0\6\7\1\11"+
    "\20\7\7\0\7\7\1\u0157\22\7\5\0\6\7\1\11"+
    "\20\7\7\0\12\7\1\u0158\17\7\5\0\6\7\1\11"+
    "\20\7\7\0\4\7\1\u0159\25\7\5\0\6\7\1\11"+
    "\20\7\7\0\16\7\1\u015a\13\7\5\0\6\7\1\11"+
    "\20\7\7\0\2\7\1\u015b\27\7\5\0\6\7\1\11"+
    "\20\7\7\0\1\u015c\31\7\5\0\6\7\1\11\20\7"+
    "\7\0\2\7\1\u015d\27\7\5\0\6\7\1\11\20\7"+
    "\7\0\16\7\1\u015e\13\7\5\0\6\7\1\11\20\7"+
    "\7\0\4\7\1\u015f\25\7\5\0\6\7\1\11\20\7"+
    "\7\0\1\u0160\31\7\5\0\6\7\1\11\20\7\7\0"+
    "\1\u0161\31\7\5\0\6\7\1\11\20\7\7\0\14\7"+
    "\1\u0162\15\7\5\0\6\7\1\11\20\7\7\0\12\7"+
    "\1\u0163\17\7\5\0\6\7\1\11\20\7\7\0\10\7"+
    "\1\u0164\21\7\5\0\6\7\1\11\20\7\7\0\1\u0165"+
    "\31\7\5\0\6\7\1\11\20\7\7\0\7\7\1\u0166"+
    "\22\7\5\0\6\7\1\11\20\7\7\0\1\u0167\31\7"+
    "\5\0\6\7\1\11\20\7\7\0\14\7\1\u0168\15\7"+
    "\5\0\6\7\1\11\20\7\7\0\16\7\1\u0169\13\7"+
    "\5\0\6\7\1\11\20\7\7\0\2\7\1\u016a\27\7"+
    "\5\0\6\7\1\11\20\7\7\0\10\7\1\u016b\21\7"+
    "\5\0\6\7\1\11\20\7\7\0\4\7\1\u016c\25\7"+
    "\5\0\6\7\1\11\20\7\7\0\2\7\1\u016d\27\7"+
    "\5\0\6\7\1\11\20\7\7\0\7\7\1\u016e\22\7"+
    "\5\0\6\7\1\11\20\7\7\0\2\7\1\u016f\27\7"+
    "\5\0\6\7\1\11\20\7\7\0\1\u0170\31\7\5\0"+
    "\6\7\1\11\20\7\7\0\1\u0171\31\7\5\0\6\7"+
    "\1\11\20\7\7\0\4\7\1\u0172\25\7\5\0\6\7"+
    "\1\11\20\7\7\0\10\7\1\u0173\21\7\5\0\6\7"+
    "\1\11\20\7\7\0\1\u0174\31\7\5\0\6\7\1\11"+
    "\20\7\7\0\2\7\1\u0175\27\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\12\1\7\11\304\1\1\11"+
    "\233\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2892) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Simbolo no valido"+yytext());
            } 
            // fall through
          case 58: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 59: break;
          case 3: 
            { System.out.println("Simbolo NUMERO::"+yytext());return symbol(NUMERO,yytext());
            } 
            // fall through
          case 60: break;
          case 4: 
            { System.out.println("Simbolo IDENTIFICADOR::"+yytext());return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 61: break;
          case 5: 
            { System.out.println("Simbolo DIAGONAL_RECTA::"+yytext());return symbol(DIAGONAL_RECTA,yytext());
            } 
            // fall through
          case 62: break;
          case 6: 
            { {System.out.println("Simbolo URL::"+yytext());return symbol(URL,yytext());}
            } 
            // fall through
          case 63: break;
          case 7: 
            { System.out.println("Simbolo DIAGONAL::"+yytext());return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 64: break;
          case 8: 
            { System.out.println("Simbolo MENOR_QUE::"+yytext());return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 65: break;
          case 9: 
            { System.out.println("Simbolo MAYOR_QUE::"+yytext());return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 66: break;
          case 10: 
            { System.out.println("Simbolo CORCHETE_ABIERTO::"+yytext());return symbol(CORCHETE_ABIERTO,yytext());
            } 
            // fall through
          case 67: break;
          case 11: 
            { System.out.println("Simbolo CORCHETE_CERRADO::"+yytext());return symbol(CORCHETE_CERRADO,yytext());
            } 
            // fall through
          case 68: break;
          case 12: 
            { System.out.println("Simbolo IGUAL::"+yytext());return symbol(IGUAL,yytext());
            } 
            // fall through
          case 69: break;
          case 13: 
            { System.out.println("Simbolo COMILLA::"+yytext());return symbol(COMILLA,yytext());
            } 
            // fall through
          case 70: break;
          case 14: 
            { System.out.println("Simbolo ID::"+yytext());return symbol(ID,yytext());
            } 
            // fall through
          case 71: break;
          case 15: 
            { System.out.println("Simbolo MENU::"+yytext());return symbol(MENU,yytext());
            } 
            // fall through
          case 72: break;
          case 16: 
            { System.out.println("Simbolo VALOR::"+yytext());return symbol(VALOR,yytext());
            } 
            // fall through
          case 73: break;
          case 17: 
            { System.out.println("Simbolo VIDEO::"+yytext());return symbol(VIDEO,yytext());
            } 
            // fall through
          case 74: break;
          case 18: 
            { System.out.println("Simbolo SITIO::"+yytext());return symbol(SITIO,yytext());
            } 
            // fall through
          case 75: break;
          case 19: 
            { System.out.println("Simbolo TEXTO::"+yytext());return symbol(TEXTO,yytext());
            } 
            // fall through
          case 76: break;
          case 20: 
            { System.out.println("Simbolo ANCHO::"+yytext());return symbol(ANCHO,yytext());
            } 
            // fall through
          case 77: break;
          case 21: 
            { System.out.println("Simbolo COLOR::"+yytext());return symbol(COLOR,yytext());
            } 
            // fall through
          case 78: break;
          case 22: 
            { System.out.println("Simbolo CLASE::"+yytext());return symbol(CLASE,yytext());
            } 
            // fall through
          case 79: break;
          case 23: 
            { System.out.println("Simbolo PADRE::"+yytext());return symbol(PADRE,yytext());
            } 
            // fall through
          case 80: break;
          case 24: 
            { System.out.println("Simbolo ACCION::"+yytext());return symbol(ACCION,yytext());
            } 
            // fall through
          case 81: break;
          case 25: 
            { System.out.println("Simbolo NOMBRE::"+yytext());return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 82: break;
          case 26: 
            { System.out.println("Simbolo ORIGEN::"+yytext());return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 83: break;
          case 27: 
            { System.out.println("Simbolo IMAGEN::"+yytext());return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 84: break;
          case 28: 
            { System.out.println("Simbolo TITULO::"+yytext());return symbol(TITULO,yytext());
            } 
            // fall through
          case 85: break;
          case 29: 
            { System.out.println("Simbolo ALTURA::"+yytext());return symbol(ALTURA,yytext());
            } 
            // fall through
          case 86: break;
          case 30: 
            { System.out.println("Simbolo PAGINA::"+yytext());return symbol(PAGINA,yytext());
            } 
            // fall through
          case 87: break;
          case 31: 
            { System.out.println("Simbolo HTTPS::"+yytext());return symbol(HTTPS,yytext());
            } 
            // fall through
          case 88: break;
          case 32: 
            { System.out.println("Simbolo DERECHA::"+yytext());return symbol(DERECHA,yytext());
            } 
            // fall through
          case 89: break;
          case 33: 
            { System.out.println("Simbolo CENTRAR::"+yytext());return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 90: break;
          case 34: 
            { System.out.println("Simbolo PARRAFO::"+yytext());return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 91: break;
          case 35: 
            { System.out.println("Simbolo ACCIONES::"+yytext());return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 92: break;
          case 36: 
            { System.out.println("Simbolo ETIQUETA::"+yytext());return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 93: break;
          case 37: 
            { System.out.println("Simbolo ATRIBUTO::"+yytext());return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 94: break;
          case 38: 
            { System.out.println("Simbolo PARAMETRO::"+yytext());return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 95: break;
          case 39: 
            { System.out.println("Simbolo ATRIBUTOS::"+yytext());return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 96: break;
          case 40: 
            { System.out.println("Simbolo ETIQUETAS::"+yytext());return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { System.out.println("Simbolo IZQUIERDA::"+yytext());return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 98: break;
          case 42: 
            { System.out.println("Simbolo FORMATO_FECHA::"+yytext());return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 99: break;
          case 43: 
            { System.out.println("Simbolo PARAMETROS::"+yytext());return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 100: break;
          case 44: 
            { System.out.println("Simbolo ALINEACION::"+yytext());return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 101: break;
          case 45: 
            { System.out.println("Simbolo JUSTIFICAR::"+yytext());return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 102: break;
          case 46: 
            { System.out.println("Simbolo NUEVA_PAGINA::"+yytext());return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 103: break;
          case 47: 
            { System.out.println("Simbolo BORRAR_PAGINA::"+yytext());return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 104: break;
          case 48: 
            { System.out.println("Simbolo FECHA_CREACION::"+yytext());return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 105: break;
          case 49: 
            { System.out.println("Simbolo NUEVO_SITIO_WEB::"+yytext());return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 106: break;
          case 50: 
            { System.out.println("Simbolo USUARIO_CREACION::"+yytext());return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 107: break;
          case 51: 
            { System.out.println("Simbolo BORRAR_SITIO_WEB::"+yytext());return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 108: break;
          case 52: 
            { System.out.println("Simbolo MODIFICAR_PAGINA::"+yytext());return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 109: break;
          case 53: 
            { System.out.println("Simbolo BORRAR_COMPONENTE::"+yytext());return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 110: break;
          case 54: 
            { System.out.println("Simbolo AGREGAR_COMPONENTE::"+yytext());return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 111: break;
          case 55: 
            { System.out.println("Simbolo FECHA_MODIFICACION::"+yytext());return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 112: break;
          case 56: 
            { System.out.println("Simbolo USUARIO_MODIFICACION::"+yytext());return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 113: break;
          case 57: 
            { System.out.println("Simbolo MODIFICAR_COMPONENTE::"+yytext());return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
