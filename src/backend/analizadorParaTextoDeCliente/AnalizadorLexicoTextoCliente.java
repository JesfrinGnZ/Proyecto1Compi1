/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;
import frontend.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\75\1\76\1\1\16\11\4\0\1\3\1\0"+
    "\1\37\1\73\1\12\3\107\3\0\2\107\1\6\1\110\1\33\1\4"+
    "\1\7\7\5\1\106\1\102\1\0\1\34\1\36\1\35\1\107\1\0"+
    "\1\54\1\52\1\56\1\53\1\42\1\57\1\63\1\60\1\47\1\72"+
    "\1\103\1\64\1\61\1\40\1\44\1\62\1\65\1\55\1\46\1\50"+
    "\1\41\1\43\1\51\1\70\1\103\1\71\1\66\1\107\1\67\1\0"+
    "\1\45\1\0\1\13\1\26\1\14\1\74\1\20\1\101\1\103\1\100"+
    "\1\15\2\103\1\32\1\24\1\17\1\16\1\22\1\30\1\23\1\21"+
    "\1\25\1\27\1\31\4\103\1\0\1\10\2\0\6\11\1\77\32\11"+
    "\2\0\4\11\4\0\1\105\2\0\1\11\7\0\1\105\4\0\1\105"+
    "\5\0\27\105\1\0\37\105\1\0\u01ca\105\4\0\14\105\16\0\5\105"+
    "\7\0\1\105\1\0\1\105\21\0\165\105\1\0\2\105\2\0\4\105"+
    "\1\0\1\105\6\0\1\105\1\0\3\105\1\0\1\105\1\0\24\105"+
    "\1\0\123\105\1\0\213\105\1\0\5\105\2\104\246\105\1\0\46\105"+
    "\2\0\1\105\7\0\47\105\7\0\1\11\1\0\55\105\1\0\1\105"+
    "\1\0\2\105\1\0\2\105\1\0\1\105\10\0\33\105\5\0\3\105"+
    "\15\0\6\11\5\0\1\11\4\0\13\105\1\0\1\11\3\0\112\105"+
    "\4\0\146\105\1\0\10\105\1\11\1\0\12\105\1\0\23\105\2\0"+
    "\1\105\17\0\1\11\73\105\2\0\145\105\16\0\66\105\4\0\1\105"+
    "\5\0\56\105\22\0\34\105\104\0\25\105\1\0\10\104\26\0\16\104"+
    "\1\0\201\105\2\0\12\105\1\0\23\105\1\0\10\105\2\0\2\105"+
    "\2\0\26\105\1\0\7\105\1\0\1\105\3\0\4\105\2\0\11\105"+
    "\2\0\2\105\2\0\4\105\10\0\1\105\4\0\2\105\1\0\5\105"+
    "\2\0\14\105\2\11\7\0\1\11\5\0\3\105\1\0\6\105\4\0"+
    "\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0\2\105\1\0"+
    "\2\105\2\0\1\105\1\0\5\105\4\0\2\105\2\0\3\105\3\0"+
    "\1\105\7\0\4\105\1\0\1\105\7\0\20\105\13\0\3\105\1\0"+
    "\11\105\1\0\3\105\1\0\26\105\1\0\7\105\1\0\2\105\1\0"+
    "\5\105\2\0\12\105\1\0\3\105\1\0\3\105\2\0\1\105\17\0"+
    "\4\105\2\0\12\105\1\0\1\11\7\0\1\105\7\0\3\105\1\0"+
    "\10\105\2\0\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0"+
    "\5\105\2\0\11\105\2\0\2\105\2\0\3\105\10\0\2\105\4\0"+
    "\2\105\1\0\5\105\2\0\12\105\1\0\1\105\20\0\2\105\1\0"+
    "\6\105\3\0\3\105\1\0\4\105\3\0\2\105\1\0\1\105\1\0"+
    "\2\105\3\0\2\105\3\0\3\105\3\0\14\105\4\0\5\105\3\0"+
    "\3\105\1\0\4\105\2\0\1\105\6\0\1\105\16\0\12\105\11\0"+
    "\1\11\6\0\4\105\1\0\10\105\1\0\3\105\1\0\27\105\1\0"+
    "\20\105\3\0\10\105\1\0\3\105\1\0\4\105\7\0\2\105\1\0"+
    "\3\105\5\0\4\105\2\0\12\105\20\0\1\104\3\105\1\0\10\105"+
    "\1\0\3\105\1\0\27\105\1\0\12\105\1\0\5\105\2\0\11\105"+
    "\1\0\3\105\1\0\4\105\7\0\2\105\7\0\1\105\1\0\4\105"+
    "\2\0\12\105\1\0\2\105\16\0\3\105\1\0\10\105\1\0\3\105"+
    "\1\0\51\105\2\0\10\105\1\0\3\105\1\0\5\105\5\0\3\104"+
    "\1\105\7\0\5\105\2\0\12\105\12\0\6\105\2\0\2\105\1\0"+
    "\22\105\3\0\30\105\1\0\11\105\1\0\1\105\2\0\7\105\3\0"+
    "\1\105\4\0\6\105\1\0\1\105\1\0\10\105\6\0\12\105\2\0"+
    "\2\105\15\0\72\105\4\0\1\11\17\105\1\0\12\105\47\0\2\105"+
    "\1\0\1\105\2\0\2\105\1\0\1\105\2\0\1\105\6\0\4\105"+
    "\1\0\7\105\1\0\3\105\1\0\1\105\1\0\1\105\2\0\2\105"+
    "\1\0\15\105\1\0\3\105\2\0\5\105\1\0\1\105\1\0\6\105"+
    "\2\0\12\105\2\0\4\105\40\0\1\105\27\0\2\105\6\0\12\105"+
    "\13\0\1\105\1\0\1\105\1\0\1\105\4\0\12\105\1\0\44\105"+
    "\4\0\24\105\1\0\22\105\1\0\44\105\11\0\1\105\71\0\112\105"+
    "\6\0\116\105\2\0\46\105\1\0\1\105\5\0\1\105\2\0\53\105"+
    "\1\0\u014d\105\1\0\4\105\2\0\7\105\1\0\1\105\1\0\4\105"+
    "\2\0\51\105\1\0\4\105\2\0\41\105\1\0\4\105\2\0\7\105"+
    "\1\0\1\105\1\0\4\105\2\0\17\105\1\0\71\105\1\0\4\105"+
    "\2\0\103\105\2\0\3\105\40\0\20\105\20\0\126\105\2\0\6\105"+
    "\3\0\u026c\105\2\0\21\105\1\0\32\105\5\0\113\105\3\0\13\105"+
    "\7\0\15\105\1\0\7\105\13\0\25\105\13\0\24\105\14\0\15\105"+
    "\1\0\3\105\1\0\2\105\14\0\124\105\3\0\1\105\3\0\1\11"+
    "\2\105\2\0\12\105\41\0\3\105\1\11\1\0\12\105\6\0\130\105"+
    "\10\0\53\105\5\0\106\105\12\0\37\105\1\0\14\105\4\0\14\105"+
    "\12\0\50\105\2\0\5\105\13\0\54\105\4\0\32\105\6\0\12\105"+
    "\46\0\34\105\4\0\77\105\1\0\35\105\2\0\13\105\6\0\12\105"+
    "\15\0\1\105\10\0\16\105\1\104\101\0\114\105\4\0\12\105\21\0"+
    "\11\105\14\0\164\105\14\0\70\105\10\0\12\105\3\0\61\105\2\0"+
    "\11\104\107\0\3\105\1\0\43\105\1\0\2\105\6\0\366\105\5\0"+
    "\1\104\u011a\105\2\0\6\105\2\0\46\105\2\0\6\105\2\0\10\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\37\105\2\0\65\105"+
    "\1\0\7\105\1\0\1\105\3\0\3\105\1\0\7\105\3\0\4\105"+
    "\2\0\6\105\4\0\15\105\5\0\3\105\1\0\7\105\16\0\5\11"+
    "\30\0\1\75\1\75\5\11\20\0\2\105\23\0\1\105\13\0\5\11"+
    "\1\0\12\11\1\0\1\105\15\0\1\105\20\0\15\105\3\0\37\11"+
    "\21\0\15\105\4\104\1\105\3\104\14\105\21\0\1\105\4\0\1\105"+
    "\2\0\12\105\1\0\1\105\3\0\5\105\6\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\4\105\1\0\13\105\2\0\4\105\5\0\5\105"+
    "\4\0\1\105\21\0\51\105\u032d\0\64\104\u0716\0\57\105\1\0\57\105"+
    "\1\0\205\105\6\0\11\105\14\0\46\105\1\0\1\105\5\0\1\105"+
    "\2\0\70\105\7\0\1\105\17\0\30\105\11\0\7\105\1\0\7\105"+
    "\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105"+
    "\1\0\7\105\1\0\40\105\57\0\1\105\u01d5\0\3\105\31\0\17\105"+
    "\1\0\5\105\2\0\5\105\4\0\126\105\2\0\2\105\2\0\3\105"+
    "\1\0\132\105\1\0\4\105\5\0\51\105\3\0\136\105\21\0\33\105"+
    "\65\0\20\105\u0200\0\u19b6\105\112\0\u51d6\105\52\0\u048d\105\103\0\56\105"+
    "\2\0\u010d\105\3\0\34\105\24\0\60\105\3\104\1\0\12\105\1\0"+
    "\163\105\45\0\11\105\2\0\147\105\2\0\43\105\1\104\1\0\10\105"+
    "\77\0\61\105\20\0\1\11\7\0\64\105\14\0\105\105\1\104\12\0"+
    "\12\105\6\0\30\105\3\0\1\105\1\0\1\105\2\0\56\105\2\0"+
    "\44\105\14\0\35\105\3\0\101\105\16\0\13\105\6\0\37\105\1\0"+
    "\67\105\11\0\16\105\2\0\12\105\6\0\27\105\3\0\111\105\30\0"+
    "\3\105\2\0\20\105\2\0\5\105\12\0\6\105\2\0\6\105\2\0"+
    "\6\105\11\0\7\105\1\0\7\105\1\0\53\105\1\0\12\105\12\0"+
    "\173\105\1\0\2\105\2\0\12\105\6\0\u2ba4\105\14\0\27\105\4\0"+
    "\61\105\u2104\0\u016e\105\2\0\152\105\46\0\7\105\14\0\5\105\5\0"+
    "\14\105\1\0\15\105\1\0\5\105\1\0\1\105\1\0\2\105\1\0"+
    "\2\105\1\0\154\105\41\0\u016b\105\22\0\100\105\2\0\66\105\50\0"+
    "\14\105\1\11\3\0\20\105\20\0\20\105\3\0\2\105\30\0\3\105"+
    "\31\0\1\11\6\0\5\105\1\0\207\105\2\0\1\11\4\0\1\11"+
    "\13\0\12\105\7\0\32\105\4\0\1\105\1\0\32\105\13\0\131\105"+
    "\3\0\6\105\2\0\6\105\2\0\6\105\2\0\3\105\3\0\2\11"+
    "\3\0\2\11\22\0\3\11\4\0\14\105\1\0\32\105\1\0\23\105"+
    "\1\0\2\105\1\0\17\105\2\0\16\105\42\0\173\105\105\0\65\105"+
    "\210\0\1\105\202\0\35\105\3\0\61\105\17\0\1\105\37\0\40\105"+
    "\20\0\33\105\5\0\53\105\5\0\36\105\2\0\44\105\4\0\10\105"+
    "\1\0\5\105\52\0\236\105\2\0\12\105\6\0\44\104\4\0\44\104"+
    "\4\0\50\105\10\0\64\105\234\0\u0137\105\11\0\26\105\12\0\10\105"+
    "\230\0\6\105\2\0\1\105\1\0\54\105\1\0\2\105\3\0\1\105"+
    "\2\0\27\105\12\0\27\105\11\0\37\105\101\0\23\105\1\0\2\105"+
    "\12\0\26\105\12\0\32\105\106\0\70\105\6\0\2\105\100\0\4\105"+
    "\1\0\2\105\5\0\10\105\1\0\3\105\1\0\33\105\4\0\3\105"+
    "\4\0\1\105\40\0\35\105\3\0\35\105\43\0\10\105\1\0\36\105"+
    "\31\0\66\105\12\0\26\105\12\0\23\105\15\0\22\105\156\0\111\105"+
    "\67\0\63\105\15\0\63\105\u030d\0\107\105\37\0\12\105\17\0\74\105"+
    "\2\0\1\11\22\0\31\105\7\0\12\105\6\0\65\105\1\0\12\105"+
    "\20\0\44\105\2\0\1\105\11\0\105\105\5\0\3\105\3\0\13\105"+
    "\1\0\1\105\43\0\22\105\1\0\45\105\6\0\1\104\101\0\7\105"+
    "\1\0\1\105\1\0\4\105\1\0\17\105\1\0\12\105\7\0\73\105"+
    "\5\0\12\105\6\0\4\105\1\0\10\105\2\0\2\105\2\0\26\105"+
    "\1\0\7\105\1\0\2\105\1\0\5\105\2\0\11\105\2\0\2\105"+
    "\2\0\3\105\2\0\1\105\6\0\1\105\5\0\7\105\2\0\7\105"+
    "\3\0\5\105\213\0\113\104\5\0\12\104\46\0\106\105\1\0\1\105"+
    "\10\0\12\105\246\0\66\105\2\0\11\105\27\0\6\105\42\0\101\105"+
    "\3\0\1\105\13\0\12\105\46\0\70\105\10\0\12\105\66\0\32\105"+
    "\3\0\17\105\4\0\12\105\u0166\0\112\105\25\0\1\105\u01c0\0\71\105"+
    "\u0107\0\11\104\1\0\55\104\1\0\11\104\17\0\12\104\30\0\36\104"+
    "\2\0\26\104\1\0\16\104\u0349\0\u039a\105\146\0\157\105\21\0\304\105"+
    "\u0abc\0\u042f\105\u0fd1\0\u0247\105\u21b9\0\u0239\105\7\0\37\105\1\0\12\105"+
    "\146\0\36\105\2\0\5\105\13\0\67\105\11\0\4\105\14\0\12\105"+
    "\11\0\25\105\5\0\23\105\u0370\0\105\105\13\0\57\105\20\0\21\105"+
    "\100\0\1\104\37\0\u17ed\104\23\0\u02f3\104\u250d\0\2\105\u0bfe\0\153\105"+
    "\5\0\15\105\3\0\11\105\7\0\12\105\3\0\2\105\1\0\4\11"+
    "\u14c1\0\5\105\3\0\6\105\10\11\10\105\2\0\7\105\36\0\4\105"+
    "\224\0\3\105\u01bb\0\125\105\1\0\107\105\1\0\2\105\2\0\1\105"+
    "\2\0\2\105\2\0\4\105\1\0\14\105\1\0\1\105\1\0\7\105"+
    "\1\0\101\105\1\0\4\105\2\0\10\105\1\0\7\105\1\0\34\105"+
    "\1\0\4\105\1\0\5\105\1\0\1\105\3\0\7\105\1\0\u0154\105"+
    "\2\0\31\105\1\0\31\105\1\0\37\105\1\0\31\105\1\0\37\105"+
    "\1\0\31\105\1\0\37\105\1\0\31\105\1\0\37\105\1\0\31\105"+
    "\1\0\10\105\2\0\62\105\u0200\0\67\105\4\0\62\105\10\0\1\105"+
    "\16\0\1\105\26\0\5\105\1\0\17\105\u0550\0\7\104\1\0\21\104"+
    "\2\0\7\104\1\0\2\104\1\0\5\104\u07d5\0\305\105\13\0\7\105"+
    "\51\0\113\104\5\0\12\104\u04a6\0\4\105\1\0\33\105\1\0\2\105"+
    "\1\0\1\105\2\0\1\105\1\0\12\105\1\0\4\105\1\0\1\105"+
    "\1\0\1\105\6\0\1\105\4\0\1\105\1\0\1\105\1\0\1\105"+
    "\1\0\3\105\1\0\2\105\1\0\1\105\2\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\2\105\1\0\1\105"+
    "\2\0\4\105\1\0\7\105\1\0\4\105\1\0\4\105\1\0\1\105"+
    "\1\0\12\105\1\0\21\105\5\0\3\105\1\0\5\105\1\0\21\105"+
    "\u0274\0\32\104\6\0\32\104\6\0\32\104\u0e76\0\ua6d7\105\51\0\u1035\105"+
    "\13\0\336\105\2\0\u1682\105\u295e\0\u021e\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\105\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\5\1\1\4\1\5\1\6"+
    "\1\7\5\1\1\0\1\10\5\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\2\0\1\10"+
    "\1\11\21\0\1\10\7\0\1\12\17\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\2\0\1\11\21\0\1\10\1\13\5\0\1\12"+
    "\26\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\6\0\1\14\16\0\2\15"+
    "\14\0\1\16\1\0\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\16\36\0\2\17\1\20\1\0"+
    "\1\20\2\0\1\17\2\0\1\17\1\10\1\0\1\20"+
    "\1\10\1\0\1\10\34\0\1\21\16\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\6\0\1\22\1\23"+
    "\2\0\1\24\3\0\1\25\1\26\2\0\1\27\2\0"+
    "\1\30\7\0\1\31\1\0\1\32\1\33\1\34\1\32"+
    "\1\0\1\34\1\33\2\32\1\34\1\33\1\10\5\0"+
    "\1\35\1\36\3\0\1\37\3\0\1\40\1\0\1\41"+
    "\5\0\2\42\4\0\1\43\1\44\1\45\1\44\1\45"+
    "\1\43\16\0\1\46\1\47\1\50\1\0\1\51\1\0"+
    "\2\52\25\0\1\53\11\0\1\54\11\0\1\55\4\0"+
    "\1\56\1\57\15\0\1\60\17\0\1\61\13\0\1\62"+
    "\3\0\1\63\10\0\1\64\1\0\1\65\4\0\1\66"+
    "\1\0\1\67\4\0\1\70\1\71\3\0\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[531];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\222\0\u0124\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\222\0\222\0\222\0\222\0\u02da"+
    "\0\u0323\0\u036c\0\u03b5\0\u03fe\0\222\0\u0447\0\u0490\0\u04d9"+
    "\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u056b\0\u06d8"+
    "\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920"+
    "\0\222\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f"+
    "\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67"+
    "\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\222\0\u108a\0\u10d3\0\u03fe\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\u11ae\0\u1488\0\u13f6\0\u14d1\0\u1289\0\u151a"+
    "\0\u11f7\0\u1563\0\u1364\0\u15ac\0\u12d2\0\u15f5\0\u0920\0\u0447"+
    "\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d"+
    "\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u1b17\0\222\0\u1b60\0\u1ba9\0\u1b17\0\u1bf2\0\u0e42"+
    "\0\u0447\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1"+
    "\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039"+
    "\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2114"+
    "\0\u2281\0\u21a6\0\u22ca\0\u2082\0\u2313\0\u20cb\0\u235c\0\u1fa7"+
    "\0\u23a5\0\u2039\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b"+
    "\0\222\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a"+
    "\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\222"+
    "\0\u0447\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u0447\0\u2da0\0\u2f0d\0\u2de9"+
    "\0\u2f56\0\u2d57\0\u2f9f\0\u2e32\0\u2fe8\0\u2da0\0\u3031\0\u2e7b"+
    "\0\u307a\0\u2de9\0\u30c3\0\222\0\u310c\0\u3155\0\u319e\0\u31e7"+
    "\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f"+
    "\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677"+
    "\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf"+
    "\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u0447\0\u3abe"+
    "\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3a75\0\u3c74\0\222"+
    "\0\u3b07\0\u3cbd\0\u3abe\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072"+
    "\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470\0\u44b9\0\222"+
    "\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u466f\0\u46b8\0\u4701"+
    "\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u466f\0\u4900"+
    "\0\u474a\0\u4949\0\u47dc\0\u4992\0\u4793\0\u49db\0\u4a24\0\u4a6d"+
    "\0\u4ab6\0\u4aff\0\u4b48\0\222\0\222\0\u4b91\0\u4bda\0\222"+
    "\0\u4c23\0\u4c6c\0\u4cb5\0\222\0\222\0\u4cfe\0\u4d47\0\222"+
    "\0\u4d90\0\u4dd9\0\222\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u4f46"+
    "\0\u4f8f\0\u4fd8\0\222\0\u5021\0\u506a\0\u50b3\0\u50fc\0\u0447"+
    "\0\u5145\0\u506a\0\u518e\0\u50fc\0\222\0\u51d7\0\u5220\0\u5145"+
    "\0\u5269\0\u52b2\0\u52fb\0\u5344\0\u538d\0\222\0\222\0\u53d6"+
    "\0\u541f\0\u5468\0\222\0\u54b1\0\u54fa\0\u5543\0\222\0\u558c"+
    "\0\222\0\u55d5\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\222"+
    "\0\u578b\0\u57d4\0\u581d\0\u5866\0\u58af\0\u0447\0\u0447\0\222"+
    "\0\222\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae"+
    "\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6"+
    "\0\222\0\222\0\222\0\u5d3f\0\222\0\u5d88\0\u0447\0\222"+
    "\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0"+
    "\0\u6019\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186\0\u61cf\0\u6218"+
    "\0\u6261\0\u62aa\0\u62f3\0\u633c\0\u6385\0\222\0\u63ce\0\u6417"+
    "\0\u6460\0\u64a9\0\u64f2\0\u653b\0\u6584\0\u65cd\0\u6616\0\222"+
    "\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815\0\u685e"+
    "\0\u68a7\0\222\0\u68f0\0\u6939\0\u6982\0\u69cb\0\222\0\222"+
    "\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38\0\u6b81\0\u6bca\0\u6c13"+
    "\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37\0\u6d80\0\222\0\u6dc9\0\u6e12"+
    "\0\u6e5b\0\u6ea4\0\u6eed\0\u6f36\0\u6f7f\0\u6fc8\0\u7011\0\u705a"+
    "\0\u70a3\0\u70ec\0\u7135\0\u717e\0\u71c7\0\222\0\u7210\0\u7259"+
    "\0\u72a2\0\u72eb\0\u7334\0\u737d\0\u73c6\0\u740f\0\u7458\0\u74a1"+
    "\0\u74ea\0\222\0\u7533\0\u757c\0\u75c5\0\222\0\u760e\0\u7657"+
    "\0\u76a0\0\u76e9\0\u7732\0\u777b\0\u77c4\0\u780d\0\222\0\u7856"+
    "\0\222\0\u789f\0\u78e8\0\u7931\0\u797a\0\222\0\u79c3\0\222"+
    "\0\u7a0c\0\u7a55\0\u7a9e\0\u7ae7\0\222\0\222\0\u7b30\0\u7b79"+
    "\0\u7bc2\0\222\0\222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[531];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\4\3\1\6\2\3\1\7\3\3"+
    "\1\10\1\11\1\3\1\12\6\3\1\13\1\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\10\1\3\1\11\1\13"+
    "\10\3\1\7\5\3\1\12\3\3\1\21\4\3\1\22"+
    "\2\3\1\5\13\3\1\4\2\5\4\3\1\6\2\3"+
    "\1\7\3\3\1\10\1\11\1\3\1\12\6\3\1\13"+
    "\1\3\1\14\1\15\1\16\1\17\1\20\1\10\1\3"+
    "\1\11\1\13\10\3\1\7\5\3\1\12\3\3\1\21"+
    "\4\3\1\22\2\3\1\5\1\3\1\23\1\24\7\3"+
    "\10\25\1\26\102\25\1\5\5\25\1\26\100\25\10\0"+
    "\1\27\2\0\1\30\1\31\1\0\1\32\6\0\1\33"+
    "\16\0\1\32\3\0\1\33\3\0\1\30\1\0\1\31"+
    "\32\0\10\25\1\34\3\25\1\35\10\25\1\36\22\25"+
    "\1\36\5\25\1\35\42\25\1\37\5\25\1\40\25\25"+
    "\1\40\54\25\1\41\14\25\1\42\22\25\1\42\50\25"+
    "\1\43\2\25\1\44\40\25\1\44\44\25\1\45\2\25"+
    "\1\46\40\25\1\46\34\25\10\47\1\50\26\47\1\51"+
    "\1\52\1\53\1\54\1\47\1\55\1\47\1\56\1\57"+
    "\1\60\1\47\1\61\1\47\1\62\1\47\1\63\1\64"+
    "\1\47\1\65\1\66\26\47\4\67\1\70\1\71\1\72"+
    "\1\71\1\73\1\67\1\72\30\67\1\74\1\67\1\72"+
    "\1\67\1\75\1\76\2\67\1\77\2\67\1\100\2\67"+
    "\1\101\1\102\4\67\1\103\2\67\1\104\13\67\1\71"+
    "\2\67\4\25\2\105\1\25\1\105\1\26\2\25\2\105"+
    "\3\25\1\105\5\25\1\105\13\25\1\105\7\25\3\105"+
    "\1\25\2\105\14\25\1\105\4\25\1\105\4\25\1\105"+
    "\12\25\1\26\14\25\1\106\73\25\1\26\14\25\1\107"+
    "\63\25\121\0\1\110\3\0\1\111\1\112\5\0\1\113"+
    "\1\114\5\0\1\115\14\0\1\112\5\0\1\113\1\111"+
    "\2\0\1\114\2\0\1\115\34\0\1\116\12\0\1\117"+
    "\6\0\1\115\22\0\1\117\6\0\1\115\34\0\1\111"+
    "\3\0\1\111\41\0\1\111\42\0\1\114\13\0\1\114"+
    "\34\0\1\114\37\0\1\120\4\0\1\112\5\0\1\121"+
    "\23\0\1\112\5\0\1\121\43\0\1\122\3\0\1\111"+
    "\6\0\1\121\31\0\1\121\1\111\32\0\10\25\1\123"+
    "\3\25\1\124\41\25\1\124\42\25\1\125\12\25\1\126"+
    "\31\25\1\126\43\25\1\127\13\25\1\130\34\25\1\130"+
    "\27\25\10\0\1\112\4\0\1\112\31\0\1\112\41\0"+
    "\10\25\1\131\4\25\1\132\31\25\1\132\41\25\10\0"+
    "\1\117\12\0\1\117\31\0\1\117\33\0\10\25\1\133"+
    "\12\25\1\134\31\25\1\134\33\25\10\0\1\115\21\0"+
    "\1\115\31\0\1\115\24\0\10\25\1\135\21\25\1\136"+
    "\31\25\1\136\24\25\10\47\1\50\26\47\1\51\51\47"+
    "\37\137\1\140\51\137\10\47\1\50\26\47\1\51\1\47"+
    "\1\141\57\47\1\50\26\47\1\51\6\47\1\142\52\47"+
    "\1\50\26\47\1\51\10\47\1\143\50\47\1\50\26\47"+
    "\1\51\15\47\1\144\43\47\1\50\26\47\1\51\7\47"+
    "\1\145\51\47\1\50\26\47\1\51\13\47\1\146\45\47"+
    "\1\50\26\47\1\51\2\47\1\147\4\47\1\150\51\47"+
    "\1\50\26\47\1\51\4\47\1\151\54\47\1\50\26\47"+
    "\1\51\1\152\22\47\1\153\1\154\34\47\1\50\26\47"+
    "\1\51\4\47\1\155\17\47\1\156\34\47\1\50\26\47"+
    "\1\51\2\47\1\157\56\47\1\50\26\47\1\51\4\47"+
    "\1\160\54\47\1\50\26\47\1\51\14\47\1\161\34\47"+
    "\10\67\1\162\56\67\1\103\31\67\1\162\56\67\1\163"+
    "\25\67\2\164\1\67\1\164\1\162\56\67\1\163\16\67"+
    "\1\164\6\67\2\165\1\72\1\165\1\73\22\165\5\67"+
    "\26\165\1\67\1\103\3\165\1\67\1\165\2\67\3\165"+
    "\1\67\1\165\1\67\2\165\2\67\4\166\2\167\1\170"+
    "\1\167\1\170\22\167\5\166\26\167\1\166\1\171\3\167"+
    "\1\166\1\167\2\166\3\167\1\166\1\167\1\166\2\167"+
    "\2\166\10\67\1\162\36\67\1\172\17\67\1\103\31\67"+
    "\1\162\50\67\1\173\5\67\1\103\1\67\1\174\27\67"+
    "\1\162\36\67\1\175\17\67\1\103\31\67\1\162\31\67"+
    "\1\176\24\67\1\103\31\67\1\162\31\67\1\177\24\67"+
    "\1\103\31\67\1\162\31\67\1\200\24\67\1\103\31\67"+
    "\1\162\43\67\1\201\12\67\1\103\31\67\1\162\30\67"+
    "\1\202\25\67\1\103\21\67\4\25\2\203\1\25\1\203"+
    "\1\26\2\25\2\203\3\25\1\203\5\25\1\203\13\25"+
    "\1\203\7\25\3\203\1\25\2\203\14\25\1\203\4\25"+
    "\1\203\4\25\1\203\12\25\1\26\11\25\1\204\66\25"+
    "\10\0\1\205\2\0\1\206\1\0\1\207\1\210\7\0"+
    "\1\211\1\0\1\212\13\0\1\210\2\0\1\207\2\0"+
    "\1\211\1\0\1\206\10\0\1\212\33\0\1\213\4\0"+
    "\1\213\31\0\1\213\51\0\1\212\17\0\1\212\34\0"+
    "\1\212\33\0\1\214\2\0\1\206\1\0\1\215\31\0"+
    "\1\215\4\0\1\206\44\0\1\211\15\0\1\211\23\0"+
    "\1\211\46\0\1\210\5\0\1\210\25\0\1\210\54\0"+
    "\1\216\2\0\1\206\2\0\1\210\25\0\1\210\7\0"+
    "\1\206\44\0\1\206\2\0\1\206\40\0\1\206\44\0"+
    "\1\217\4\0\1\215\12\0\1\212\16\0\1\215\15\0"+
    "\1\212\33\0\1\215\4\0\1\215\31\0\1\215\51\0"+
    "\1\207\4\0\1\207\31\0\1\207\41\0\10\25\1\220"+
    "\4\25\1\221\31\25\1\221\51\25\1\222\4\25\1\223"+
    "\31\25\1\223\51\25\1\224\15\25\1\225\23\25\1\225"+
    "\46\25\1\226\17\25\1\227\34\25\1\227\33\25\1\230"+
    "\2\25\1\231\40\25\1\231\44\25\1\232\5\25\1\233"+
    "\25\25\1\233\44\25\10\47\1\50\26\47\1\51\2\47"+
    "\1\234\56\47\1\50\26\47\1\51\1\47\1\235\57\47"+
    "\1\50\26\47\1\51\7\47\1\236\51\47\1\50\26\47"+
    "\1\51\7\47\1\237\51\47\1\50\26\47\1\51\10\47"+
    "\1\240\50\47\1\50\26\47\1\241\61\47\1\50\26\47"+
    "\1\51\30\47\1\242\30\47\1\50\26\47\1\51\10\47"+
    "\1\243\50\47\1\50\26\47\1\51\15\47\1\244\43\47"+
    "\1\50\26\47\1\51\16\47\1\245\42\47\1\50\26\47"+
    "\1\51\15\47\1\246\43\47\1\50\26\47\1\51\7\47"+
    "\1\247\1\250\50\47\1\50\26\47\1\51\24\47\1\251"+
    "\34\47\1\50\26\47\1\51\14\47\1\252\44\47\1\50"+
    "\26\47\1\51\16\47\1\253\42\47\1\50\26\47\1\51"+
    "\13\47\1\254\45\47\1\50\26\47\1\51\13\47\1\255"+
    "\7\47\1\256\25\47\67\166\1\171\21\166\4\67\2\257"+
    "\1\67\1\257\1\162\56\67\1\163\16\67\1\257\6\67"+
    "\2\165\1\72\1\165\1\73\22\165\5\67\26\165\1\67"+
    "\1\260\3\165\1\67\1\165\2\67\3\165\1\67\1\165"+
    "\1\67\2\165\2\67\4\166\2\167\1\170\1\167\1\170"+
    "\22\167\5\166\26\167\1\166\1\261\3\167\1\166\1\167"+
    "\2\166\3\167\1\166\1\167\1\166\2\167\2\166\10\67"+
    "\1\162\42\67\1\262\13\67\1\103\31\67\1\162\43\67"+
    "\1\263\12\67\1\103\31\67\1\162\54\67\1\264\1\67"+
    "\1\103\31\67\1\162\37\67\1\265\16\67\1\103\31\67"+
    "\1\162\44\67\1\266\11\67\1\103\31\67\1\162\27\67"+
    "\1\267\26\67\1\103\31\67\1\162\27\67\1\270\26\67"+
    "\1\103\31\67\1\162\44\67\1\271\11\67\1\103\31\67"+
    "\1\162\35\67\1\272\20\67\1\103\21\67\4\25\2\273"+
    "\1\25\1\273\1\26\2\25\2\273\3\25\1\273\5\25"+
    "\1\273\13\25\1\273\7\25\3\273\1\25\2\273\14\25"+
    "\1\273\4\25\1\273\4\25\1\273\12\25\1\26\10\25"+
    "\1\274\60\25\1\275\6\25\10\0\1\276\5\0\1\277"+
    "\4\0\1\300\1\301\1\0\1\302\1\303\11\0\1\303"+
    "\2\0\1\277\5\0\1\302\2\0\1\300\3\0\1\301"+
    "\37\0\1\301\13\0\1\301\34\0\1\301\37\0\1\304"+
    "\5\0\1\277\7\0\1\302\15\0\1\277\5\0\1\302"+
    "\46\0\1\305\12\0\1\305\31\0\1\305\43\0\1\306"+
    "\12\0\1\306\31\0\1\306\43\0\1\303\16\0\1\303"+
    "\11\0\1\303\57\0\1\277\5\0\1\277\25\0\1\277"+
    "\54\0\1\307\13\0\1\301\1\0\1\302\23\0\1\302"+
    "\6\0\1\301\37\0\1\302\15\0\1\302\23\0\1\302"+
    "\46\0\1\310\12\0\1\305\1\301\30\0\1\305\3\0"+
    "\1\301\37\0\1\311\15\0\1\302\1\303\11\0\1\303"+
    "\10\0\1\302\36\0\10\25\1\312\5\25\1\313\25\25"+
    "\1\313\54\25\1\314\15\25\1\315\23\25\1\315\46\25"+
    "\1\316\12\25\1\317\31\25\1\317\43\25\1\320\16\25"+
    "\1\321\11\25\1\321\57\25\1\322\13\25\1\323\34\25"+
    "\1\323\37\25\1\305\12\25\1\324\31\25\1\324\33\25"+
    "\10\47\1\50\26\47\1\51\3\47\1\325\55\47\1\50"+
    "\26\47\1\51\14\47\1\326\44\47\1\50\26\47\1\51"+
    "\25\47\1\327\33\47\1\50\26\47\1\51\23\47\1\330"+
    "\35\47\1\50\26\47\1\51\7\47\1\331\51\47\1\50"+
    "\26\47\1\51\10\47\1\332\50\47\1\50\26\47\1\51"+
    "\1\47\1\333\57\47\1\50\26\47\1\51\15\47\1\334"+
    "\43\47\1\50\26\47\1\51\20\47\1\335\40\47\1\50"+
    "\26\47\1\51\2\47\1\336\56\47\1\50\26\47\1\51"+
    "\1\337\60\47\1\50\26\47\1\51\1\47\1\340\57\47"+
    "\1\50\26\47\1\51\4\47\1\341\54\47\1\50\26\47"+
    "\1\51\6\47\1\342\52\47\1\50\26\47\1\51\20\47"+
    "\1\343\40\47\1\50\26\47\1\51\7\47\1\344\51\47"+
    "\1\50\26\47\1\51\15\47\1\345\43\47\1\50\26\47"+
    "\1\51\7\47\1\346\41\47\4\67\2\347\1\67\1\347"+
    "\1\162\56\67\1\163\16\67\1\347\12\67\1\162\31\67"+
    "\1\350\24\67\1\103\31\67\1\162\52\67\1\351\3\67"+
    "\1\103\31\67\1\162\30\67\1\352\25\67\1\103\31\67"+
    "\1\162\30\67\1\353\25\67\1\103\31\67\1\162\31\67"+
    "\1\354\24\67\1\103\31\67\1\162\37\67\1\355\16\67"+
    "\1\103\31\67\1\162\30\67\1\356\25\67\1\103\31\67"+
    "\1\162\44\67\1\357\11\67\1\103\31\67\1\162\37\67"+
    "\1\360\16\67\1\103\21\67\4\25\2\361\1\25\1\361"+
    "\1\26\2\25\2\361\3\25\1\361\5\25\1\361\13\25"+
    "\1\361\7\25\3\361\1\25\2\361\14\25\1\361\4\25"+
    "\1\361\4\25\1\361\12\25\1\26\71\25\1\275\16\25"+
    "\1\26\22\25\1\362\55\25\10\0\1\363\6\0\1\364"+
    "\1\365\6\0\1\366\10\0\1\364\1\366\1\365\56\0"+
    "\1\364\6\0\1\364\20\0\1\364\60\0\1\367\7\0"+
    "\1\367\21\0\1\367\56\0\1\370\7\0\1\370\21\0"+
    "\1\370\56\0\1\366\16\0\1\366\11\0\1\366\57\0"+
    "\1\371\7\0\1\371\21\0\1\371\56\0\1\372\6\0"+
    "\1\364\7\0\1\366\10\0\1\364\1\366\57\0\1\373"+
    "\7\0\1\370\6\0\1\366\11\0\1\366\1\370\56\0"+
    "\1\374\7\0\1\371\6\0\1\366\11\0\1\366\1\371"+
    "\46\0\10\25\1\364\6\25\1\375\20\25\1\375\60\25"+
    "\1\376\16\25\1\377\11\25\1\377\57\25\1\367\7\25"+
    "\1\u0100\21\25\1\u0100\56\25\1\u0101\7\25\1\u0102\21\25"+
    "\1\u0102\56\25\1\u0103\7\25\1\u0104\21\25\1\u0104\46\25"+
    "\10\47\1\50\26\47\1\51\4\47\1\u0105\7\47\1\u0106"+
    "\44\47\1\50\26\47\1\51\15\47\1\u0107\43\47\1\50"+
    "\26\47\1\51\1\47\1\u0108\57\47\1\50\26\47\1\51"+
    "\2\47\1\u0109\56\47\1\50\26\47\1\51\4\47\1\u010a"+
    "\54\47\1\50\26\47\1\51\4\47\1\u010b\54\47\1\50"+
    "\26\47\1\51\24\47\1\u010c\34\47\1\50\26\47\1\51"+
    "\14\47\1\u010d\44\47\1\50\26\47\1\51\4\47\1\u010e"+
    "\54\47\1\50\26\47\1\51\23\47\1\u010f\35\47\1\50"+
    "\26\47\1\51\2\47\1\u0110\56\47\1\50\26\47\1\51"+
    "\15\47\1\u0111\43\47\1\50\26\47\1\51\15\47\1\u0112"+
    "\43\47\1\50\26\47\1\51\2\47\1\u0113\56\47\1\50"+
    "\26\47\1\51\14\47\1\u0114\44\47\1\50\26\47\1\51"+
    "\17\47\1\u0115\41\47\1\50\26\47\1\51\2\47\1\u0116"+
    "\56\47\1\50\26\47\1\51\1\u0117\50\47\4\67\2\u0118"+
    "\1\u0119\1\u0118\1\162\56\67\1\163\16\67\1\u0118\12\67"+
    "\1\162\33\67\1\u011a\22\67\1\103\31\67\1\162\31\67"+
    "\1\u011b\24\67\1\103\31\67\1\162\36\67\1\u011c\17\67"+
    "\1\103\31\67\1\162\53\67\1\u011d\2\67\1\103\31\67"+
    "\1\162\45\67\1\u011e\10\67\1\103\31\67\1\162\44\67"+
    "\1\u011f\11\67\1\103\31\67\1\162\56\67\1\u0120\31\67"+
    "\1\162\43\67\1\u0121\12\67\1\103\31\67\1\162\36\67"+
    "\1\u0122\17\67\1\103\21\67\4\25\2\u0123\1\25\1\u0123"+
    "\1\26\2\25\2\u0123\3\25\1\u0123\5\25\1\u0123\13\25"+
    "\1\u0123\7\25\3\u0123\1\25\2\u0123\14\25\1\u0123\4\25"+
    "\1\u0123\4\25\1\u0123\12\25\1\26\22\25\1\u0124\55\25"+
    "\10\0\1\u0125\7\0\1\u0126\4\0\1\u0127\14\0\1\u0126"+
    "\5\0\1\u0127\50\0\1\u0126\7\0\1\u0126\21\0\1\u0126"+
    "\56\0\1\u0128\14\0\1\u0128\22\0\1\u0128\50\0\1\u0129"+
    "\14\0\1\u0129\22\0\1\u0129\50\0\1\u012a\14\0\1\u012a"+
    "\22\0\1\u012a\50\0\1\u012b\14\0\1\u012b\22\0\1\u012b"+
    "\50\0\1\u012c\7\0\1\u0126\4\0\1\u0129\14\0\1\u0126"+
    "\5\0\1\u0129\50\0\1\u012d\14\0\1\u012d\22\0\1\u012d"+
    "\50\0\1\u012e\14\0\1\u012e\22\0\1\u012e\40\0\10\25"+
    "\1\u012f\7\25\1\u0130\21\25\1\u0130\56\25\1\u0131\14\25"+
    "\1\u0132\22\25\1\u0132\50\25\1\u0133\14\25\1\u0134\22\25"+
    "\1\u0134\50\25\1\u0135\14\25\1\u0136\22\25\1\u0136\40\25"+
    "\10\47\1\50\26\47\1\51\5\47\1\u0137\53\47\1\50"+
    "\26\47\1\51\5\47\1\u0138\53\47\1\50\26\47\1\51"+
    "\7\47\1\u0139\51\47\1\50\26\47\1\51\2\47\1\u013a"+
    "\56\47\1\50\26\47\1\51\1\u013b\60\47\1\50\26\47"+
    "\1\u013c\61\47\1\50\26\47\1\u013d\61\47\1\50\26\47"+
    "\1\51\4\47\1\u013e\54\47\1\50\26\47\1\51\15\47"+
    "\1\u013f\43\47\1\50\26\47\1\u0140\61\47\1\50\26\47"+
    "\1\51\14\47\1\u0141\44\47\1\50\26\47\1\51\14\47"+
    "\1\u0142\44\47\1\50\26\47\1\51\14\47\1\u0143\44\47"+
    "\1\50\26\47\1\u0144\61\47\1\50\26\47\1\u0145\61\47"+
    "\1\50\26\47\1\51\5\47\1\u0146\53\47\1\50\26\47"+
    "\1\51\7\47\1\u0147\51\47\1\50\26\47\1\u0148\61\47"+
    "\1\50\26\47\1\51\14\47\1\u0149\34\47\4\67\2\u0118"+
    "\1\67\1\u0118\1\162\56\67\1\163\16\67\1\u0118\6\67"+
    "\1\u014a\2\67\1\u014a\1\162\56\67\1\103\31\67\1\162"+
    "\56\67\1\u014b\31\67\1\162\27\67\1\u014c\26\67\1\103"+
    "\31\67\1\162\31\67\1\u014d\24\67\1\103\31\67\1\162"+
    "\33\67\1\u014e\22\67\1\103\31\67\1\162\47\67\1\u014f"+
    "\6\67\1\103\31\67\1\162\43\67\1\u0150\12\67\1\103"+
    "\31\67\1\162\46\67\1\u0151\7\67\1\103\31\67\1\162"+
    "\46\67\1\u0152\7\67\1\103\21\67\4\25\2\u0153\1\25"+
    "\1\u0153\1\26\2\25\2\u0153\3\25\1\u0153\5\25\1\u0153"+
    "\13\25\1\u0153\7\25\3\u0153\1\25\2\u0153\14\25\1\u0153"+
    "\4\25\1\u0153\4\25\1\u0153\6\25\2\u0154\1\25\1\u0154"+
    "\1\26\2\25\20\u0154\5\25\5\u0154\1\25\20\u0154\2\25"+
    "\3\u0154\1\25\1\u0154\3\25\2\u0154\1\25\1\u0154\2\25"+
    "\1\u0154\2\25\10\0\1\u0155\2\0\1\u0156\2\0\1\u0157"+
    "\2\0\1\u0158\1\0\1\u0159\20\0\1\u0157\1\0\1\u0158"+
    "\5\0\1\u0156\1\u0159\43\0\1\u0158\10\0\1\u0158\24\0"+
    "\1\u0158\52\0\1\u015a\2\0\1\u0156\2\0\1\u0157\4\0"+
    "\1\u0159\20\0\1\u0157\7\0\1\u0156\1\u0159\43\0\1\u015b"+
    "\2\0\1\u0156\7\0\1\u0159\30\0\1\u0156\1\u0159\43\0"+
    "\1\u0157\5\0\1\u0157\25\0\1\u0157\54\0\1\u0159\12\0"+
    "\1\u0159\31\0\1\u0159\43\0\1\u0156\2\0\1\u0156\40\0"+
    "\1\u0156\44\0\1\u015c\5\0\1\u0157\2\0\1\u0158\22\0"+
    "\1\u0157\1\0\1\u0158\52\0\1\u015a\5\0\1\u0157\4\0"+
    "\1\u0159\20\0\1\u0157\10\0\1\u0159\43\0\1\u0157\2\0"+
    "\1\u0156\2\0\1\u0157\25\0\1\u0157\7\0\1\u0156\34\0"+
    "\10\25\1\u0158\10\25\1\u015d\24\25\1\u015d\52\25\1\u0157"+
    "\5\25\1\u015e\25\25\1\u015e\54\25\1\u0156\2\25\1\u015f"+
    "\40\25\1\u015f\44\25\1\u0160\12\25\1\u0161\31\25\1\u0161"+
    "\33\25\10\47\1\50\26\47\1\51\6\47\1\u0162\52\47"+
    "\1\50\26\47\1\51\22\47\1\u0163\36\47\1\50\26\47"+
    "\1\51\4\47\1\u0164\54\47\1\50\26\47\1\51\10\47"+
    "\1\u0165\50\47\1\50\26\47\1\u0166\61\47\1\50\26\47"+
    "\1\u0167\61\47\1\50\26\47\1\51\5\47\1\u0168\53\47"+
    "\1\50\26\47\1\51\15\47\1\u0169\43\47\1\50\26\47"+
    "\1\51\16\47\1\u016a\42\47\1\50\26\47\1\u016b\61\47"+
    "\1\50\26\47\1\51\16\47\1\u016c\2\47\1\u016d\37\47"+
    "\1\50\26\47\1\51\16\47\1\u016e\42\47\1\50\26\47"+
    "\1\u016f\51\47\5\67\1\u0170\1\67\1\u0170\1\162\56\67"+
    "\1\103\16\67\1\u0170\12\67\1\162\56\67\1\u0171\31\67"+
    "\1\162\44\67\1\u0172\11\67\1\103\31\67\1\162\56\67"+
    "\1\u0167\31\67\1\162\43\67\1\u0173\12\67\1\103\31\67"+
    "\1\162\44\67\1\u0174\11\67\1\103\31\67\1\162\33\67"+
    "\1\u0175\22\67\1\103\31\67\1\162\36\67\1\u0176\17\67"+
    "\1\103\21\67\1\25\1\u0177\1\u0178\1\25\2\u0154\1\u0179"+
    "\1\u0154\1\26\1\25\1\u017a\20\u0154\1\u017a\4\25\5\u0154"+
    "\1\u0179\20\u0154\2\25\3\u0154\1\u017a\1\u0154\3\u0178\2\u0154"+
    "\1\u017b\1\u0154\2\u017c\1\u0154\1\u017a\1\u0179\10\0\1\u017d"+
    "\5\0\1\u017d\2\0\1\u017e\22\0\1\u017d\1\0\1\u017e"+
    "\52\0\1\u017f\10\0\1\u017f\24\0\1\u017f\52\0\1\u017e"+
    "\10\0\1\u017e\24\0\1\u017e\52\0\1\u017d\5\0\1\u017d"+
    "\25\0\1\u017d\54\0\1\u017d\5\0\1\u017d\2\0\1\u017f"+
    "\22\0\1\u017d\1\0\1\u017f\42\0\10\25\1\u017e\10\25"+
    "\1\u0180\24\25\1\u0180\52\25\1\u017f\10\25\1\u0181\24\25"+
    "\1\u0181\52\25\1\u017d\5\25\1\u0182\25\25\1\u0182\44\25"+
    "\10\47\1\50\26\47\1\51\7\47\1\u0183\51\47\1\50"+
    "\26\47\1\51\14\47\1\u0184\44\47\1\50\26\47\1\51"+
    "\5\47\1\u0185\53\47\1\50\26\47\1\51\14\47\1\u0186"+
    "\44\47\1\50\26\47\1\51\6\47\1\u0187\7\47\1\u0188"+
    "\3\47\1\u0189\36\47\1\50\26\47\1\51\5\47\1\u018a"+
    "\53\47\1\50\26\47\1\51\7\47\1\u018b\51\47\1\50"+
    "\26\47\1\51\15\47\1\u018c\43\47\1\50\26\47\1\51"+
    "\4\47\1\u018d\54\47\1\50\26\47\1\51\14\47\1\u018e"+
    "\34\47\6\67\1\u018f\1\67\1\162\56\67\1\103\31\67"+
    "\1\162\42\67\1\u0190\13\67\1\103\31\67\1\162\56\67"+
    "\1\u0191\31\67\1\162\56\67\1\u0192\31\67\1\162\56\67"+
    "\1\u0193\31\67\1\162\45\67\1\u0194\10\67\1\103\21\67"+
    "\2\25\1\u0195\5\25\1\26\101\25\1\u0177\1\u0178\1\25"+
    "\2\u0154\1\u0179\1\u0154\1\26\1\25\1\u017a\20\u0154\1\u017a"+
    "\4\25\5\u0154\1\u0179\20\u0154\2\25\3\u0154\1\u017a\1\u0154"+
    "\3\u0178\2\u0154\1\25\1\u0154\2\u017c\1\u0154\1\u017a\1\u0179"+
    "\1\25\1\u0177\1\u0178\1\25\4\u017a\1\26\1\25\22\u017a"+
    "\4\25\26\u017a\2\25\5\u017a\3\u0178\2\u017a\1\25\1\u017a"+
    "\2\25\3\u017a\1\25\1\u0177\1\u0178\1\25\1\u0196\3\u017a"+
    "\1\26\1\25\22\u017a\4\25\26\u017a\2\25\5\u017a\3\u0178"+
    "\2\u017a\1\u017b\1\u017a\2\25\3\u017a\4\25\2\u0154\1\u017c"+
    "\1\u0154\1\26\2\25\20\u0154\5\25\5\u0154\1\u017c\20\u0154"+
    "\2\25\3\u0154\1\25\1\u0154\3\25\2\u0154\1\25\1\u0154"+
    "\2\u017c\1\u0154\1\25\1\u017c\10\0\1\u0197\10\0\1\u0197"+
    "\24\0\1\u0197\42\0\10\25\1\u0197\10\25\1\u0198\24\25"+
    "\1\u0198\42\25\10\47\1\50\26\47\1\51\10\47\1\u0199"+
    "\50\47\1\50\26\47\1\51\23\47\1\u019a\35\47\1\50"+
    "\26\47\1\51\16\47\1\u019b\2\47\1\u019c\37\47\1\50"+
    "\26\47\1\51\6\47\1\u019d\52\47\1\50\26\47\1\51"+
    "\7\47\1\u019e\51\47\1\50\26\47\1\51\4\47\1\u019f"+
    "\54\47\1\50\26\47\1\51\14\47\1\u01a0\44\47\1\50"+
    "\26\47\1\51\16\47\1\u01a1\42\47\1\50\26\47\1\51"+
    "\4\47\1\u01a2\54\47\1\50\26\47\1\51\2\47\1\u01a3"+
    "\56\47\1\50\26\47\1\51\13\47\1\u01a4\45\47\1\50"+
    "\26\47\1\51\15\47\1\u01a5\33\47\4\67\1\u01a6\2\67"+
    "\1\u01a6\1\162\56\67\1\103\31\67\1\162\43\67\1\u01a7"+
    "\12\67\1\103\31\67\1\162\43\67\1\u01a8\12\67\1\103"+
    "\21\67\1\25\1\u0177\1\u0178\1\25\2\u017a\1\u01a9\1\u017a"+
    "\1\26\1\25\22\u017a\4\25\26\u017a\2\25\5\u017a\3\u0178"+
    "\2\u017a\1\25\1\u017a\2\25\3\u017a\10\47\1\50\26\47"+
    "\1\51\7\47\1\u01aa\51\47\1\50\26\47\1\51\7\47"+
    "\1\u01ab\51\47\1\50\26\47\1\51\15\47\1\u01ac\43\47"+
    "\1\50\26\47\1\51\4\47\1\u01ad\54\47\1\50\26\47"+
    "\1\u01ae\61\47\1\50\26\47\1\51\10\47\1\u01af\50\47"+
    "\1\50\26\47\1\51\21\47\1\u01b0\37\47\1\50\26\47"+
    "\1\51\23\47\1\u01b1\35\47\1\50\26\47\1\51\4\47"+
    "\1\u01b2\54\47\1\50\26\47\1\51\1\u01b3\60\47\1\50"+
    "\26\47\1\51\14\47\1\u01b4\44\47\1\50\26\47\1\51"+
    "\7\47\1\u01b5\51\47\1\50\26\47\1\51\5\47\1\u01b6"+
    "\43\47\5\67\1\u01b7\1\67\1\u01b7\1\162\56\67\1\103"+
    "\16\67\1\u01b7\12\67\1\162\56\67\1\u01b8\31\67\1\162"+
    "\44\67\1\u01b9\11\67\1\103\21\67\1\25\1\u0177\1\u0178"+
    "\1\25\4\u017a\1\26\1\25\22\u017a\4\25\26\u017a\2\25"+
    "\5\u017a\3\u0178\2\u017a\1\25\1\u017a\2\25\1\u017b\2\u017a"+
    "\10\47\1\50\26\47\1\51\4\47\1\u01ba\54\47\1\50"+
    "\26\47\1\51\1\u01bb\60\47\1\50\26\47\1\51\2\47"+
    "\1\u01bc\56\47\1\50\26\47\1\51\13\47\1\u01bd\45\47"+
    "\1\50\26\47\1\51\7\47\1\u01be\51\47\1\50\26\47"+
    "\1\51\22\47\1\u01bf\36\47\1\50\26\47\1\51\7\47"+
    "\1\u01c0\51\47\1\50\26\47\1\51\21\47\1\u01c1\37\47"+
    "\1\50\26\47\1\u01c2\61\47\1\50\26\47\1\51\16\47"+
    "\1\u01c3\42\47\1\50\26\47\1\51\17\47\1\u01c4\41\47"+
    "\1\50\26\47\1\51\16\47\1\u01c5\3\47\1\u01c6\26\47"+
    "\10\67\1\162\56\67\1\u01c7\31\67\1\162\56\67\1\u01c8"+
    "\21\67\10\47\1\50\26\47\1\51\5\47\1\u01c9\53\47"+
    "\1\50\26\47\1\51\14\47\1\u01ca\44\47\1\50\26\47"+
    "\1\51\14\47\1\u01cb\44\47\1\50\26\47\1\51\7\47"+
    "\1\u01cc\51\47\1\50\26\47\1\51\4\47\1\u01cd\54\47"+
    "\1\50\26\47\1\51\4\47\1\u01ce\54\47\1\50\26\47"+
    "\1\51\1\u01cf\60\47\1\50\26\47\1\51\22\47\1\u01d0"+
    "\36\47\1\50\26\47\1\51\7\47\1\u01d1\51\47\1\50"+
    "\26\47\1\51\7\47\1\u01d2\51\47\1\50\26\47\1\51"+
    "\4\47\1\u01d3\54\47\1\50\26\47\1\51\14\47\1\u01d4"+
    "\44\47\1\50\26\47\1\51\11\47\1\u01d5\47\47\1\50"+
    "\26\47\1\u01d6\61\47\1\50\26\47\1\51\16\47\1\u01d7"+
    "\42\47\1\50\26\47\1\51\17\47\1\u01d8\41\47\1\50"+
    "\26\47\1\51\5\47\1\u01d9\53\47\1\50\26\47\1\51"+
    "\1\u01da\60\47\1\50\26\47\1\51\14\47\1\u01db\44\47"+
    "\1\50\26\47\1\51\4\47\1\u01dc\54\47\1\50\26\47"+
    "\1\51\4\47\1\u01dd\54\47\1\50\26\47\1\51\16\47"+
    "\1\u01de\42\47\1\50\26\47\1\51\21\47\1\u01df\37\47"+
    "\1\50\26\47\1\51\23\47\1\u01e0\35\47\1\50\26\47"+
    "\1\51\2\47\1\u01e1\56\47\1\50\26\47\1\51\7\47"+
    "\1\u01e2\51\47\1\50\26\47\1\51\7\47\1\u01e3\51\47"+
    "\1\50\26\47\1\51\11\47\1\u01e4\47\47\1\50\26\47"+
    "\1\51\2\47\1\u01e5\56\47\1\50\26\47\1\u01e6\61\47"+
    "\1\50\26\47\1\51\1\u01e7\60\47\1\50\26\47\1\51"+
    "\1\u01e8\60\47\1\50\26\47\1\51\14\47\1\u01e9\44\47"+
    "\1\50\26\47\1\51\22\47\1\u01ea\36\47\1\50\26\47"+
    "\1\51\7\47\1\u01eb\51\47\1\50\26\47\1\51\12\47"+
    "\1\u01ec\46\47\1\50\26\47\1\51\4\47\1\u01ed\54\47"+
    "\1\50\26\47\1\51\16\47\1\u01ee\42\47\1\50\26\47"+
    "\1\51\2\47\1\u01ef\56\47\1\50\26\47\1\51\1\u01f0"+
    "\60\47\1\50\26\47\1\51\2\47\1\u01f1\56\47\1\50"+
    "\26\47\1\u01f2\61\47\1\50\26\47\1\51\16\47\1\u01f3"+
    "\42\47\1\50\26\47\1\51\4\47\1\u01f4\54\47\1\50"+
    "\26\47\1\51\1\u01f5\60\47\1\50\26\47\1\u01f6\61\47"+
    "\1\50\26\47\1\51\1\u01f7\60\47\1\50\26\47\1\51"+
    "\14\47\1\u01f8\44\47\1\50\26\47\1\51\12\47\1\u01f9"+
    "\46\47\1\50\26\47\1\51\10\47\1\u01fa\50\47\1\50"+
    "\26\47\1\51\1\u01fb\60\47\1\50\26\47\1\51\7\47"+
    "\1\u01fc\51\47\1\50\26\47\1\51\1\u01fd\60\47\1\50"+
    "\26\47\1\51\14\47\1\u01fe\44\47\1\50\26\47\1\u01ff"+
    "\61\47\1\50\26\47\1\51\16\47\1\u0200\42\47\1\50"+
    "\26\47\1\u0201\61\47\1\50\26\47\1\51\2\47\1\u0202"+
    "\56\47\1\50\26\47\1\51\10\47\1\u0203\50\47\1\50"+
    "\26\47\1\51\4\47\1\u0204\54\47\1\50\26\47\1\51"+
    "\2\47\1\u0205\56\47\1\50\26\47\1\u0206\61\47\1\50"+
    "\26\47\1\51\7\47\1\u0207\51\47\1\50\26\47\1\u0208"+
    "\61\47\1\50\26\47\1\51\2\47\1\u0209\56\47\1\50"+
    "\26\47\1\51\1\u020a\60\47\1\50\26\47\1\51\1\u020b"+
    "\60\47\1\50\26\47\1\51\4\47\1\u020c\54\47\1\50"+
    "\26\47\1\u020d\61\47\1\50\26\47\1\u020e\61\47\1\50"+
    "\26\47\1\51\10\47\1\u020f\50\47\1\50\26\47\1\51"+
    "\1\u0210\60\47\1\50\26\47\1\51\2\47\1\u0211\56\47"+
    "\1\50\26\47\1\u0212\61\47\1\50\26\47\1\u0213\51\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31755];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\22\1\1\0\1\11\5\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\21\0\1\1\7\0\1\1\17\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\11\21\0\2\1\5\0\1\11\26\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\6\0\1\1\16\0\1\1\1\11\14\0"+
    "\1\1\1\0\1\1\4\0\1\11\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\36\0\3\1\1\0\1\11\2\0"+
    "\1\1\2\0\2\1\1\0\2\1\1\0\1\1\34\0"+
    "\1\1\16\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\6\0\2\1\2\0\1\1\3\0\2\1\2\0"+
    "\1\1\2\0\1\1\7\0\1\1\1\0\3\1\1\11"+
    "\1\0\7\1\5\0\2\1\3\0\1\1\3\0\1\1"+
    "\1\0\1\1\5\0\2\1\4\0\1\1\2\11\3\1"+
    "\16\0\3\1\1\0\1\1\1\0\1\11\1\1\25\0"+
    "\1\1\11\0\1\1\11\0\1\1\4\0\2\1\15\0"+
    "\1\1\17\0\1\1\13\0\1\1\3\0\1\1\10\0"+
    "\1\1\1\0\1\1\4\0\1\1\1\0\1\1\4\0"+
    "\2\1\3\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[531];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  ClienteFrame clienteFrame;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  public void iniciarFrame(ClienteFrame clienteFrame){
        this.clienteFrame=clienteFrame;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3052) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { clienteFrame.mostrarError("lexico",yyline+1,yycolumn+1,yytext());clienteFrame.setSeDebeEnviarElTexto(false);
            } 
            // fall through
          case 60: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 61: break;
          case 3: 
            { return symbol(DIAGONAL_RECTA,yytext());
            } 
            // fall through
          case 62: break;
          case 4: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 63: break;
          case 5: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 64: break;
          case 6: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 65: break;
          case 7: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 66: break;
          case 8: 
            { System.out.println("ETIQUETA_MENU:"+yytext());return symbol(ETIQUETA_MENU,yytext());
            } 
            // fall through
          case 67: break;
          case 9: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION_ETIQUETA,yytext());
            } 
            // fall through
          case 68: break;
          case 10: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION,yytext());
            } 
            // fall through
          case 69: break;
          case 11: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 70: break;
          case 12: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 71: break;
          case 13: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 72: break;
          case 14: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 73: break;
          case 15: 
            { return symbol(ACCION,yytext());
            } 
            // fall through
          case 74: break;
          case 16: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 75: break;
          case 17: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 76: break;
          case 18: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 77: break;
          case 19: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 78: break;
          case 20: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 79: break;
          case 21: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 80: break;
          case 22: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 81: break;
          case 23: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 82: break;
          case 24: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 83: break;
          case 25: 
            { System.out.println("Codigo color:"+yytext());return symbol(CODIGO_COLOR,yytext());
            } 
            // fall through
          case 84: break;
          case 26: 
            { return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 85: break;
          case 27: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 86: break;
          case 28: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 87: break;
          case 29: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 88: break;
          case 30: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 89: break;
          case 31: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 90: break;
          case 32: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 91: break;
          case 33: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 92: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 93: break;
          case 35: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 94: break;
          case 36: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 95: break;
          case 37: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 96: break;
          case 38: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 97: break;
          case 39: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 98: break;
          case 40: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 99: break;
          case 41: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 100: break;
          case 42: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 101: break;
          case 43: 
            { return symbol(ETIQUETAS_TEXTO_MENU,yytext());
            } 
            // fall through
          case 102: break;
          case 44: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 103: break;
          case 45: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 104: break;
          case 46: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 105: break;
          case 47: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 106: break;
          case 48: 
            { return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 107: break;
          case 49: 
            { return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 108: break;
          case 50: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 109: break;
          case 51: 
            { return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 110: break;
          case 52: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 111: break;
          case 53: 
            { return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 112: break;
          case 54: 
            { return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 113: break;
          case 55: 
            { return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 114: break;
          case 56: 
            { return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 115: break;
          case 57: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 116: break;
          case 58: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 117: break;
          case 59: 
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
