/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;
import frontend.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\75\1\76\1\1\16\11\4\0\1\3\1\0"+
    "\1\37\1\73\1\12\10\0\1\6\1\104\1\33\1\4\1\7\10\5"+
    "\1\101\1\0\1\34\1\36\1\35\1\0\1\0\1\54\1\52\1\56"+
    "\1\53\1\42\1\57\1\63\1\60\1\47\1\72\1\103\1\64\1\61"+
    "\1\40\1\44\1\62\1\71\1\55\1\46\1\50\1\41\1\43\1\51"+
    "\1\67\1\103\1\70\1\65\1\0\1\66\1\0\1\45\1\0\1\13"+
    "\1\26\1\14\1\74\1\20\1\74\1\103\1\100\1\15\2\103\1\32"+
    "\1\24\1\17\1\16\1\22\1\30\1\23\1\21\1\25\1\27\1\31"+
    "\4\103\1\0\1\10\2\0\6\11\1\77\32\11\2\0\4\11\4\0"+
    "\1\103\2\0\1\11\7\0\1\103\4\0\1\103\5\0\27\103\1\0"+
    "\37\103\1\0\u01ca\103\4\0\14\103\16\0\5\103\7\0\1\103\1\0"+
    "\1\103\21\0\165\103\1\0\2\103\2\0\4\103\1\0\1\103\6\0"+
    "\1\103\1\0\3\103\1\0\1\103\1\0\24\103\1\0\123\103\1\0"+
    "\213\103\1\0\5\103\2\102\246\103\1\0\46\103\2\0\1\103\7\0"+
    "\47\103\7\0\1\11\1\0\55\103\1\0\1\103\1\0\2\103\1\0"+
    "\2\103\1\0\1\103\10\0\33\103\5\0\3\103\15\0\6\11\5\0"+
    "\1\11\4\0\13\103\1\0\1\11\3\0\112\103\4\0\146\103\1\0"+
    "\10\103\1\11\1\0\12\103\1\0\23\103\2\0\1\103\17\0\1\11"+
    "\73\103\2\0\145\103\16\0\66\103\4\0\1\103\5\0\56\103\22\0"+
    "\34\103\104\0\25\103\1\0\10\102\26\0\16\102\1\0\201\103\2\0"+
    "\12\103\1\0\23\103\1\0\10\103\2\0\2\103\2\0\26\103\1\0"+
    "\7\103\1\0\1\103\3\0\4\103\2\0\11\103\2\0\2\103\2\0"+
    "\4\103\10\0\1\103\4\0\2\103\1\0\5\103\2\0\14\103\2\11"+
    "\7\0\1\11\5\0\3\103\1\0\6\103\4\0\2\103\2\0\26\103"+
    "\1\0\7\103\1\0\2\103\1\0\2\103\1\0\2\103\2\0\1\103"+
    "\1\0\5\103\4\0\2\103\2\0\3\103\3\0\1\103\7\0\4\103"+
    "\1\0\1\103\7\0\20\103\13\0\3\103\1\0\11\103\1\0\3\103"+
    "\1\0\26\103\1\0\7\103\1\0\2\103\1\0\5\103\2\0\12\103"+
    "\1\0\3\103\1\0\3\103\2\0\1\103\17\0\4\103\2\0\12\103"+
    "\1\0\1\11\7\0\1\103\7\0\3\103\1\0\10\103\2\0\2\103"+
    "\2\0\26\103\1\0\7\103\1\0\2\103\1\0\5\103\2\0\11\103"+
    "\2\0\2\103\2\0\3\103\10\0\2\103\4\0\2\103\1\0\5\103"+
    "\2\0\12\103\1\0\1\103\20\0\2\103\1\0\6\103\3\0\3\103"+
    "\1\0\4\103\3\0\2\103\1\0\1\103\1\0\2\103\3\0\2\103"+
    "\3\0\3\103\3\0\14\103\4\0\5\103\3\0\3\103\1\0\4\103"+
    "\2\0\1\103\6\0\1\103\16\0\12\103\11\0\1\11\6\0\4\103"+
    "\1\0\10\103\1\0\3\103\1\0\27\103\1\0\20\103\3\0\10\103"+
    "\1\0\3\103\1\0\4\103\7\0\2\103\1\0\3\103\5\0\4\103"+
    "\2\0\12\103\20\0\1\102\3\103\1\0\10\103\1\0\3\103\1\0"+
    "\27\103\1\0\12\103\1\0\5\103\2\0\11\103\1\0\3\103\1\0"+
    "\4\103\7\0\2\103\7\0\1\103\1\0\4\103\2\0\12\103\1\0"+
    "\2\103\16\0\3\103\1\0\10\103\1\0\3\103\1\0\51\103\2\0"+
    "\10\103\1\0\3\103\1\0\5\103\5\0\3\102\1\103\7\0\5\103"+
    "\2\0\12\103\12\0\6\103\2\0\2\103\1\0\22\103\3\0\30\103"+
    "\1\0\11\103\1\0\1\103\2\0\7\103\3\0\1\103\4\0\6\103"+
    "\1\0\1\103\1\0\10\103\6\0\12\103\2\0\2\103\15\0\72\103"+
    "\4\0\1\11\17\103\1\0\12\103\47\0\2\103\1\0\1\103\2\0"+
    "\2\103\1\0\1\103\2\0\1\103\6\0\4\103\1\0\7\103\1\0"+
    "\3\103\1\0\1\103\1\0\1\103\2\0\2\103\1\0\15\103\1\0"+
    "\3\103\2\0\5\103\1\0\1\103\1\0\6\103\2\0\12\103\2\0"+
    "\4\103\40\0\1\103\27\0\2\103\6\0\12\103\13\0\1\103\1\0"+
    "\1\103\1\0\1\103\4\0\12\103\1\0\44\103\4\0\24\103\1\0"+
    "\22\103\1\0\44\103\11\0\1\103\71\0\112\103\6\0\116\103\2\0"+
    "\46\103\1\0\1\103\5\0\1\103\2\0\53\103\1\0\u014d\103\1\0"+
    "\4\103\2\0\7\103\1\0\1\103\1\0\4\103\2\0\51\103\1\0"+
    "\4\103\2\0\41\103\1\0\4\103\2\0\7\103\1\0\1\103\1\0"+
    "\4\103\2\0\17\103\1\0\71\103\1\0\4\103\2\0\103\103\2\0"+
    "\3\103\40\0\20\103\20\0\126\103\2\0\6\103\3\0\u026c\103\2\0"+
    "\21\103\1\0\32\103\5\0\113\103\3\0\13\103\7\0\15\103\1\0"+
    "\7\103\13\0\25\103\13\0\24\103\14\0\15\103\1\0\3\103\1\0"+
    "\2\103\14\0\124\103\3\0\1\103\3\0\1\11\2\103\2\0\12\103"+
    "\41\0\3\103\1\11\1\0\12\103\6\0\130\103\10\0\53\103\5\0"+
    "\106\103\12\0\37\103\1\0\14\103\4\0\14\103\12\0\50\103\2\0"+
    "\5\103\13\0\54\103\4\0\32\103\6\0\12\103\46\0\34\103\4\0"+
    "\77\103\1\0\35\103\2\0\13\103\6\0\12\103\15\0\1\103\10\0"+
    "\16\103\1\102\101\0\114\103\4\0\12\103\21\0\11\103\14\0\164\103"+
    "\14\0\70\103\10\0\12\103\3\0\61\103\2\0\11\102\107\0\3\103"+
    "\1\0\43\103\1\0\2\103\6\0\366\103\5\0\1\102\u011a\103\2\0"+
    "\6\103\2\0\46\103\2\0\6\103\2\0\10\103\1\0\1\103\1\0"+
    "\1\103\1\0\1\103\1\0\37\103\2\0\65\103\1\0\7\103\1\0"+
    "\1\103\3\0\3\103\1\0\7\103\3\0\4\103\2\0\6\103\4\0"+
    "\15\103\5\0\3\103\1\0\7\103\16\0\5\11\30\0\1\75\1\75"+
    "\5\11\20\0\2\103\23\0\1\103\13\0\5\11\1\0\12\11\1\0"+
    "\1\103\15\0\1\103\20\0\15\103\3\0\37\11\21\0\15\103\4\102"+
    "\1\103\3\102\14\103\21\0\1\103\4\0\1\103\2\0\12\103\1\0"+
    "\1\103\3\0\5\103\6\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\4\103\1\0\13\103\2\0\4\103\5\0\5\103\4\0\1\103\21\0"+
    "\51\103\u032d\0\64\102\u0716\0\57\103\1\0\57\103\1\0\205\103\6\0"+
    "\11\103\14\0\46\103\1\0\1\103\5\0\1\103\2\0\70\103\7\0"+
    "\1\103\17\0\30\103\11\0\7\103\1\0\7\103\1\0\7\103\1\0"+
    "\7\103\1\0\7\103\1\0\7\103\1\0\7\103\1\0\7\103\1\0"+
    "\40\103\57\0\1\103\u01d5\0\3\103\31\0\17\103\1\0\5\103\2\0"+
    "\5\103\4\0\126\103\2\0\2\103\2\0\3\103\1\0\132\103\1\0"+
    "\4\103\5\0\51\103\3\0\136\103\21\0\33\103\65\0\20\103\u0200\0"+
    "\u19b6\103\112\0\u51d6\103\52\0\u048d\103\103\0\56\103\2\0\u010d\103\3\0"+
    "\34\103\24\0\60\103\3\102\1\0\12\103\1\0\163\103\45\0\11\103"+
    "\2\0\147\103\2\0\43\103\1\102\1\0\10\103\77\0\61\103\20\0"+
    "\1\11\7\0\64\103\14\0\105\103\1\102\12\0\12\103\6\0\30\103"+
    "\3\0\1\103\1\0\1\103\2\0\56\103\2\0\44\103\14\0\35\103"+
    "\3\0\101\103\16\0\13\103\6\0\37\103\1\0\67\103\11\0\16\103"+
    "\2\0\12\103\6\0\27\103\3\0\111\103\30\0\3\103\2\0\20\103"+
    "\2\0\5\103\12\0\6\103\2\0\6\103\2\0\6\103\11\0\7\103"+
    "\1\0\7\103\1\0\53\103\1\0\12\103\12\0\173\103\1\0\2\103"+
    "\2\0\12\103\6\0\u2ba4\103\14\0\27\103\4\0\61\103\u2104\0\u016e\103"+
    "\2\0\152\103\46\0\7\103\14\0\5\103\5\0\14\103\1\0\15\103"+
    "\1\0\5\103\1\0\1\103\1\0\2\103\1\0\2\103\1\0\154\103"+
    "\41\0\u016b\103\22\0\100\103\2\0\66\103\50\0\14\103\1\11\3\0"+
    "\20\103\20\0\20\103\3\0\2\103\30\0\3\103\31\0\1\11\6\0"+
    "\5\103\1\0\207\103\2\0\1\11\4\0\1\11\13\0\12\103\7\0"+
    "\32\103\4\0\1\103\1\0\32\103\13\0\131\103\3\0\6\103\2\0"+
    "\6\103\2\0\6\103\2\0\3\103\3\0\2\11\3\0\2\11\22\0"+
    "\3\11\4\0\14\103\1\0\32\103\1\0\23\103\1\0\2\103\1\0"+
    "\17\103\2\0\16\103\42\0\173\103\105\0\65\103\210\0\1\103\202\0"+
    "\35\103\3\0\61\103\17\0\1\103\37\0\40\103\20\0\33\103\5\0"+
    "\53\103\5\0\36\103\2\0\44\103\4\0\10\103\1\0\5\103\52\0"+
    "\236\103\2\0\12\103\6\0\44\102\4\0\44\102\4\0\50\103\10\0"+
    "\64\103\234\0\u0137\103\11\0\26\103\12\0\10\103\230\0\6\103\2\0"+
    "\1\103\1\0\54\103\1\0\2\103\3\0\1\103\2\0\27\103\12\0"+
    "\27\103\11\0\37\103\101\0\23\103\1\0\2\103\12\0\26\103\12\0"+
    "\32\103\106\0\70\103\6\0\2\103\100\0\4\103\1\0\2\103\5\0"+
    "\10\103\1\0\3\103\1\0\33\103\4\0\3\103\4\0\1\103\40\0"+
    "\35\103\3\0\35\103\43\0\10\103\1\0\36\103\31\0\66\103\12\0"+
    "\26\103\12\0\23\103\15\0\22\103\156\0\111\103\67\0\63\103\15\0"+
    "\63\103\u030d\0\107\103\37\0\12\103\17\0\74\103\2\0\1\11\22\0"+
    "\31\103\7\0\12\103\6\0\65\103\1\0\12\103\20\0\44\103\2\0"+
    "\1\103\11\0\105\103\5\0\3\103\3\0\13\103\1\0\1\103\43\0"+
    "\22\103\1\0\45\103\6\0\1\102\101\0\7\103\1\0\1\103\1\0"+
    "\4\103\1\0\17\103\1\0\12\103\7\0\73\103\5\0\12\103\6\0"+
    "\4\103\1\0\10\103\2\0\2\103\2\0\26\103\1\0\7\103\1\0"+
    "\2\103\1\0\5\103\2\0\11\103\2\0\2\103\2\0\3\103\2\0"+
    "\1\103\6\0\1\103\5\0\7\103\2\0\7\103\3\0\5\103\213\0"+
    "\113\102\5\0\12\102\46\0\106\103\1\0\1\103\10\0\12\103\246\0"+
    "\66\103\2\0\11\103\27\0\6\103\42\0\101\103\3\0\1\103\13\0"+
    "\12\103\46\0\70\103\10\0\12\103\66\0\32\103\3\0\17\103\4\0"+
    "\12\103\u0166\0\112\103\25\0\1\103\u01c0\0\71\103\u0107\0\11\102\1\0"+
    "\55\102\1\0\11\102\17\0\12\102\30\0\36\102\2\0\26\102\1\0"+
    "\16\102\u0349\0\u039a\103\146\0\157\103\21\0\304\103\u0abc\0\u042f\103\u0fd1\0"+
    "\u0247\103\u21b9\0\u0239\103\7\0\37\103\1\0\12\103\146\0\36\103\2\0"+
    "\5\103\13\0\67\103\11\0\4\103\14\0\12\103\11\0\25\103\5\0"+
    "\23\103\u0370\0\105\103\13\0\57\103\20\0\21\103\100\0\1\102\37\0"+
    "\u17ed\102\23\0\u02f3\102\u250d\0\2\103\u0bfe\0\153\103\5\0\15\103\3\0"+
    "\11\103\7\0\12\103\3\0\2\103\1\0\4\11\u14c1\0\5\103\3\0"+
    "\6\103\10\11\10\103\2\0\7\103\36\0\4\103\224\0\3\103\u01bb\0"+
    "\125\103\1\0\107\103\1\0\2\103\2\0\1\103\2\0\2\103\2\0"+
    "\4\103\1\0\14\103\1\0\1\103\1\0\7\103\1\0\101\103\1\0"+
    "\4\103\2\0\10\103\1\0\7\103\1\0\34\103\1\0\4\103\1\0"+
    "\5\103\1\0\1\103\3\0\7\103\1\0\u0154\103\2\0\31\103\1\0"+
    "\31\103\1\0\37\103\1\0\31\103\1\0\37\103\1\0\31\103\1\0"+
    "\37\103\1\0\31\103\1\0\37\103\1\0\31\103\1\0\10\103\2\0"+
    "\62\103\u0200\0\67\103\4\0\62\103\10\0\1\103\16\0\1\103\26\0"+
    "\5\103\1\0\17\103\u0550\0\7\102\1\0\21\102\2\0\7\102\1\0"+
    "\2\102\1\0\5\102\u07d5\0\305\103\13\0\7\103\51\0\113\102\5\0"+
    "\12\102\u04a6\0\4\103\1\0\33\103\1\0\2\103\1\0\1\103\2\0"+
    "\1\103\1\0\12\103\1\0\4\103\1\0\1\103\1\0\1\103\6\0"+
    "\1\103\4\0\1\103\1\0\1\103\1\0\1\103\1\0\3\103\1\0"+
    "\2\103\1\0\1\103\2\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\1\103\1\0\1\103\1\0\2\103\1\0\1\103\2\0\4\103\1\0"+
    "\7\103\1\0\4\103\1\0\4\103\1\0\1\103\1\0\12\103\1\0"+
    "\21\103\5\0\3\103\1\0\5\103\1\0\21\103\u0274\0\32\102\6\0"+
    "\32\102\6\0\32\102\u0e76\0\ua6d7\103\51\0\u1035\103\13\0\336\103\2\0"+
    "\u1682\103\u295e\0\u021e\103\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\103\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\6\1\1\3\1\4\1\5\1\6"+
    "\1\7\16\1\17\0\1\10\26\0\1\11\40\0\1\12"+
    "\30\0\1\13\22\0\1\14\13\0\1\15\1\0\1\15"+
    "\4\0\1\15\2\0\1\15\5\0\1\16\1\17\2\0"+
    "\1\20\3\0\1\21\1\22\2\0\1\23\16\0\2\24"+
    "\1\25\1\0\1\25\2\0\1\24\5\0\1\26\1\27"+
    "\3\0\1\30\2\0\1\31\10\0\1\32\30\0\1\33"+
    "\11\0\1\34\1\35\1\36\1\34\1\0\1\36\1\35"+
    "\1\34\14\0\1\37\7\0\1\40\1\41\1\42\16\0"+
    "\1\43\1\44\1\45\1\0\1\46\1\0\1\47\10\0"+
    "\1\50\6\0\1\51\15\0\1\52\2\0\1\53\12\0"+
    "\1\54\1\55\5\0\1\56\13\0\1\57\3\0\1\60"+
    "\10\0\1\61\1\0\1\62\4\0\1\63\1\0\1\64"+
    "\4\0\1\65\1\66\3\0\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\212\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\212\0\212\0\212\0\212\0\u02b2"+
    "\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da"+
    "\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702"+
    "\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\212\0\u0ac8\0\u0b0d"+
    "\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\212\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\212\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb"+
    "\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\212\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e"+
    "\0\u2463\0\212\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\212\0\u2829\0\u2982\0\u286e"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\212\0\212\0\u2b20"+
    "\0\u2b65\0\212\0\u2baa\0\u2bef\0\u2c34\0\212\0\212\0\u2c79"+
    "\0\u2cbe\0\212\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u3153\0\u3198\0\212\0\u31dd\0\u3222\0\u3267"+
    "\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\212\0\212\0\u3405"+
    "\0\u344a\0\u348f\0\212\0\u34d4\0\u3519\0\212\0\u355e\0\u35a3"+
    "\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\212\0\u3786"+
    "\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae"+
    "\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\212"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1"+
    "\0\u4026\0\u406b\0\u40b0\0\u40f5\0\212\0\u413a\0\u406b\0\u417f"+
    "\0\u40f5\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362"+
    "\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\212\0\u4500\0\u4545"+
    "\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\212\0\212"+
    "\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b"+
    "\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\212\0\212"+
    "\0\212\0\u4aee\0\212\0\u4b33\0\212\0\u4b78\0\u4bbd\0\u4c02"+
    "\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\212\0\u4da0\0\u4de5"+
    "\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d"+
    "\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u5235"+
    "\0\u527a\0\u52bf\0\212\0\u5304\0\u5349\0\212\0\u538e\0\u53d3"+
    "\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb"+
    "\0\212\0\212\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\212"+
    "\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c"+
    "\0\u59c1\0\u5a06\0\u5a4b\0\212\0\u5a90\0\u5ad5\0\u5b1a\0\212"+
    "\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42"+
    "\0\212\0\u5d87\0\212\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\212"+
    "\0\u5ee0\0\212\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\212\0\212"+
    "\0\u6039\0\u607e\0\u60c3\0\212\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\4\3\1\6\2\3\1\7\3\3"+
    "\1\10\1\11\1\3\1\12\6\3\1\13\1\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\11\1\13"+
    "\1\23\1\3\1\24\1\25\1\26\1\3\1\27\1\3"+
    "\1\30\1\3\1\31\1\32\1\3\1\33\1\34\2\3"+
    "\1\35\10\3\1\5\7\3\1\4\2\5\4\3\1\6"+
    "\2\3\1\7\3\3\1\10\1\11\1\3\1\12\6\3"+
    "\1\13\1\3\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\11\1\13\1\23\1\3\1\24\1\25\1\26"+
    "\1\3\1\27\1\3\1\30\1\3\1\31\1\32\1\3"+
    "\1\33\1\34\2\3\1\35\10\3\1\5\1\3\1\36"+
    "\4\3\107\0\1\5\112\0\1\37\2\0\1\40\1\41"+
    "\1\0\1\42\6\0\1\43\16\0\1\42\3\0\1\43"+
    "\3\0\1\40\1\0\1\41\36\0\1\44\3\0\1\41"+
    "\10\0\1\45\22\0\1\45\5\0\1\41\36\0\1\42"+
    "\5\0\1\42\25\0\1\42\50\0\1\46\14\0\1\46"+
    "\22\0\1\46\44\0\1\47\2\0\1\47\40\0\1\47"+
    "\40\0\1\50\2\0\1\50\40\0\1\50\36\0\1\51"+
    "\1\0\1\51\1\0\1\51\32\0\1\51\47\0\1\42"+
    "\5\0\1\42\22\0\1\52\2\0\1\42\106\0\1\53"+
    "\113\0\1\54\76\0\1\55\110\0\1\56\73\0\1\57"+
    "\4\0\1\60\101\0\1\61\50\0\1\44\3\0\1\41"+
    "\10\0\1\45\12\0\1\62\7\0\1\45\5\0\1\41"+
    "\4\0\1\63\1\64\64\0\1\65\17\0\1\66\62\0"+
    "\1\67\106\0\1\70\50\0\1\47\2\0\1\47\40\0"+
    "\1\71\30\0\4\72\1\73\1\74\1\75\1\74\1\75"+
    "\1\72\1\75\30\72\1\76\1\72\1\75\1\72\1\77"+
    "\1\100\2\72\1\101\2\72\1\102\2\72\1\103\1\104"+
    "\3\72\1\105\3\72\1\106\1\107\11\72\25\0\1\110"+
    "\67\0\1\111\3\0\1\112\1\113\5\0\1\114\1\115"+
    "\5\0\1\116\14\0\1\113\5\0\1\114\1\112\2\0"+
    "\1\115\2\0\1\116\30\0\1\117\12\0\1\120\6\0"+
    "\1\116\22\0\1\120\6\0\1\116\30\0\1\112\3\0"+
    "\1\112\41\0\1\112\36\0\1\115\13\0\1\115\34\0"+
    "\1\115\33\0\1\121\4\0\1\113\5\0\1\122\23\0"+
    "\1\113\5\0\1\122\37\0\1\123\3\0\1\112\6\0"+
    "\1\122\31\0\1\122\1\112\36\0\1\122\12\0\1\122"+
    "\31\0\1\122\37\0\1\113\4\0\1\113\31\0\1\113"+
    "\45\0\1\120\12\0\1\120\31\0\1\120\37\0\1\116"+
    "\21\0\1\116\31\0\1\116\24\0\2\124\1\51\1\124"+
    "\1\51\22\124\5\0\25\124\2\0\4\124\1\0\1\124"+
    "\2\0\2\124\2\0\1\124\43\0\1\125\103\0\1\126"+
    "\112\0\1\127\105\0\1\130\123\0\1\131\65\0\1\132"+
    "\111\0\1\133\105\0\1\134\103\0\1\135\76\0\1\136"+
    "\1\137\120\0\1\140\74\0\1\141\106\0\1\142\101\0"+
    "\1\143\41\0\1\120\12\0\1\120\27\0\1\144\1\0"+
    "\1\120\5\0\1\145\21\0\66\72\1\105\104\72\1\146"+
    "\22\72\2\147\1\72\1\147\56\72\1\146\22\72\2\150"+
    "\1\75\1\150\1\75\22\150\5\72\25\150\1\72\1\105"+
    "\4\150\1\72\1\150\2\72\2\150\2\72\1\150\50\72"+
    "\1\151\16\72\1\105\77\72\1\152\4\72\1\105\1\72"+
    "\1\153\63\72\1\154\16\72\1\105\60\72\1\155\23\72"+
    "\1\105\60\72\1\156\23\72\1\105\60\72\1\157\23\72"+
    "\1\105\72\72\1\160\11\72\1\105\57\72\1\161\24\72"+
    "\1\105\22\72\2\162\1\72\1\162\3\72\2\162\3\72"+
    "\1\162\5\72\1\162\13\72\1\162\7\72\3\162\1\72"+
    "\2\162\6\72\1\105\5\72\1\162\10\72\25\0\1\163"+
    "\67\0\1\164\2\0\1\165\1\0\1\166\1\167\7\0"+
    "\1\170\1\0\1\171\13\0\1\167\2\0\1\166\2\0"+
    "\1\170\1\0\1\165\14\0\1\171\23\0\1\172\4\0"+
    "\1\172\31\0\1\172\45\0\1\171\17\0\1\171\40\0"+
    "\1\171\23\0\1\173\2\0\1\165\1\0\1\174\31\0"+
    "\1\174\4\0\1\165\40\0\1\170\15\0\1\170\23\0"+
    "\1\170\42\0\1\167\5\0\1\167\25\0\1\167\50\0"+
    "\1\175\2\0\1\165\2\0\1\167\25\0\1\167\7\0"+
    "\1\165\40\0\1\165\2\0\1\165\40\0\1\165\40\0"+
    "\1\176\4\0\1\174\12\0\1\171\16\0\1\174\21\0"+
    "\1\171\23\0\1\174\4\0\1\174\31\0\1\174\45\0"+
    "\1\166\4\0\1\166\31\0\1\166\41\0\2\124\1\51"+
    "\1\124\1\51\22\124\4\0\1\177\25\124\2\0\4\124"+
    "\1\0\1\124\2\0\2\124\2\0\1\124\44\0\1\200"+
    "\115\0\1\201\113\0\1\202\70\0\1\203\105\0\1\204"+
    "\75\0\1\205\120\0\1\206\107\0\1\207\66\0\1\210"+
    "\102\0\1\211\105\0\1\212\107\0\1\213\106\0\1\214"+
    "\116\0\1\215\73\0\1\216\112\0\1\217\76\0\1\220"+
    "\35\0\4\72\2\221\1\72\1\221\56\72\1\146\22\72"+
    "\2\150\1\75\1\150\1\75\22\150\5\72\25\150\1\72"+
    "\1\222\4\150\1\72\1\150\2\72\2\150\2\72\1\150"+
    "\54\72\1\223\12\72\1\105\72\72\1\224\11\72\1\105"+
    "\104\72\1\105\2\72\1\225\63\72\1\226\15\72\1\105"+
    "\73\72\1\227\10\72\1\105\56\72\1\230\25\72\1\105"+
    "\56\72\1\231\25\72\1\105\73\72\1\232\10\72\1\105"+
    "\64\72\1\233\17\72\1\105\22\72\2\234\1\72\1\234"+
    "\3\72\2\234\3\72\1\234\5\72\1\234\13\72\1\234"+
    "\7\72\3\234\1\72\2\234\6\72\1\105\5\72\1\234"+
    "\10\72\22\0\1\235\72\0\1\236\5\0\1\237\4\0"+
    "\1\240\1\241\1\0\1\242\1\243\11\0\1\243\2\0"+
    "\1\237\5\0\1\242\2\0\1\240\3\0\1\241\33\0"+
    "\1\241\13\0\1\241\34\0\1\241\33\0\1\244\5\0"+
    "\1\237\7\0\1\242\15\0\1\237\5\0\1\242\42\0"+
    "\1\245\12\0\1\245\31\0\1\245\37\0\1\246\12\0"+
    "\1\246\31\0\1\246\37\0\1\243\16\0\1\243\11\0"+
    "\1\243\53\0\1\237\5\0\1\237\25\0\1\237\50\0"+
    "\1\247\13\0\1\241\1\0\1\242\23\0\1\242\6\0"+
    "\1\241\33\0\1\242\15\0\1\242\23\0\1\242\42\0"+
    "\1\250\12\0\1\245\1\241\30\0\1\245\3\0\1\241"+
    "\33\0\1\251\15\0\1\242\1\243\11\0\1\243\10\0"+
    "\1\242\76\0\1\252\7\0\1\253\105\0\1\254\71\0"+
    "\1\255\106\0\1\256\104\0\1\257\124\0\1\260\74\0"+
    "\1\261\74\0\1\262\123\0\1\263\63\0\1\264\117\0"+
    "\1\265\104\0\1\266\71\0\1\267\116\0\1\270\107\0"+
    "\1\271\67\0\1\272\102\0\1\273\44\0\4\72\2\274"+
    "\1\72\1\274\56\72\1\146\60\72\1\275\23\72\1\105"+
    "\101\72\1\276\2\72\1\105\57\72\1\277\24\72\1\105"+
    "\57\72\1\300\24\72\1\105\60\72\1\301\23\72\1\105"+
    "\66\72\1\302\15\72\1\105\57\72\1\303\24\72\1\105"+
    "\73\72\1\304\10\72\1\105\66\72\1\305\15\72\1\105"+
    "\22\72\2\306\1\72\1\306\3\72\2\306\3\72\1\306"+
    "\5\72\1\306\13\72\1\306\7\72\3\306\1\72\2\306"+
    "\6\72\1\105\5\72\1\306\10\72\21\0\1\307\57\0"+
    "\1\310\13\0\1\311\6\0\1\312\1\313\6\0\1\314"+
    "\10\0\1\312\1\314\1\313\52\0\1\312\6\0\1\312"+
    "\20\0\1\312\54\0\1\315\7\0\1\315\21\0\1\315"+
    "\52\0\1\316\7\0\1\316\21\0\1\316\52\0\1\314"+
    "\16\0\1\314\11\0\1\314\53\0\1\317\7\0\1\317"+
    "\21\0\1\317\52\0\1\320\6\0\1\312\7\0\1\314"+
    "\10\0\1\312\1\314\53\0\1\321\7\0\1\316\6\0"+
    "\1\314\11\0\1\314\1\316\52\0\1\322\7\0\1\317"+
    "\6\0\1\314\11\0\1\314\1\317\107\0\1\323\104\0"+
    "\1\324\106\0\1\325\75\0\1\326\110\0\1\327\115\0"+
    "\1\330\103\0\1\331\104\0\1\332\104\0\1\333\75\0"+
    "\1\334\106\0\1\335\111\0\1\336\30\0\4\72\2\337"+
    "\1\340\1\337\56\72\1\146\62\72\1\341\21\72\1\105"+
    "\60\72\1\342\23\72\1\105\65\72\1\343\16\72\1\105"+
    "\102\72\1\344\1\72\1\105\74\72\1\345\7\72\1\105"+
    "\73\72\1\346\10\72\1\105\104\72\1\347\72\72\1\350"+
    "\11\72\1\105\65\72\1\351\16\72\1\105\22\72\2\352"+
    "\1\72\1\352\3\72\2\352\3\72\1\352\5\72\1\352"+
    "\13\72\1\352\7\72\3\352\1\72\2\352\6\72\1\105"+
    "\5\72\1\352\10\72\101\0\1\310\36\0\1\353\61\0"+
    "\1\354\7\0\1\355\4\0\1\356\14\0\1\355\5\0"+
    "\1\356\44\0\1\355\7\0\1\355\21\0\1\355\52\0"+
    "\1\357\14\0\1\357\22\0\1\357\44\0\1\360\14\0"+
    "\1\360\22\0\1\360\44\0\1\361\14\0\1\361\22\0"+
    "\1\361\44\0\1\362\14\0\1\362\22\0\1\362\44\0"+
    "\1\363\7\0\1\355\4\0\1\360\14\0\1\355\5\0"+
    "\1\360\44\0\1\364\14\0\1\364\22\0\1\364\44\0"+
    "\1\365\14\0\1\365\22\0\1\365\102\0\1\366\120\0"+
    "\1\367\66\0\1\370\105\0\1\371\114\0\1\372\105\0"+
    "\1\373\104\0\1\374\2\0\1\375\101\0\1\376\26\0"+
    "\4\72\2\337\1\72\1\337\56\72\1\146\22\72\1\377"+
    "\2\72\1\377\56\72\1\105\104\72\1\u0100\56\72\1\u0101"+
    "\25\72\1\105\60\72\1\u0102\23\72\1\105\62\72\1\u0103"+
    "\21\72\1\105\76\72\1\u0104\5\72\1\105\72\72\1\u0105"+
    "\11\72\1\105\75\72\1\u0106\6\72\1\105\75\72\1\u0107"+
    "\6\72\1\105\22\72\2\u0108\1\72\1\u0108\3\72\2\u0108"+
    "\3\72\1\u0108\5\72\1\u0108\13\72\1\u0108\7\72\3\u0108"+
    "\1\72\2\u0108\6\72\1\105\5\72\1\u0108\10\72\33\0"+
    "\1\u0109\61\0\1\u010a\2\0\1\u010b\2\0\1\u010c\2\0"+
    "\1\u010d\1\0\1\u010e\20\0\1\u010c\1\0\1\u010d\5\0"+
    "\1\u010b\1\u010e\37\0\1\u010d\10\0\1\u010d\24\0\1\u010d"+
    "\46\0\1\u010f\2\0\1\u010b\2\0\1\u010c\4\0\1\u010e"+
    "\20\0\1\u010c\7\0\1\u010b\1\u010e\37\0\1\u0110\2\0"+
    "\1\u010b\7\0\1\u010e\30\0\1\u010b\1\u010e\37\0\1\u010c"+
    "\5\0\1\u010c\25\0\1\u010c\50\0\1\u010e\12\0\1\u010e"+
    "\31\0\1\u010e\37\0\1\u010b\2\0\1\u010b\40\0\1\u010b"+
    "\40\0\1\u0111\5\0\1\u010c\2\0\1\u010d\22\0\1\u010c"+
    "\1\0\1\u010d\46\0\1\u010f\5\0\1\u010c\4\0\1\u010e"+
    "\20\0\1\u010c\10\0\1\u010e\37\0\1\u010c\2\0\1\u010b"+
    "\2\0\1\u010c\25\0\1\u010c\7\0\1\u010b\77\0\1\u0112"+
    "\111\0\1\u0113\75\0\1\u0114\105\0\1\u0115\7\0\1\u0116"+
    "\3\0\1\u0117\67\0\1\u0118\106\0\1\u0119\112\0\1\u011a"+
    "\73\0\1\u011b\114\0\1\u011c\30\0\5\72\1\u011d\1\72"+
    "\1\u011d\56\72\1\105\104\72\1\u011e\73\72\1\u011f\10\72"+
    "\1\105\104\72\1\327\72\72\1\u0120\11\72\1\105\73\72"+
    "\1\u0121\10\72\1\105\62\72\1\u0122\21\72\1\105\65\72"+
    "\1\u0123\16\72\1\105\22\72\2\u0124\1\72\1\u0124\3\72"+
    "\2\u0124\3\72\1\u0124\5\72\1\u0124\13\72\1\u0124\7\72"+
    "\3\u0124\1\72\2\u0124\6\72\1\105\5\72\1\u0124\10\72"+
    "\4\0\4\u0125\3\0\20\u0125\5\0\25\u0125\2\0\4\u0125"+
    "\1\0\1\u0125\3\0\1\u0125\1\0\2\u0125\11\0\1\u0126"+
    "\5\0\1\u0126\2\0\1\u0127\22\0\1\u0126\1\0\1\u0127"+
    "\46\0\1\u0128\10\0\1\u0128\24\0\1\u0128\46\0\1\u0127"+
    "\10\0\1\u0127\24\0\1\u0127\46\0\1\u0126\5\0\1\u0126"+
    "\25\0\1\u0126\50\0\1\u0126\5\0\1\u0126\2\0\1\u0128"+
    "\22\0\1\u0126\1\0\1\u0128\106\0\1\u0129\117\0\1\u012a"+
    "\77\0\1\u012b\2\0\1\u012c\72\0\1\u012d\101\0\1\u012e"+
    "\114\0\1\u012f\106\0\1\u0130\72\0\1\u0131\102\0\1\u0132"+
    "\115\0\1\u0133\106\0\1\u0134\27\0\6\72\1\u0135\57\72"+
    "\1\105\71\72\1\u0136\12\72\1\105\104\72\1\u0137\104\72"+
    "\1\u0138\104\72\1\u0139\74\72\1\u013a\7\72\1\105\104\72"+
    "\1\u013b\16\72\4\0\4\u0125\3\0\20\u0125\5\0\25\u0125"+
    "\2\0\4\u0125\1\0\1\u0125\3\0\1\u0125\1\0\2\u0125"+
    "\1\u013c\10\0\1\u013d\10\0\1\u013d\24\0\1\u013d\105\0"+
    "\1\u013e\104\0\1\u013f\112\0\1\u0140\73\0\1\u0141\110\0"+
    "\1\u0142\115\0\1\u0143\106\0\1\u0144\65\0\1\u0145\100\0"+
    "\1\u0146\120\0\1\u0147\77\0\1\u0148\102\0\1\u0149\37\0"+
    "\4\72\1\u014a\2\72\1\u014a\56\72\1\105\72\72\1\u014b"+
    "\11\72\1\105\72\72\1\u014c\11\72\1\105\16\72\4\0"+
    "\4\u014d\3\0\20\u014d\5\0\25\u014d\2\0\4\u014d\1\0"+
    "\1\u014d\3\0\1\u014d\1\0\2\u014d\45\0\1\u014e\100\0"+
    "\1\u014f\106\0\1\u0150\115\0\1\u0151\100\0\1\u0152\117\0"+
    "\1\u0153\71\0\1\u0154\116\0\1\u0155\101\0\1\u0156\105\0"+
    "\1\u0157\103\0\1\u0158\3\0\1\u0159\22\0\5\72\1\u015a"+
    "\1\72\1\u015a\56\72\1\105\104\72\1\u015b\73\72\1\u015c"+
    "\10\72\1\105\16\72\1\u014d\2\0\72\u014d\3\0\5\u014d"+
    "\45\0\1\u015d\113\0\1\u015e\104\0\1\u015f\77\0\1\u0160"+
    "\101\0\1\u0161\104\0\1\u0162\100\0\1\u0163\126\0\1\u0164"+
    "\71\0\1\u0165\104\0\1\u0166\101\0\1\u0167\114\0\1\u0168"+
    "\30\0\66\72\1\u0169\104\72\1\u016a\16\72\51\0\1\u016b"+
    "\111\0\1\u016c\105\0\1\u016d\72\0\1\u016e\77\0\1\u016f"+
    "\120\0\1\u0170\74\0\1\u0171\104\0\1\u0172\116\0\1\u0173"+
    "\107\0\1\u0174\106\0\1\u0175\63\0\1\u0176\111\0\1\u0177"+
    "\104\0\1\u0178\106\0\1\u0179\75\0\1\u017a\102\0\1\u017b"+
    "\104\0\1\u017c\120\0\1\u017d\112\0\1\u017e\71\0\1\u017f"+
    "\107\0\1\u0180\76\0\1\u0181\116\0\1\u0182\70\0\1\u0183"+
    "\102\0\1\u0184\106\0\1\u0185\120\0\1\u0186\72\0\1\u0187"+
    "\100\0\1\u0188\104\0\1\u0189\120\0\1\u018a\102\0\1\u018b"+
    "\102\0\1\u018c\74\0\1\u018d\113\0\1\u018e\75\0\1\u018f"+
    "\120\0\1\u0190\106\0\1\u0191\70\0\1\u0192\112\0\1\u0193"+
    "\100\0\1\u0194\102\0\1\u0195\111\0\1\u0196\77\0\1\u0197"+
    "\102\0\1\u0198\104\0\1\u0199\110\0\1\u019a\110\0\1\u019b"+
    "\74\0\1\u019c\106\0\1\u019d\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\6\1\4\11\17\1\17\0"+
    "\1\11\26\0\1\11\40\0\1\11\30\0\1\11\22\0"+
    "\1\11\13\0\1\1\1\0\1\1\4\0\1\11\2\0"+
    "\1\1\5\0\2\11\2\0\1\11\3\0\2\11\2\0"+
    "\1\11\16\0\3\1\1\0\1\11\2\0\1\1\5\0"+
    "\2\11\3\0\1\11\2\0\1\11\10\0\1\11\30\0"+
    "\1\11\11\0\3\1\1\11\1\0\3\1\14\0\1\11"+
    "\7\0\1\1\2\11\16\0\3\11\1\0\1\11\1\0"+
    "\1\11\10\0\1\11\6\0\1\1\15\0\1\11\2\0"+
    "\1\11\12\0\2\11\5\0\1\11\13\0\1\11\3\0"+
    "\1\11\10\0\1\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\11\4\0\2\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  ClienteFrame clienteFrame;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  public void iniciarFrame(ClienteFrame clienteFrame){
        this.clienteFrame=clienteFrame;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3046) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { clienteFrame.mostrarError("lexico",yyline+1,yycolumn+1,yytext());clienteFrame.setSeDebeEnviarElTexto(false);
            } 
            // fall through
          case 57: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 58: break;
          case 3: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 59: break;
          case 4: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 60: break;
          case 5: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 61: break;
          case 6: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 62: break;
          case 7: 
            { return symbol(COMILLA,yytext());
            } 
            // fall through
          case 63: break;
          case 8: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 64: break;
          case 9: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION,yytext());
            } 
            // fall through
          case 65: break;
          case 10: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 66: break;
          case 11: 
            { return symbol(IDENTIFICADOR_COMILLA,yytext());
            } 
            // fall through
          case 67: break;
          case 12: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 68: break;
          case 13: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 69: break;
          case 14: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 70: break;
          case 15: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 71: break;
          case 16: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 72: break;
          case 17: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 73: break;
          case 18: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 74: break;
          case 19: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 75: break;
          case 20: 
            { return symbol(ACCION,yytext());
            } 
            // fall through
          case 76: break;
          case 21: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 77: break;
          case 22: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 78: break;
          case 23: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 79: break;
          case 24: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 80: break;
          case 25: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 81: break;
          case 26: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 82: break;
          case 27: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 83: break;
          case 28: 
            { return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 84: break;
          case 29: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 85: break;
          case 30: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 86: break;
          case 31: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 87: break;
          case 32: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 88: break;
          case 33: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 89: break;
          case 34: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 90: break;
          case 35: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 91: break;
          case 36: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 92: break;
          case 37: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 93: break;
          case 38: 
            { System.out.println("Codigo color:"+yytext());return symbol(CODIGO_COLOR,yytext());
            } 
            // fall through
          case 94: break;
          case 39: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 95: break;
          case 40: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 96: break;
          case 41: 
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 97: break;
          case 42: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 98: break;
          case 43: 
            { return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 99: break;
          case 44: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 100: break;
          case 45: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 101: break;
          case 46: 
            { return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 102: break;
          case 47: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 103: break;
          case 48: 
            { return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 104: break;
          case 49: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 105: break;
          case 50: 
            { return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 106: break;
          case 51: 
            { return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 107: break;
          case 52: 
            { return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 108: break;
          case 53: 
            { return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 109: break;
          case 54: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 110: break;
          case 55: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 111: break;
          case 56: 
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
