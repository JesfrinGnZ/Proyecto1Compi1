/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;
import frontend.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\3\1\1\16\11\4\0\1\3\1\0"+
    "\1\42\1\0\1\12\2\0\1\13\5\0\1\6\1\13\1\34\1\4"+
    "\1\7\10\5\1\75\1\0\1\35\1\41\1\36\1\13\1\0\1\57"+
    "\1\55\1\61\1\56\1\45\1\62\1\66\1\63\1\52\1\73\1\11"+
    "\1\67\1\64\1\43\1\47\1\65\1\72\1\60\1\51\1\53\1\44"+
    "\1\46\1\54\1\70\1\11\1\71\1\37\1\0\1\40\1\0\1\50"+
    "\1\0\1\14\1\27\1\15\1\11\1\21\2\11\1\74\1\16\2\11"+
    "\1\33\1\25\1\20\1\17\1\23\1\31\1\24\1\22\1\26\1\30"+
    "\1\32\4\11\1\0\1\10\2\0\41\11\2\0\4\11\4\0\1\11"+
    "\2\0\1\11\7\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11"+
    "\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11"+
    "\21\0\165\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11"+
    "\1\0\3\11\1\0\1\11\1\0\24\11\1\0\123\11\1\0\213\11"+
    "\1\0\5\11\2\0\246\11\1\0\46\11\2\0\1\11\7\0\47\11"+
    "\7\0\1\11\1\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\1\11\10\0\33\11\5\0\3\11\15\0\6\11\5\0\1\11"+
    "\4\0\13\11\1\0\1\11\3\0\112\11\4\0\146\11\1\0\11\11"+
    "\1\0\12\11\1\0\23\11\2\0\1\11\17\0\74\11\2\0\145\11"+
    "\16\0\66\11\4\0\1\11\5\0\56\11\22\0\34\11\104\0\25\11"+
    "\56\0\201\11\2\0\12\11\1\0\23\11\1\0\10\11\2\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\11\11"+
    "\2\0\2\11\2\0\4\11\10\0\1\11\4\0\2\11\1\0\5\11"+
    "\2\0\16\11\7\0\1\11\5\0\3\11\1\0\6\11\4\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11"+
    "\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11"+
    "\7\0\4\11\1\0\1\11\7\0\20\11\13\0\3\11\1\0\11\11"+
    "\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\12\11\1\0\3\11\1\0\3\11\2\0\1\11\17\0\4\11"+
    "\2\0\12\11\1\0\1\11\7\0\1\11\7\0\3\11\1\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\11\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\11"+
    "\1\0\5\11\2\0\12\11\1\0\1\11\20\0\2\11\1\0\6\11"+
    "\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11"+
    "\3\0\2\11\3\0\3\11\3\0\14\11\4\0\5\11\3\0\3\11"+
    "\1\0\4\11\2\0\1\11\6\0\1\11\16\0\12\11\11\0\1\11"+
    "\6\0\4\11\1\0\10\11\1\0\3\11\1\0\27\11\1\0\20\11"+
    "\3\0\10\11\1\0\3\11\1\0\4\11\7\0\2\11\1\0\3\11"+
    "\5\0\4\11\2\0\12\11\21\0\3\11\1\0\10\11\1\0\3\11"+
    "\1\0\27\11\1\0\12\11\1\0\5\11\2\0\11\11\1\0\3\11"+
    "\1\0\4\11\7\0\2\11\7\0\1\11\1\0\4\11\2\0\12\11"+
    "\1\0\2\11\16\0\3\11\1\0\10\11\1\0\3\11\1\0\51\11"+
    "\2\0\10\11\1\0\3\11\1\0\5\11\10\0\1\11\7\0\5\11"+
    "\2\0\12\11\12\0\6\11\2\0\2\11\1\0\22\11\3\0\30\11"+
    "\1\0\11\11\1\0\1\11\2\0\7\11\3\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\0\10\11\6\0\12\11\2\0\2\11\15\0\72\11"+
    "\4\0\20\11\1\0\12\11\47\0\2\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\1\0\15\11\1\0\3\11"+
    "\2\0\5\11\1\0\1\11\1\0\6\11\2\0\12\11\2\0\4\11"+
    "\40\0\1\11\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\12\11\1\0\44\11\4\0\24\11\1\0\22\11"+
    "\1\0\44\11\11\0\1\11\71\0\112\11\6\0\116\11\2\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11"+
    "\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\11"+
    "\40\0\20\11\20\0\126\11\2\0\6\11\3\0\u026c\11\2\0\21\11"+
    "\1\0\32\11\5\0\113\11\3\0\13\11\7\0\15\11\1\0\7\11"+
    "\13\0\25\11\13\0\24\11\14\0\15\11\1\0\3\11\1\0\2\11"+
    "\14\0\124\11\3\0\1\11\3\0\3\11\2\0\12\11\41\0\4\11"+
    "\1\0\12\11\6\0\130\11\10\0\53\11\5\0\106\11\12\0\37\11"+
    "\1\0\14\11\4\0\14\11\12\0\50\11\2\0\5\11\13\0\54\11"+
    "\4\0\32\11\6\0\12\11\46\0\34\11\4\0\77\11\1\0\35\11"+
    "\2\0\13\11\6\0\12\11\15\0\1\11\10\0\16\11\102\0\114\11"+
    "\4\0\12\11\21\0\11\11\14\0\164\11\14\0\70\11\10\0\12\11"+
    "\3\0\61\11\122\0\3\11\1\0\43\11\1\0\2\11\6\0\366\11"+
    "\6\0\u011a\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11"+
    "\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11"+
    "\2\0\6\11\4\0\15\11\5\0\3\11\1\0\7\11\16\0\5\11"+
    "\32\0\5\11\20\0\2\11\23\0\1\11\13\0\5\11\1\0\12\11"+
    "\1\0\1\11\15\0\1\11\20\0\15\11\3\0\37\11\21\0\15\11"+
    "\4\0\1\11\3\0\14\11\21\0\1\11\4\0\1\11\2\0\12\11"+
    "\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11"+
    "\21\0\51\11\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\11\11"+
    "\14\0\46\11\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11"+
    "\17\0\30\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\11"+
    "\57\0\1\11\u01d5\0\3\11\31\0\17\11\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\11\2\0\3\11\1\0\132\11\1\0\4\11"+
    "\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11"+
    "\112\0\u51d6\11\52\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\34\11"+
    "\24\0\60\11\4\0\12\11\1\0\163\11\45\0\11\11\2\0\147\11"+
    "\2\0\43\11\2\0\10\11\77\0\61\11\20\0\1\11\7\0\64\11"+
    "\14\0\105\11\13\0\12\11\6\0\30\11\3\0\1\11\1\0\1\11"+
    "\2\0\56\11\2\0\44\11\14\0\35\11\3\0\101\11\16\0\13\11"+
    "\6\0\37\11\1\0\67\11\11\0\16\11\2\0\12\11\6\0\27\11"+
    "\3\0\111\11\30\0\3\11\2\0\20\11\2\0\5\11\12\0\6\11"+
    "\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\1\0\53\11"+
    "\1\0\12\11\12\0\173\11\1\0\2\11\2\0\12\11\6\0\u2ba4\11"+
    "\14\0\27\11\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11"+
    "\14\0\5\11\5\0\14\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11"+
    "\2\0\66\11\50\0\15\11\3\0\20\11\20\0\20\11\3\0\2\11"+
    "\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\11"+
    "\4\0\1\11\13\0\12\11\7\0\32\11\4\0\1\11\1\0\32\11"+
    "\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\3\0\2\11\3\0\2\11\22\0\3\11\4\0\14\11\1\0\32\11"+
    "\1\0\23\11\1\0\2\11\1\0\17\11\2\0\16\11\42\0\173\11"+
    "\105\0\65\11\210\0\1\11\202\0\35\11\3\0\61\11\17\0\1\11"+
    "\37\0\40\11\20\0\33\11\5\0\53\11\5\0\36\11\2\0\44\11"+
    "\4\0\10\11\1\0\5\11\52\0\236\11\2\0\12\11\126\0\50\11"+
    "\10\0\64\11\234\0\u0137\11\11\0\26\11\12\0\10\11\230\0\6\11"+
    "\2\0\1\11\1\0\54\11\1\0\2\11\3\0\1\11\2\0\27\11"+
    "\12\0\27\11\11\0\37\11\101\0\23\11\1\0\2\11\12\0\26\11"+
    "\12\0\32\11\106\0\70\11\6\0\2\11\100\0\4\11\1\0\2\11"+
    "\5\0\10\11\1\0\3\11\1\0\33\11\4\0\3\11\4\0\1\11"+
    "\40\0\35\11\3\0\35\11\43\0\10\11\1\0\36\11\31\0\66\11"+
    "\12\0\26\11\12\0\23\11\15\0\22\11\156\0\111\11\67\0\63\11"+
    "\15\0\63\11\u030d\0\107\11\37\0\12\11\17\0\74\11\2\0\1\11"+
    "\22\0\31\11\7\0\12\11\6\0\65\11\1\0\12\11\20\0\44\11"+
    "\2\0\1\11\11\0\105\11\5\0\3\11\3\0\13\11\1\0\1\11"+
    "\43\0\22\11\1\0\45\11\110\0\7\11\1\0\1\11\1\0\4\11"+
    "\1\0\17\11\1\0\12\11\7\0\73\11\5\0\12\11\6\0\4\11"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\11\11\2\0\2\11\2\0\3\11\2\0\1\11"+
    "\6\0\1\11\5\0\7\11\2\0\7\11\3\0\5\11\u010b\0\106\11"+
    "\1\0\1\11\10\0\12\11\246\0\66\11\2\0\11\11\27\0\6\11"+
    "\42\0\101\11\3\0\1\11\13\0\12\11\46\0\70\11\10\0\12\11"+
    "\66\0\32\11\3\0\17\11\4\0\12\11\u0166\0\112\11\25\0\1\11"+
    "\u01c0\0\71\11\u0507\0\u039a\11\146\0\157\11\21\0\304\11\u0abc\0\u042f\11"+
    "\u0fd1\0\u0247\11\u21b9\0\u0239\11\7\0\37\11\1\0\12\11\146\0\36\11"+
    "\2\0\5\11\13\0\67\11\11\0\4\11\14\0\12\11\11\0\25\11"+
    "\5\0\23\11\u0370\0\105\11\13\0\57\11\20\0\21\11\u4060\0\2\11"+
    "\u0bfe\0\153\11\5\0\15\11\3\0\11\11\7\0\12\11\3\0\2\11"+
    "\1\0\4\11\u14c1\0\5\11\3\0\26\11\2\0\7\11\36\0\4\11"+
    "\224\0\3\11\u01bb\0\125\11\1\0\107\11\1\0\2\11\2\0\1\11"+
    "\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11"+
    "\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0\34\11"+
    "\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0\u0154\11"+
    "\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11"+
    "\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\10\11\2\0\62\11\u0200\0\67\11\4\0\62\11\10\0\1\11"+
    "\16\0\1\11\26\0\5\11\1\0\17\11\u0d50\0\305\11\13\0\7\11"+
    "\u0529\0\4\11\1\0\33\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11"+
    "\1\0\4\11\1\0\4\11\1\0\1\11\1\0\12\11\1\0\21\11"+
    "\5\0\3\11\1\0\5\11\1\0\21\11\u1144\0\ua6d7\11\51\0\u1035\11"+
    "\13\0\336\11\2\0\u1682\11\u295e\0\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\11\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\6\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\20\4\1\3"+
    "\1\15\1\4\4\15\14\4\1\16\22\4\1\3\1\4"+
    "\5\15\1\4\1\15\3\4\1\15\41\4\1\3\1\4"+
    "\5\15\1\4\1\15\2\4\1\15\40\4\1\17\6\4"+
    "\1\3\1\4\1\20\1\15\1\20\3\15\2\4\1\20"+
    "\1\4\1\15\4\4\1\20\7\4\1\20\3\4\1\21"+
    "\1\4\1\22\2\4\1\23\3\4\1\24\4\4\1\25"+
    "\1\26\2\4\1\27\5\4\2\30\1\31\1\15\1\31"+
    "\1\4\1\15\2\4\1\15\1\30\2\4\2\30\1\4"+
    "\1\31\5\4\1\32\1\33\1\4\1\34\4\4\1\35"+
    "\4\4\1\36\1\4\1\37\2\4\2\15\2\4\1\15"+
    "\1\4\1\15\1\4\1\15\1\4\1\15\2\4\1\15"+
    "\1\4\1\15\12\4\1\40\2\4\1\41\3\4\1\42"+
    "\2\4\1\43\1\44\1\45\1\43\1\15\1\45\1\44"+
    "\1\4\2\43\1\45\1\43\1\44\17\4\1\46\1\47"+
    "\1\50\1\47\1\50\1\46\4\4\1\51\11\4\1\52"+
    "\2\53\10\4\1\54\3\4\1\55\15\4\1\56\17\4"+
    "\1\57\13\4\1\60\3\4\1\61\10\4\1\62\1\4"+
    "\1\63\4\4\1\64\1\4\1\65\4\4\1\66\1\67"+
    "\3\4\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\76\0\272\0\370\0\u0136\0\u0174"+
    "\0\272\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0136\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6"+
    "\0\272\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u0ffc\0\u10b6\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1bda\0\u1b9c\0\u1c18\0\u1c56\0\u1b5e\0\u1b20\0\u1c94"+
    "\0\u1aa4\0\u1cd2\0\u1c56\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\272\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u2606\0\u26c0\0\u0136\0\u25c8"+
    "\0\u25c8\0\u2682\0\u258a\0\u26fe\0\u2644\0\u2606\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\272\0\u28ee\0\u292c"+
    "\0\u296a\0\272\0\u29a8\0\272\0\u29e6\0\u2a24\0\272\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\272\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\272"+
    "\0\272\0\u2c14\0\u2c52\0\272\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u0136\0\u2ebe\0\u2ebe"+
    "\0\u2e80\0\u2efc\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\272\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\272"+
    "\0\272\0\u31e4\0\272\0\u3222\0\u3260\0\u329e\0\u32dc\0\272"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\272\0\u3412\0\76\0\u3450"+
    "\0\u348e\0\u34cc\0\u350a\0\u34cc\0\u3548\0\u3548\0\u3586\0\u3586"+
    "\0\u35c4\0\u35c4\0\u3602\0\u3602\0\u3640\0\u367e\0\u367e\0\u36bc"+
    "\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e"+
    "\0\u38ac\0\u38ea\0\u3928\0\272\0\u3966\0\u39a4\0\272\0\u39e2"+
    "\0\u3a20\0\u3a5e\0\272\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u0136\0\u3bd2\0\u3b18\0\u3c10\0\u3bd2\0\u3b94\0\u3c4e\0\u3c4e"+
    "\0\272\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00"+
    "\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0"+
    "\0\u402e\0\u406c\0\u0136\0\u0136\0\272\0\272\0\u40aa\0\u40e8"+
    "\0\u4126\0\u4164\0\u41a2\0\272\0\u41e0\0\u421e\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\272\0\u0136\0\272"+
    "\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0"+
    "\0\272\0\u45fe\0\u463c\0\u467a\0\272\0\u46b8\0\u46f6\0\u4734"+
    "\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924"+
    "\0\u4962\0\u49a0\0\272\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6"+
    "\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6"+
    "\0\u4d04\0\u4d42\0\272\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78"+
    "\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\272\0\u502a"+
    "\0\u5068\0\u50a6\0\272\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc"+
    "\0\u521a\0\u5258\0\u5296\0\272\0\u52d4\0\272\0\u5312\0\u5350"+
    "\0\u538e\0\u53cc\0\272\0\u540a\0\272\0\u5448\0\u5486\0\u54c4"+
    "\0\u5502\0\272\0\272\0\u5540\0\u557e\0\u55bc\0\272\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\11\1\7\1\11\1\12\3\11\1\13\1\14\1\11"+
    "\1\15\6\11\1\16\1\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\14\1\30\1\31"+
    "\1\7\1\32\1\33\1\34\1\11\1\35\1\36\1\37"+
    "\1\11\1\40\1\41\1\11\1\42\1\43\5\11\1\44"+
    "\1\45\1\2\100\0\1\4\77\0\30\11\7\0\32\11"+
    "\5\0\2\46\1\11\1\46\24\11\7\0\32\11\5\0"+
    "\2\47\1\7\1\47\1\7\2\47\1\11\20\47\7\0"+
    "\32\47\5\0\2\47\1\7\1\47\1\50\2\47\1\11"+
    "\1\51\1\52\1\47\1\53\6\47\1\54\5\47\7\0"+
    "\4\47\1\53\3\47\1\54\3\47\1\51\1\47\1\52"+
    "\13\47\5\0\4\11\1\55\4\11\1\56\10\11\1\57"+
    "\5\11\7\0\10\11\1\57\5\11\1\56\13\11\5\0"+
    "\4\11\1\60\6\11\1\60\14\11\7\0\4\11\1\60"+
    "\25\11\5\0\4\11\1\61\15\11\1\61\5\11\7\0"+
    "\10\11\1\61\21\11\5\0\4\11\1\62\3\11\1\62"+
    "\17\11\7\0\14\11\1\62\15\11\5\0\4\11\1\63"+
    "\3\11\1\63\17\11\7\0\14\11\1\63\15\11\5\0"+
    "\4\11\1\60\6\11\1\60\14\11\7\0\1\11\1\64"+
    "\2\11\1\60\25\11\5\0\30\11\7\0\6\11\1\65"+
    "\23\11\5\0\4\11\1\63\3\11\1\63\17\11\7\0"+
    "\7\11\1\66\4\11\1\63\15\11\5\0\30\11\7\0"+
    "\15\11\1\67\14\11\5\0\30\11\7\0\7\11\1\70"+
    "\22\11\5\0\30\11\7\0\13\11\1\71\5\11\1\72"+
    "\4\11\1\73\3\11\5\0\30\11\7\0\2\11\1\74"+
    "\4\11\1\75\22\11\5\0\30\11\7\0\4\11\1\76"+
    "\25\11\5\0\30\11\7\0\2\11\1\77\27\11\5\0"+
    "\4\11\1\55\4\11\1\56\10\11\1\57\5\11\7\0"+
    "\1\100\7\11\1\57\5\11\1\56\4\11\1\101\1\102"+
    "\5\11\5\0\30\11\7\0\2\11\1\103\1\11\1\104"+
    "\17\11\1\105\5\11\5\0\30\11\7\0\2\11\1\106"+
    "\27\11\5\0\30\11\7\0\2\11\1\107\1\11\1\110"+
    "\25\11\5\0\4\11\1\62\3\11\1\62\17\11\7\0"+
    "\14\11\1\111\15\11\5\0\30\11\7\0\1\11\1\112"+
    "\30\11\5\0\22\11\1\113\5\11\7\0\32\11\5\0"+
    "\2\114\1\11\1\114\24\11\7\0\32\11\5\0\2\47"+
    "\1\7\1\47\1\115\2\47\1\11\1\47\1\116\1\117"+
    "\5\47\1\120\1\121\5\47\1\122\7\0\7\47\1\117"+
    "\5\47\1\120\1\116\2\47\1\121\2\47\1\122\5\47"+
    "\5\0\2\47\1\7\1\47\1\123\2\47\1\11\10\47"+
    "\1\124\6\47\1\122\7\0\15\47\1\124\6\47\1\122"+
    "\5\47\5\0\2\47\1\7\1\47\1\125\2\47\1\11"+
    "\1\47\1\116\16\47\7\0\16\47\1\116\13\47\5\0"+
    "\2\47\1\7\1\47\1\126\2\47\1\11\11\47\1\121"+
    "\6\47\7\0\21\47\1\121\10\47\5\0\2\47\1\7"+
    "\1\47\1\127\2\47\1\11\2\47\1\117\5\47\1\130"+
    "\7\47\7\0\7\47\1\117\5\47\1\130\14\47\5\0"+
    "\4\11\1\131\4\11\1\132\6\11\1\133\7\11\7\0"+
    "\15\11\1\133\1\132\13\11\5\0\4\11\1\132\4\11"+
    "\1\132\16\11\7\0\16\11\1\132\13\11\5\0\4\11"+
    "\1\133\13\11\1\133\7\11\7\0\15\11\1\133\14\11"+
    "\5\0\4\11\1\134\14\11\1\134\6\11\7\0\21\11"+
    "\1\134\10\11\5\0\4\11\1\135\5\11\1\135\15\11"+
    "\7\0\7\11\1\135\22\11\5\0\4\11\1\136\13\11"+
    "\1\136\7\11\7\0\15\11\1\136\14\11\5\0\4\11"+
    "\1\137\22\11\1\137\7\0\24\11\1\137\5\11\5\0"+
    "\30\11\7\0\2\11\1\140\27\11\5\0\30\11\7\0"+
    "\1\11\1\141\30\11\5\0\30\11\7\0\13\11\1\142"+
    "\16\11\5\0\30\11\7\0\7\11\1\143\22\11\5\0"+
    "\30\11\7\0\10\11\1\144\21\11\5\0\30\11\7\0"+
    "\14\11\1\145\15\11\5\0\30\11\7\0\27\11\1\146"+
    "\2\11\5\0\30\11\7\0\25\11\1\147\4\11\5\0"+
    "\30\11\7\0\10\11\1\150\21\11\5\0\30\11\7\0"+
    "\15\11\1\151\14\11\5\0\30\11\7\0\15\11\1\152"+
    "\14\11\5\0\30\11\7\0\16\11\1\153\13\11\5\0"+
    "\30\11\7\0\15\11\1\154\14\11\5\0\30\11\7\0"+
    "\7\11\1\155\1\156\21\11\5\0\30\11\7\0\1\157"+
    "\31\11\5\0\30\11\7\0\24\11\1\160\5\11\5\0"+
    "\30\11\7\0\14\11\1\161\15\11\5\0\30\11\7\0"+
    "\16\11\1\162\13\11\5\0\30\11\7\0\1\163\31\11"+
    "\5\0\30\11\7\0\13\11\1\164\16\11\5\0\4\11"+
    "\1\136\13\11\1\136\7\11\7\0\13\11\1\165\1\11"+
    "\1\166\5\11\1\167\6\11\5\0\30\11\7\0\6\11"+
    "\1\170\23\11\5\0\22\11\1\171\5\11\7\0\32\11"+
    "\5\0\2\172\1\11\1\172\24\11\7\0\32\11\5\0"+
    "\2\47\1\7\1\47\1\173\2\47\1\11\1\174\1\47"+
    "\1\175\1\176\7\47\1\177\1\47\1\200\2\47\7\0"+
    "\4\47\1\176\2\47\1\175\2\47\1\177\1\47\1\174"+
    "\12\47\1\200\2\47\5\0\2\47\1\7\1\47\1\201"+
    "\2\47\1\11\2\47\1\202\15\47\7\0\7\47\1\202"+
    "\22\47\5\0\2\47\1\7\1\47\1\203\2\47\1\11"+
    "\15\47\1\200\2\47\7\0\27\47\1\200\2\47\5\0"+
    "\2\47\1\7\1\47\1\204\2\47\1\11\1\174\1\47"+
    "\1\205\15\47\7\0\7\47\1\205\4\47\1\174\15\47"+
    "\5\0\2\47\1\7\1\47\1\206\2\47\1\11\13\47"+
    "\1\177\4\47\7\0\12\47\1\177\17\47\5\0\2\47"+
    "\1\7\1\47\1\207\2\47\1\11\3\47\1\176\14\47"+
    "\7\0\4\47\1\176\25\47\5\0\2\47\1\7\1\47"+
    "\1\210\2\47\1\11\1\174\2\47\1\176\14\47\7\0"+
    "\4\47\1\176\7\47\1\174\15\47\5\0\2\47\1\7"+
    "\1\47\1\211\2\47\1\11\1\174\17\47\7\0\14\47"+
    "\1\174\15\47\5\0\2\47\1\7\1\47\1\212\2\47"+
    "\1\11\2\47\1\205\12\47\1\200\2\47\7\0\7\47"+
    "\1\205\17\47\1\200\2\47\5\0\2\47\1\7\1\47"+
    "\1\213\2\47\1\11\2\47\1\205\15\47\7\0\7\47"+
    "\1\205\22\47\5\0\4\11\1\214\5\11\1\214\15\11"+
    "\7\0\7\11\1\214\22\11\5\0\4\11\1\215\5\11"+
    "\1\215\15\11\7\0\7\11\1\215\22\11\5\0\4\11"+
    "\1\216\5\11\1\216\15\11\7\0\7\11\1\216\22\11"+
    "\5\0\4\11\1\217\16\11\1\217\4\11\7\0\12\11"+
    "\1\217\17\11\5\0\4\11\1\220\20\11\1\220\2\11"+
    "\7\0\27\11\1\220\2\11\5\0\4\11\1\221\3\11"+
    "\1\221\17\11\7\0\14\11\1\221\15\11\5\0\4\11"+
    "\1\222\6\11\1\222\14\11\7\0\4\11\1\222\25\11"+
    "\5\0\30\11\7\0\3\11\1\223\26\11\5\0\30\11"+
    "\7\0\14\11\1\224\15\11\5\0\30\11\7\0\2\11"+
    "\1\225\27\11\5\0\30\11\7\0\23\11\1\226\6\11"+
    "\5\0\30\11\7\0\7\11\1\227\22\11\5\0\30\11"+
    "\7\0\23\11\1\230\6\11\5\0\30\11\7\0\1\11"+
    "\1\231\30\11\5\0\30\11\7\0\10\11\1\232\21\11"+
    "\5\0\30\11\7\0\1\11\1\233\30\11\5\0\30\11"+
    "\7\0\15\11\1\234\14\11\5\0\30\11\7\0\2\11"+
    "\1\235\27\11\5\0\30\11\7\0\20\11\1\236\11\11"+
    "\5\0\30\11\7\0\2\11\1\237\27\11\5\0\30\11"+
    "\7\0\1\240\31\11\5\0\30\11\7\0\1\11\1\241"+
    "\30\11\5\0\30\11\7\0\10\11\1\242\21\11\5\0"+
    "\30\11\7\0\4\11\1\243\25\11\5\0\30\11\7\0"+
    "\6\11\1\244\23\11\5\0\30\11\7\0\20\11\1\245"+
    "\11\11\5\0\30\11\7\0\1\11\1\246\30\11\5\0"+
    "\30\11\7\0\7\11\1\247\22\11\5\0\30\11\7\0"+
    "\15\11\1\250\14\11\5\0\4\11\1\221\3\11\1\221"+
    "\17\11\7\0\14\11\1\221\1\251\14\11\5\0\30\11"+
    "\7\0\7\11\1\252\22\11\5\0\30\11\7\0\10\11"+
    "\1\253\21\11\5\0\17\11\1\254\10\11\7\0\32\11"+
    "\5\0\2\255\1\256\1\255\24\11\7\0\32\11\5\0"+
    "\2\47\1\7\1\47\1\257\2\47\1\11\3\47\1\260"+
    "\4\47\1\261\1\262\1\47\1\263\1\264\3\47\7\0"+
    "\1\47\1\264\2\47\1\260\5\47\1\263\2\47\1\261"+
    "\3\47\1\262\10\47\5\0\2\47\1\7\1\47\1\265"+
    "\2\47\1\11\11\47\1\262\6\47\7\0\21\47\1\262"+
    "\10\47\5\0\2\47\1\7\1\47\1\266\2\47\1\11"+
    "\3\47\1\260\7\47\1\263\4\47\7\0\4\47\1\260"+
    "\5\47\1\263\17\47\5\0\2\47\1\7\1\47\1\267"+
    "\2\47\1\11\10\47\1\267\7\47\7\0\15\47\1\267"+
    "\14\47\5\0\2\47\1\7\1\47\1\270\2\47\1\11"+
    "\10\47\1\271\7\47\7\0\15\47\1\271\14\47\5\0"+
    "\2\47\1\7\1\47\1\272\2\47\1\11\14\47\1\264"+
    "\3\47\7\0\1\47\1\264\30\47\5\0\2\47\1\7"+
    "\1\47\1\273\2\47\1\11\3\47\1\260\14\47\7\0"+
    "\4\47\1\260\25\47\5\0\2\47\1\7\1\47\1\274"+
    "\2\47\1\11\11\47\1\262\1\47\1\263\4\47\7\0"+
    "\12\47\1\263\6\47\1\262\10\47\5\0\2\47\1\7"+
    "\1\47\1\275\2\47\1\11\13\47\1\263\4\47\7\0"+
    "\12\47\1\263\17\47\5\0\2\47\1\7\1\47\1\276"+
    "\2\47\1\11\10\47\1\267\1\262\6\47\7\0\15\47"+
    "\1\267\3\47\1\262\10\47\5\0\2\47\1\7\1\47"+
    "\1\277\2\47\1\11\13\47\1\263\1\264\3\47\7\0"+
    "\1\47\1\264\10\47\1\263\17\47\5\0\4\11\1\300"+
    "\6\11\1\301\7\11\1\302\4\11\7\0\4\11\1\301"+
    "\5\11\1\302\17\11\5\0\4\11\1\301\6\11\1\301"+
    "\14\11\7\0\4\11\1\301\25\11\5\0\4\11\1\302"+
    "\16\11\1\302\4\11\7\0\12\11\1\302\17\11\5\0"+
    "\4\11\1\303\13\11\1\303\7\11\7\0\15\11\1\303"+
    "\14\11\5\0\4\11\1\304\17\11\1\304\3\11\7\0"+
    "\1\11\1\304\30\11\5\0\4\11\1\305\14\11\1\305"+
    "\6\11\7\0\21\11\1\305\10\11\5\0\4\11\1\306"+
    "\13\11\1\306\7\11\7\0\15\11\1\306\14\11\5\0"+
    "\30\11\7\0\4\11\1\307\7\11\1\310\15\11\5\0"+
    "\30\11\7\0\15\11\1\311\14\11\5\0\30\11\7\0"+
    "\4\11\1\312\25\11\5\0\30\11\7\0\2\11\1\313"+
    "\27\11\5\0\30\11\7\0\4\11\1\314\25\11\5\0"+
    "\30\11\7\0\2\11\1\315\27\11\5\0\30\11\7\0"+
    "\7\11\1\316\22\11\5\0\30\11\7\0\4\11\1\317"+
    "\25\11\5\0\30\11\7\0\24\11\1\320\5\11\5\0"+
    "\30\11\7\0\14\11\1\321\15\11\5\0\30\11\7\0"+
    "\16\11\1\322\13\11\5\0\30\11\7\0\4\11\1\323"+
    "\25\11\5\0\30\11\7\0\23\11\1\324\6\11\5\0"+
    "\30\11\7\0\2\11\1\325\27\11\5\0\30\11\7\0"+
    "\15\11\1\326\14\11\5\0\30\11\7\0\15\11\1\327"+
    "\14\11\5\0\30\11\7\0\15\11\1\330\14\11\5\0"+
    "\30\11\7\0\2\11\1\331\27\11\5\0\30\11\7\0"+
    "\14\11\1\332\15\11\5\0\30\11\7\0\17\11\1\333"+
    "\12\11\5\0\30\11\7\0\2\11\1\334\27\11\5\0"+
    "\30\11\7\0\14\11\1\335\15\11\5\0\30\11\7\0"+
    "\1\336\31\11\5\0\30\11\7\0\7\11\1\337\22\11"+
    "\5\0\16\11\1\340\11\11\7\0\32\11\5\0\2\255"+
    "\1\11\1\255\24\11\7\0\32\11\5\0\1\341\2\11"+
    "\1\341\24\11\7\0\32\11\5\0\2\47\1\7\1\47"+
    "\1\342\2\47\1\11\4\47\1\343\1\344\6\47\1\345"+
    "\3\47\7\0\1\343\1\345\1\344\27\47\5\0\2\47"+
    "\1\7\1\47\1\343\2\47\1\11\4\47\1\343\13\47"+
    "\7\0\1\343\31\47\5\0\2\47\1\7\1\47\1\346"+
    "\2\47\1\11\5\47\1\346\12\47\7\0\2\47\1\346"+
    "\27\47\5\0\2\47\1\7\1\47\1\347\2\47\1\11"+
    "\5\47\1\350\12\47\7\0\2\47\1\350\27\47\5\0"+
    "\2\47\1\7\1\47\1\351\2\47\1\11\14\47\1\345"+
    "\3\47\7\0\1\47\1\345\30\47\5\0\2\47\1\7"+
    "\1\47\1\352\2\47\1\11\5\47\1\353\12\47\7\0"+
    "\2\47\1\353\27\47\5\0\2\47\1\7\1\47\1\354"+
    "\2\47\1\11\4\47\1\343\7\47\1\345\3\47\7\0"+
    "\1\343\1\345\30\47\5\0\2\47\1\7\1\47\1\355"+
    "\2\47\1\11\5\47\1\350\6\47\1\345\3\47\7\0"+
    "\1\47\1\345\1\350\27\47\5\0\2\47\1\7\1\47"+
    "\1\356\2\47\1\11\5\47\1\353\6\47\1\345\3\47"+
    "\7\0\1\47\1\345\1\353\27\47\5\0\4\11\1\357"+
    "\7\11\1\360\7\11\1\361\3\11\7\0\1\360\1\361"+
    "\30\11\5\0\4\11\1\360\7\11\1\360\13\11\7\0"+
    "\1\360\31\11\5\0\4\11\1\361\17\11\1\361\3\11"+
    "\7\0\1\11\1\361\30\11\5\0\4\11\1\362\10\11"+
    "\1\362\12\11\7\0\2\11\1\362\27\11\5\0\4\11"+
    "\1\363\10\11\1\363\12\11\7\0\2\11\1\363\27\11"+
    "\5\0\4\11\1\364\10\11\1\364\12\11\7\0\2\11"+
    "\1\364\27\11\5\0\30\11\7\0\5\11\1\365\24\11"+
    "\5\0\30\11\7\0\5\11\1\366\24\11\5\0\30\11"+
    "\7\0\7\11\1\367\22\11\5\0\30\11\7\0\1\370"+
    "\31\11\5\0\30\11\7\0\1\371\31\11\5\0\30\11"+
    "\7\0\2\11\1\372\27\11\5\0\30\11\7\0\4\11"+
    "\1\373\25\11\5\0\30\11\7\0\15\11\1\374\14\11"+
    "\5\0\30\11\7\0\20\11\1\375\11\11\5\0\30\11"+
    "\7\0\14\11\1\376\15\11\5\0\30\11\7\0\14\11"+
    "\1\377\15\11\5\0\30\11\7\0\14\11\1\u0100\15\11"+
    "\5\0\30\11\7\0\14\11\1\u0101\15\11\5\0\30\11"+
    "\7\0\5\11\1\u0102\24\11\5\0\30\11\7\0\7\11"+
    "\1\u0103\22\11\5\0\30\11\7\0\17\11\1\u0104\12\11"+
    "\5\0\30\11\7\0\14\11\1\u0105\15\11\5\0\30\11"+
    "\7\0\17\11\1\u0106\12\11\5\0\30\11\7\0\32\11"+
    "\1\u0107\4\0\1\11\1\u0108\1\11\1\u0108\24\11\7\0"+
    "\32\11\5\0\2\47\1\7\1\47\1\u0109\2\47\1\11"+
    "\5\47\1\u010a\4\47\1\u010b\5\47\7\0\2\47\1\u010a"+
    "\5\47\1\u010b\21\47\5\0\2\47\1\7\1\47\1\u010c"+
    "\2\47\1\11\5\47\1\u010a\12\47\7\0\2\47\1\u010a"+
    "\27\47\5\0\2\47\1\7\1\47\1\u010d\2\47\1\11"+
    "\12\47\1\u010e\5\47\7\0\10\47\1\u010e\21\47\5\0"+
    "\2\47\1\7\1\47\1\u010f\2\47\1\11\12\47\1\u0110"+
    "\5\47\7\0\10\47\1\u0110\21\47\5\0\2\47\1\7"+
    "\1\47\1\u0111\2\47\1\11\12\47\1\u0112\5\47\7\0"+
    "\10\47\1\u0112\21\47\5\0\2\47\1\7\1\47\1\u0113"+
    "\2\47\1\11\12\47\1\u0114\5\47\7\0\10\47\1\u0114"+
    "\21\47\5\0\2\47\1\7\1\47\1\u0115\2\47\1\11"+
    "\5\47\1\u010a\4\47\1\u0110\5\47\7\0\2\47\1\u010a"+
    "\5\47\1\u0110\21\47\5\0\2\47\1\7\1\47\1\u0116"+
    "\2\47\1\11\12\47\1\u0117\5\47\7\0\10\47\1\u0117"+
    "\21\47\5\0\2\47\1\7\1\47\1\u0118\2\47\1\11"+
    "\12\47\1\u0119\5\47\7\0\10\47\1\u0119\21\47\5\0"+
    "\4\11\1\u011a\10\11\1\u011b\4\11\1\u011c\5\11\7\0"+
    "\2\11\1\u011b\5\11\1\u011c\21\11\5\0\4\11\1\u011b"+
    "\10\11\1\u011b\12\11\7\0\2\11\1\u011b\27\11\5\0"+
    "\4\11\1\u011c\15\11\1\u011c\5\11\7\0\10\11\1\u011c"+
    "\21\11\5\0\4\11\1\u011d\15\11\1\u011d\5\11\7\0"+
    "\10\11\1\u011d\21\11\5\0\4\11\1\u011e\15\11\1\u011e"+
    "\5\11\7\0\10\11\1\u011e\21\11\5\0\30\11\7\0"+
    "\6\11\1\u011f\23\11\5\0\30\11\7\0\22\11\1\u0120"+
    "\7\11\5\0\30\11\7\0\4\11\1\u0121\25\11\5\0"+
    "\30\11\7\0\15\11\1\u0122\14\11\5\0\30\11\7\0"+
    "\5\11\1\u0123\24\11\5\0\30\11\7\0\14\11\1\u0124"+
    "\15\11\5\0\30\11\7\0\15\11\1\u0125\14\11\5\0"+
    "\30\11\7\0\16\11\1\u0126\13\11\5\0\30\11\7\0"+
    "\15\11\1\u0127\14\11\5\0\30\11\7\0\16\11\1\u0128"+
    "\2\11\1\u0129\10\11\5\0\30\11\7\0\16\11\1\u012a"+
    "\13\11\5\0\30\11\7\0\4\11\1\u012b\25\11\5\0"+
    "\30\11\7\0\7\11\1\u012c\22\11\5\0\2\11\1\u012d"+
    "\25\11\7\0\32\11\5\0\2\47\1\7\1\47\1\u012e"+
    "\2\47\1\11\1\u012f\2\47\1\u0130\2\47\1\u0131\1\47"+
    "\1\u0132\7\47\7\0\4\47\1\u0130\1\47\1\u0131\5\47"+
    "\1\u012f\1\u0132\14\47\5\0\2\47\1\7\1\47\1\u0131"+
    "\2\47\1\11\6\47\1\u0131\11\47\7\0\6\47\1\u0131"+
    "\23\47\5\0\2\47\1\7\1\47\1\u0133\2\47\1\11"+
    "\1\u012f\2\47\1\u0130\4\47\1\u0132\7\47\7\0\4\47"+
    "\1\u0130\7\47\1\u012f\1\u0132\14\47\5\0\2\47\1\7"+
    "\1\47\1\u0134\2\47\1\11\1\u012f\7\47\1\u0132\7\47"+
    "\7\0\14\47\1\u012f\1\u0132\14\47\5\0\2\47\1\7"+
    "\1\47\1\u0130\2\47\1\11\3\47\1\u0130\14\47\7\0"+
    "\4\47\1\u0130\25\47\5\0\2\47\1\7\1\47\1\u0135"+
    "\2\47\1\11\10\47\1\u0132\7\47\7\0\15\47\1\u0132"+
    "\14\47\5\0\2\47\1\7\1\47\1\u012f\2\47\1\11"+
    "\1\u012f\17\47\7\0\14\47\1\u012f\15\47\5\0\2\47"+
    "\1\7\1\47\1\u0136\2\47\1\11\3\47\1\u0130\2\47"+
    "\1\u0131\11\47\7\0\4\47\1\u0130\1\47\1\u0131\23\47"+
    "\5\0\2\47\1\7\1\47\1\u0133\2\47\1\11\3\47"+
    "\1\u0130\4\47\1\u0132\7\47\7\0\4\47\1\u0130\10\47"+
    "\1\u0132\14\47\5\0\2\47\1\7\1\47\1\u0130\2\47"+
    "\1\11\1\u012f\2\47\1\u0130\14\47\7\0\4\47\1\u0130"+
    "\7\47\1\u012f\15\47\5\0\4\11\1\u0137\6\11\1\u0138"+
    "\2\11\1\u0139\11\11\7\0\4\11\1\u0138\1\11\1\u0139"+
    "\23\11\5\0\4\11\1\u0139\11\11\1\u0139\11\11\7\0"+
    "\6\11\1\u0139\23\11\5\0\4\11\1\u0138\6\11\1\u0138"+
    "\14\11\7\0\4\11\1\u0138\25\11\5\0\4\11\1\u013a"+
    "\3\11\1\u013a\17\11\7\0\14\11\1\u013a\15\11\5\0"+
    "\4\11\1\u013b\13\11\1\u013b\7\11\7\0\15\11\1\u013b"+
    "\14\11\5\0\30\11\7\0\7\11\1\u013c\22\11\5\0"+
    "\30\11\7\0\14\11\1\u013d\15\11\5\0\30\11\7\0"+
    "\5\11\1\u013e\24\11\5\0\30\11\7\0\13\11\1\u013f"+
    "\16\11\5\0\30\11\7\0\6\11\1\u0140\7\11\1\u0141"+
    "\3\11\1\u0142\7\11\5\0\30\11\7\0\5\11\1\u0143"+
    "\24\11\5\0\30\11\7\0\7\11\1\u0144\22\11\5\0"+
    "\30\11\7\0\15\11\1\u0145\14\11\5\0\30\11\7\0"+
    "\4\11\1\u0146\25\11\5\0\30\11\7\0\14\11\1\u0147"+
    "\15\11\5\0\30\11\7\0\16\11\1\u0148\13\11\5\0"+
    "\1\u0149\2\11\1\u0149\24\11\7\0\32\11\5\0\2\47"+
    "\1\7\1\47\1\u014a\2\47\1\11\3\47\1\u014a\2\47"+
    "\1\u014b\11\47\7\0\4\47\1\u014a\1\47\1\u014b\23\47"+
    "\5\0\2\47\1\7\1\47\1\u014c\2\47\1\11\6\47"+
    "\1\u014c\11\47\7\0\6\47\1\u014c\23\47\5\0\2\47"+
    "\1\7\1\47\1\u014b\2\47\1\11\6\47\1\u014b\11\47"+
    "\7\0\6\47\1\u014b\23\47\5\0\2\47\1\7\1\47"+
    "\1\u014a\2\47\1\11\3\47\1\u014a\14\47\7\0\4\47"+
    "\1\u014a\25\47\5\0\2\47\1\7\1\47\1\u014a\2\47"+
    "\1\11\3\47\1\u014a\2\47\1\u014c\11\47\7\0\4\47"+
    "\1\u014a\1\47\1\u014c\23\47\5\0\4\11\1\u014d\11\11"+
    "\1\u014d\11\11\7\0\6\11\1\u014d\23\11\5\0\4\11"+
    "\1\u014e\11\11\1\u014e\11\11\7\0\6\11\1\u014e\23\11"+
    "\5\0\4\11\1\u014f\6\11\1\u014f\14\11\7\0\4\11"+
    "\1\u014f\25\11\5\0\30\11\7\0\10\11\1\u0150\21\11"+
    "\5\0\30\11\7\0\23\11\1\u0151\6\11\5\0\30\11"+
    "\7\0\16\11\1\u0152\2\11\1\u0153\10\11\5\0\30\11"+
    "\7\0\14\11\1\u0154\15\11\5\0\30\11\7\0\7\11"+
    "\1\u0155\22\11\5\0\30\11\7\0\4\11\1\u0156\25\11"+
    "\5\0\30\11\7\0\14\11\1\u0157\15\11\5\0\30\11"+
    "\7\0\16\11\1\u0158\13\11\5\0\30\11\7\0\4\11"+
    "\1\u0159\25\11\5\0\30\11\7\0\2\11\1\u015a\27\11"+
    "\5\0\30\11\7\0\13\11\1\u015b\16\11\5\0\30\11"+
    "\7\0\15\11\1\u015c\14\11\5\0\30\11\7\0\14\11"+
    "\1\u015d\15\11\5\0\1\11\1\u015e\1\11\1\u015e\24\11"+
    "\7\0\32\11\5\0\2\47\1\7\1\47\1\u015f\2\47"+
    "\1\11\6\47\1\u015f\11\47\7\0\6\47\1\u015f\23\47"+
    "\5\0\4\11\1\u0160\11\11\1\u0160\11\11\7\0\6\11"+
    "\1\u0160\23\11\5\0\30\11\7\0\7\11\1\u0161\22\11"+
    "\5\0\30\11\7\0\7\11\1\u0162\22\11\5\0\30\11"+
    "\7\0\15\11\1\u0163\14\11\5\0\30\11\7\0\4\11"+
    "\1\u0164\25\11\5\0\30\11\7\0\10\11\1\u0165\21\11"+
    "\5\0\30\11\7\0\21\11\1\u0166\10\11\5\0\30\11"+
    "\7\0\23\11\1\u0167\6\11\5\0\30\11\7\0\4\11"+
    "\1\u0168\25\11\5\0\30\11\7\0\1\u0169\31\11\5\0"+
    "\30\11\7\0\14\11\1\u016a\15\11\5\0\30\11\7\0"+
    "\7\11\1\u016b\22\11\5\0\30\11\7\0\5\11\1\u016c"+
    "\24\11\5\0\30\11\7\0\15\11\1\u016d\14\11\5\0"+
    "\30\11\7\0\4\11\1\u016e\25\11\5\0\30\11\7\0"+
    "\1\u016f\31\11\5\0\30\11\7\0\2\11\1\u0170\27\11"+
    "\5\0\30\11\7\0\13\11\1\u0171\16\11\5\0\30\11"+
    "\7\0\7\11\1\u0172\22\11\5\0\30\11\7\0\22\11"+
    "\1\u0173\7\11\5\0\30\11\7\0\7\11\1\u0174\22\11"+
    "\5\0\30\11\7\0\21\11\1\u0175\10\11\5\0\30\11"+
    "\7\0\16\11\1\u0176\13\11\5\0\30\11\7\0\17\11"+
    "\1\u0177\12\11\5\0\30\11\7\0\16\11\1\u0178\3\11"+
    "\1\u0179\7\11\5\0\30\11\7\0\5\11\1\u017a\24\11"+
    "\5\0\30\11\7\0\14\11\1\u017b\15\11\5\0\30\11"+
    "\7\0\14\11\1\u017c\15\11\5\0\30\11\7\0\7\11"+
    "\1\u017d\22\11\5\0\30\11\7\0\4\11\1\u017e\25\11"+
    "\5\0\30\11\7\0\4\11\1\u017f\25\11\5\0\30\11"+
    "\7\0\1\u0180\31\11\5\0\30\11\7\0\22\11\1\u0181"+
    "\7\11\5\0\30\11\7\0\7\11\1\u0182\22\11\5\0"+
    "\30\11\7\0\7\11\1\u0183\22\11\5\0\30\11\7\0"+
    "\4\11\1\u0184\25\11\5\0\30\11\7\0\14\11\1\u0185"+
    "\15\11\5\0\30\11\7\0\11\11\1\u0186\20\11\5\0"+
    "\30\11\7\0\16\11\1\u0187\13\11\5\0\30\11\7\0"+
    "\17\11\1\u0188\12\11\5\0\30\11\7\0\5\11\1\u0189"+
    "\24\11\5\0\30\11\7\0\1\u018a\31\11\5\0\30\11"+
    "\7\0\14\11\1\u018b\15\11\5\0\30\11\7\0\4\11"+
    "\1\u018c\25\11\5\0\30\11\7\0\4\11\1\u018d\25\11"+
    "\5\0\30\11\7\0\16\11\1\u018e\13\11\5\0\30\11"+
    "\7\0\21\11\1\u018f\10\11\5\0\30\11\7\0\23\11"+
    "\1\u0190\6\11\5\0\30\11\7\0\2\11\1\u0191\27\11"+
    "\5\0\30\11\7\0\7\11\1\u0192\22\11\5\0\30\11"+
    "\7\0\7\11\1\u0193\22\11\5\0\30\11\7\0\11\11"+
    "\1\u0194\20\11\5\0\30\11\7\0\2\11\1\u0195\27\11"+
    "\5\0\30\11\7\0\1\u0196\31\11\5\0\30\11\7\0"+
    "\1\u0197\31\11\5\0\30\11\7\0\14\11\1\u0198\15\11"+
    "\5\0\30\11\7\0\22\11\1\u0199\7\11\5\0\30\11"+
    "\7\0\7\11\1\u019a\22\11\5\0\30\11\7\0\12\11"+
    "\1\u019b\17\11\5\0\30\11\7\0\4\11\1\u019c\25\11"+
    "\5\0\30\11\7\0\16\11\1\u019d\13\11\5\0\30\11"+
    "\7\0\2\11\1\u019e\27\11\5\0\30\11\7\0\1\u019f"+
    "\31\11\5\0\30\11\7\0\2\11\1\u01a0\27\11\5\0"+
    "\30\11\7\0\16\11\1\u01a1\13\11\5\0\30\11\7\0"+
    "\4\11\1\u01a2\25\11\5\0\30\11\7\0\1\u01a3\31\11"+
    "\5\0\30\11\7\0\1\u01a4\31\11\5\0\30\11\7\0"+
    "\14\11\1\u01a5\15\11\5\0\30\11\7\0\12\11\1\u01a6"+
    "\17\11\5\0\30\11\7\0\10\11\1\u01a7\21\11\5\0"+
    "\30\11\7\0\1\u01a8\31\11\5\0\30\11\7\0\7\11"+
    "\1\u01a9\22\11\5\0\30\11\7\0\1\u01aa\31\11\5\0"+
    "\30\11\7\0\14\11\1\u01ab\15\11\5\0\30\11\7\0"+
    "\16\11\1\u01ac\13\11\5\0\30\11\7\0\2\11\1\u01ad"+
    "\27\11\5\0\30\11\7\0\10\11\1\u01ae\21\11\5\0"+
    "\30\11\7\0\4\11\1\u01af\25\11\5\0\30\11\7\0"+
    "\2\11\1\u01b0\27\11\5\0\30\11\7\0\7\11\1\u01b1"+
    "\22\11\5\0\30\11\7\0\2\11\1\u01b2\27\11\5\0"+
    "\30\11\7\0\1\u01b3\31\11\5\0\30\11\7\0\1\u01b4"+
    "\31\11\5\0\30\11\7\0\4\11\1\u01b5\25\11\5\0"+
    "\30\11\7\0\10\11\1\u01b6\21\11\5\0\30\11\7\0"+
    "\1\u01b7\31\11\5\0\30\11\7\0\2\11\1\u01b8\27\11"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22010];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\12\1\7\11\361\1\1\11"+
    "\261\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  ClienteFrame clienteFrame;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  public void iniciarFrame(ClienteFrame clienteFrame){
        this.clienteFrame=clienteFrame;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2892) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { clienteFrame.mostrarError("lexico",yyline+1,yycolumn+1,yytext());
            } 
            // fall through
          case 58: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 59: break;
          case 3: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 60: break;
          case 4: 
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 61: break;
          case 5: 
            { return symbol(DIAGONAL_RECTA,yytext());
            } 
            // fall through
          case 62: break;
          case 6: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 63: break;
          case 7: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 64: break;
          case 8: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 65: break;
          case 9: 
            { return symbol(CORCHETE_ABIERTO,yytext());
            } 
            // fall through
          case 66: break;
          case 10: 
            { return symbol(CORCHETE_CERRADO,yytext());
            } 
            // fall through
          case 67: break;
          case 11: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 68: break;
          case 12: 
            { return symbol(COMILLA,yytext());
            } 
            // fall through
          case 69: break;
          case 13: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 70: break;
          case 14: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 71: break;
          case 15: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 72: break;
          case 16: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 73: break;
          case 17: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 74: break;
          case 18: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 75: break;
          case 19: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 76: break;
          case 20: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 77: break;
          case 21: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 78: break;
          case 22: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 79: break;
          case 23: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 80: break;
          case 24: 
            { return symbol(ACCION,yytext());
            } 
            // fall through
          case 81: break;
          case 25: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 82: break;
          case 26: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 83: break;
          case 27: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 84: break;
          case 28: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 85: break;
          case 29: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 86: break;
          case 30: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 87: break;
          case 31: 
            { return symbol(HTTPS,yytext());
            } 
            // fall through
          case 88: break;
          case 32: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 89: break;
          case 33: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 90: break;
          case 34: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 91: break;
          case 35: 
            { return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 92: break;
          case 36: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 93: break;
          case 37: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 94: break;
          case 38: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 95: break;
          case 39: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 96: break;
          case 40: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 98: break;
          case 42: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 99: break;
          case 43: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 100: break;
          case 44: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 101: break;
          case 45: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 102: break;
          case 46: 
            { return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 103: break;
          case 47: 
            { return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 104: break;
          case 48: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 105: break;
          case 49: 
            { return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 106: break;
          case 50: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 107: break;
          case 51: 
            { return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 108: break;
          case 52: 
            { return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 109: break;
          case 53: 
            { return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 110: break;
          case 54: 
            { return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 111: break;
          case 55: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 112: break;
          case 56: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 113: break;
          case 57: 
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
