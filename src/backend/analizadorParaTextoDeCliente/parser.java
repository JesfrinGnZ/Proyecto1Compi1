
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.analizadorParaTextoDeCliente;

import java_cup.runtime.*;
import backend.elementos.*;
import backend.excepciones.*;
import frontend.gui.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\012\000\002\005\004" +
    "\000\002\005\003\000\002\004\005\000\002\004\006\000" +
    "\002\004\006\000\002\020\006\000\002\006\007\000\002" +
    "\007\011\000\002\012\004\000\002\012\003\000\002\013" +
    "\020\000\002\010\012\000\002\014\004\000\002\014\003" +
    "\000\002\015\013\000\002\011\012\000\002\016\004\000" +
    "\002\016\003\000\002\017\021" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\005\017\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffe\001\002\000\006\004\127" +
    "\005\130\001\002\000\004\002\126\001\002\000\004\002" +
    "\000\001\002\000\004\017\013\001\002\000\004\017\043" +
    "\001\002\000\004\006\014\001\002\000\004\020\015\001" +
    "\002\000\004\017\017\001\002\000\004\017\ufff3\001\002" +
    "\000\004\007\023\001\002\000\004\017\022\001\002\000" +
    "\004\017\ufff4\001\002\000\006\006\024\007\023\001\002" +
    "\000\004\012\026\001\002\000\004\020\025\001\002\000" +
    "\004\017\ufff5\001\002\000\004\023\027\001\002\000\004" +
    "\024\030\001\002\000\004\027\031\001\002\000\004\024" +
    "\032\001\002\000\004\021\033\001\002\000\004\071\034" +
    "\001\002\000\004\022\035\001\002\000\004\017\036\001" +
    "\002\000\004\016\037\001\002\000\004\007\040\001\002" +
    "\000\004\020\041\001\002\000\004\017\ufff2\001\002\000" +
    "\004\017\046\001\002\000\010\010\054\013\053\016\050" +
    "\001\002\000\004\017\046\001\002\000\006\002\ufffa\017" +
    "\ufffa\001\002\000\004\016\050\001\002\000\006\002\ufff9" +
    "\017\ufff9\001\002\000\004\004\051\001\002\000\004\020" +
    "\052\001\002\000\006\002\ufff7\017\ufff7\001\002\000\004" +
    "\020\104\001\002\000\004\020\055\001\002\000\004\017" +
    "\057\001\002\000\004\017\uffeb\001\002\000\004\011\064" +
    "\001\002\000\004\017\062\001\002\000\004\017\uffec\001" +
    "\002\000\006\011\064\016\063\001\002\000\004\010\102" +
    "\001\002\000\004\012\065\001\002\000\004\023\066\001" +
    "\002\000\004\024\067\001\002\000\004\054\070\001\002" +
    "\000\004\024\071\001\002\000\004\020\072\001\002\000" +
    "\004\021\073\001\002\000\004\071\074\001\002\000\004" +
    "\022\075\001\002\000\004\017\076\001\002\000\004\016" +
    "\077\001\002\000\004\011\100\001\002\000\004\020\101" +
    "\001\002\000\004\017\uffea\001\002\000\004\020\103\001" +
    "\002\000\004\017\uffed\001\002\000\004\017\105\001\002" +
    "\000\004\014\113\001\002\000\004\017\110\001\002\000" +
    "\004\017\uffef\001\002\000\006\014\113\016\112\001\002" +
    "\000\004\017\ufff0\001\002\000\004\013\123\001\002\000" +
    "\004\015\114\001\002\000\004\023\115\001\002\000\004" +
    "\024\116\001\002\000\004\027\117\001\002\000\004\024" +
    "\120\001\002\000\004\016\121\001\002\000\004\020\122" +
    "\001\002\000\004\017\uffee\001\002\000\004\020\124\001" +
    "\002\000\004\017\ufff1\001\002\000\006\002\ufff8\017\ufff8" +
    "\001\002\000\004\002\001\001\002\000\004\012\142\001" +
    "\002\000\004\020\131\001\002\000\004\017\132\001\002" +
    "\000\004\004\127\001\002\000\004\017\ufffb\001\002\000" +
    "\004\017\135\001\002\000\006\004\127\016\137\001\002" +
    "\000\004\017\ufffc\001\002\000\004\005\140\001\002\000" +
    "\004\020\141\001\002\000\004\002\ufffd\001\002\000\004" +
    "\023\143\001\002\000\004\035\144\001\002\000\004\017" +
    "\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\012\002\006\003\003\004\007\006\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\011\001" +
    "\001\000\010\010\043\011\041\020\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\017\013\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\124\001\001\000\002" +
    "\001\001\000\004\020\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\057\017\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\105\015" +
    "\106\001\001\000\002\001\001\000\004\015\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\132\005\133" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\135\006\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    int fila,columna;
    String lexema;
    //  VARIABLES
    private String valor;
    private SitioWeb sitioWeb;
    private PaginaWeb paginaWeb;
    private Usuario usuario;
    private ClienteFrame clienteFrame;

    // Connect this parser to a scanner!
    public parser(AnalizadorLexicoTextoCliente lex,Usuario usuario,ClienteFrame clienteFrame) {
	super(lex);
        this.usuario=usuario;
        this.clienteFrame=clienteFrame;
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        try {
        this.lexema =s.value.toString();
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        this.clienteFrame.mostrarError("sintactico",fila,columna,lexema);
        this.clienteFrame.setSeDebeEnviarElTexto(false);
        } catch (Exception e) {
            //System.out.println("Error Recuperable se esperaba mas simbolos en ultima fila");
            this.clienteFrame.setSeDebeEnviarElTexto(false);
        } 
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        try {
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            this.clienteFrame.mostrarErrorSintactico("NO HAS CONTROLADO ESTE ERROR");
            this.clienteFrame.setSeDebeEnviarElTexto(false);
        } catch (Exception e) {
            //System.out.println("ERROR EN LA ESTRUCUTURA PRINCIPAL acciones");
            this.clienteFrame.mostrarErrorSintactico("Error SINTACTICO en la estructura acciones");
            this.clienteFrame.setSeDebeEnviarElTexto(false);
        }
    }

    private void iniciarSitioWeb(Object i,String tipo,int ileft,int iright){
        if(sitioWeb==null){
            System.out.println("el sitio ES NULO se iniciara uno nuevo");
            sitioWeb=new SitioWeb();
        }else{
            System.out.println("el sitio NO ES NULO se seguira almacenando");
        }   

        if(i!=null){
            String valor=i.toString();
            System.out.println("VALOR:"+valor+"TIPO:"+tipo);
            if(sitioWeb.darValores(valor,tipo)){
                System.out.println("Se asigno");
            }else{
                System.out.println("No asigno");
                clienteFrame.mostrarError("sintactico repetitivo",ileft,iright,i.toString());
                this.clienteFrame.setSeDebeEnviarElTexto(false);
            }
        }else{
            System.out.println("I es nulo");
        }   
    }


    private void iniciarPaginaWeb(Object i,String tipo,int ileft,int iright){
        if(paginaWeb==null){
            System.out.println("la pagina ES NULO se iniciara uno nuevo");
            paginaWeb=new PaginaWeb();
        }else{
            System.out.println("la pagina NO ES NULO se seguira almacenando");
        }   

        if(i!=null){
            String valor=i.toString();
            System.out.println("VALOR:"+valor+"TIPO:"+tipo);
            if(paginaWeb.darValores(valor,tipo)){
                System.out.println("Se asigno");
            }else{
                System.out.println("No asigno");
                clienteFrame.mostrarError("sintactico repetitivo",ileft,iright,i.toString());
                this.clienteFrame.setSeDebeEnviarElTexto(false);
            }
        }else{
            System.out.println("I es nulo");
        }   
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= unaAccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= acciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // acciones ::= MENOR_QUE ACCIONES MAYOR_QUE conjuntoDeAcciones MENOR_QUE DIAGONAL ACCIONES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // conjuntoDeAcciones ::= conjuntoDeAcciones unaAccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeAcciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // conjuntoDeAcciones ::= unaAccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeAcciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // unaAccion ::= cabecera cuerpo fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaAccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // unaAccion ::= cabecera cuerpo etiquetas fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaAccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // unaAccion ::= cabecera cuerpo atributos fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaAccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fin ::= MENOR_QUE DIAGONAL ACCION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cabecera ::= MENOR_QUE ACCION NOMBRE IGUAL NUEVA_PAGINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= MENOR_QUE PARAMETROS MAYOR_QUE conjuntoDeParametros MENOR_QUE PARAMETROS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjuntoDeParametros ::= conjuntoDeParametros unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjuntoDeParametros ::= unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetas ::= MENOR_QUE ETIQUETAS MAYOR_QUE conjuntoDeEtiquetas MENOR_QUE DIAGONAL ETIQUETAS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // conjuntoDeEtiquetas ::= conjuntoDeEtiquetas unaEtiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeEtiquetas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // conjuntoDeEtiquetas ::= unaEtiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeEtiquetas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unaEtiqueta ::= MENOR_QUE ETIQUETA VALOR IGUAL COMILLA ID COMILLA DIAGONAL MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaEtiqueta",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atributos ::= MENOR_QUE ATRIBUTOS MAYOR_QUE conjuntoDeAtributos MENOR_QUE DIAGONAL ATRIBUTOS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conjuntoDeAtributos ::= conjuntoDeAtributos unAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeAtributos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // conjuntoDeAtributos ::= unAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeAtributos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA TEXTO COMILLA MAYOR_QUE CORCHETE_ABIERTO IDENTIFICADOR CORCHETE_CERRADO MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
