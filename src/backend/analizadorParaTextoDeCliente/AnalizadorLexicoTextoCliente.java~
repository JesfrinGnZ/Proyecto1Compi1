/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;
import frontend.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\101\1\102\1\1\16\11\4\0\1\3\1\0"+
    "\1\37\1\72\1\10\10\0\1\6\1\100\1\33\1\4\11\5\1\75"+
    "\1\0\1\34\1\36\1\35\1\0\1\0\1\53\1\51\1\55\1\52"+
    "\1\42\1\56\1\62\1\57\1\46\1\71\1\77\1\63\1\60\1\40"+
    "\1\44\1\61\1\70\1\54\1\45\1\47\1\41\1\43\1\50\1\66"+
    "\1\77\1\67\1\64\1\0\1\65\1\0\1\7\1\0\1\13\1\26"+
    "\1\14\1\73\1\20\1\73\1\77\1\74\1\15\2\77\1\32\1\24"+
    "\1\17\1\16\1\22\1\30\1\23\1\21\1\25\1\27\1\31\4\77"+
    "\1\0\1\12\2\0\6\11\1\103\32\11\2\0\4\11\4\0\1\77"+
    "\2\0\1\11\7\0\1\77\4\0\1\77\5\0\27\77\1\0\37\77"+
    "\1\0\u01ca\77\4\0\14\77\16\0\5\77\7\0\1\77\1\0\1\77"+
    "\21\0\165\77\1\0\2\77\2\0\4\77\1\0\1\77\6\0\1\77"+
    "\1\0\3\77\1\0\1\77\1\0\24\77\1\0\123\77\1\0\213\77"+
    "\1\0\5\77\2\76\246\77\1\0\46\77\2\0\1\77\7\0\47\77"+
    "\7\0\1\11\1\0\55\77\1\0\1\77\1\0\2\77\1\0\2\77"+
    "\1\0\1\77\10\0\33\77\5\0\3\77\15\0\6\11\5\0\1\11"+
    "\4\0\13\77\1\0\1\11\3\0\112\77\4\0\146\77\1\0\10\77"+
    "\1\11\1\0\12\77\1\0\23\77\2\0\1\77\17\0\1\11\73\77"+
    "\2\0\145\77\16\0\66\77\4\0\1\77\5\0\56\77\22\0\34\77"+
    "\104\0\25\77\1\0\10\76\26\0\16\76\1\0\201\77\2\0\12\77"+
    "\1\0\23\77\1\0\10\77\2\0\2\77\2\0\26\77\1\0\7\77"+
    "\1\0\1\77\3\0\4\77\2\0\11\77\2\0\2\77\2\0\4\77"+
    "\10\0\1\77\4\0\2\77\1\0\5\77\2\0\14\77\2\11\7\0"+
    "\1\11\5\0\3\77\1\0\6\77\4\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\2\77\1\0\2\77\1\0\2\77\2\0\1\77\1\0"+
    "\5\77\4\0\2\77\2\0\3\77\3\0\1\77\7\0\4\77\1\0"+
    "\1\77\7\0\20\77\13\0\3\77\1\0\11\77\1\0\3\77\1\0"+
    "\26\77\1\0\7\77\1\0\2\77\1\0\5\77\2\0\12\77\1\0"+
    "\3\77\1\0\3\77\2\0\1\77\17\0\4\77\2\0\12\77\1\0"+
    "\1\11\7\0\1\77\7\0\3\77\1\0\10\77\2\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\2\77\1\0\5\77\2\0\11\77\2\0"+
    "\2\77\2\0\3\77\10\0\2\77\4\0\2\77\1\0\5\77\2\0"+
    "\12\77\1\0\1\77\20\0\2\77\1\0\6\77\3\0\3\77\1\0"+
    "\4\77\3\0\2\77\1\0\1\77\1\0\2\77\3\0\2\77\3\0"+
    "\3\77\3\0\14\77\4\0\5\77\3\0\3\77\1\0\4\77\2\0"+
    "\1\77\6\0\1\77\16\0\12\77\11\0\1\11\6\0\4\77\1\0"+
    "\10\77\1\0\3\77\1\0\27\77\1\0\20\77\3\0\10\77\1\0"+
    "\3\77\1\0\4\77\7\0\2\77\1\0\3\77\5\0\4\77\2\0"+
    "\12\77\20\0\1\76\3\77\1\0\10\77\1\0\3\77\1\0\27\77"+
    "\1\0\12\77\1\0\5\77\2\0\11\77\1\0\3\77\1\0\4\77"+
    "\7\0\2\77\7\0\1\77\1\0\4\77\2\0\12\77\1\0\2\77"+
    "\16\0\3\77\1\0\10\77\1\0\3\77\1\0\51\77\2\0\10\77"+
    "\1\0\3\77\1\0\5\77\5\0\3\76\1\77\7\0\5\77\2\0"+
    "\12\77\12\0\6\77\2\0\2\77\1\0\22\77\3\0\30\77\1\0"+
    "\11\77\1\0\1\77\2\0\7\77\3\0\1\77\4\0\6\77\1\0"+
    "\1\77\1\0\10\77\6\0\12\77\2\0\2\77\15\0\72\77\4\0"+
    "\1\11\17\77\1\0\12\77\47\0\2\77\1\0\1\77\2\0\2\77"+
    "\1\0\1\77\2\0\1\77\6\0\4\77\1\0\7\77\1\0\3\77"+
    "\1\0\1\77\1\0\1\77\2\0\2\77\1\0\15\77\1\0\3\77"+
    "\2\0\5\77\1\0\1\77\1\0\6\77\2\0\12\77\2\0\4\77"+
    "\40\0\1\77\27\0\2\77\6\0\12\77\13\0\1\77\1\0\1\77"+
    "\1\0\1\77\4\0\12\77\1\0\44\77\4\0\24\77\1\0\22\77"+
    "\1\0\44\77\11\0\1\77\71\0\112\77\6\0\116\77\2\0\46\77"+
    "\1\0\1\77\5\0\1\77\2\0\53\77\1\0\u014d\77\1\0\4\77"+
    "\2\0\7\77\1\0\1\77\1\0\4\77\2\0\51\77\1\0\4\77"+
    "\2\0\41\77\1\0\4\77\2\0\7\77\1\0\1\77\1\0\4\77"+
    "\2\0\17\77\1\0\71\77\1\0\4\77\2\0\103\77\2\0\3\77"+
    "\40\0\20\77\20\0\126\77\2\0\6\77\3\0\u026c\77\2\0\21\77"+
    "\1\0\32\77\5\0\113\77\3\0\13\77\7\0\15\77\1\0\7\77"+
    "\13\0\25\77\13\0\24\77\14\0\15\77\1\0\3\77\1\0\2\77"+
    "\14\0\124\77\3\0\1\77\3\0\1\11\2\77\2\0\12\77\41\0"+
    "\3\77\1\11\1\0\12\77\6\0\130\77\10\0\53\77\5\0\106\77"+
    "\12\0\37\77\1\0\14\77\4\0\14\77\12\0\50\77\2\0\5\77"+
    "\13\0\54\77\4\0\32\77\6\0\12\77\46\0\34\77\4\0\77\77"+
    "\1\0\35\77\2\0\13\77\6\0\12\77\15\0\1\77\10\0\16\77"+
    "\1\76\101\0\114\77\4\0\12\77\21\0\11\77\14\0\164\77\14\0"+
    "\70\77\10\0\12\77\3\0\61\77\2\0\11\76\107\0\3\77\1\0"+
    "\43\77\1\0\2\77\6\0\366\77\5\0\1\76\u011a\77\2\0\6\77"+
    "\2\0\46\77\2\0\6\77\2\0\10\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\37\77\2\0\65\77\1\0\7\77\1\0\1\77"+
    "\3\0\3\77\1\0\7\77\3\0\4\77\2\0\6\77\4\0\15\77"+
    "\5\0\3\77\1\0\7\77\16\0\5\11\30\0\1\101\1\101\5\11"+
    "\20\0\2\77\23\0\1\77\13\0\5\11\1\0\12\11\1\0\1\77"+
    "\15\0\1\77\20\0\15\77\3\0\37\11\21\0\15\77\4\76\1\77"+
    "\3\76\14\77\21\0\1\77\4\0\1\77\2\0\12\77\1\0\1\77"+
    "\3\0\5\77\6\0\1\77\1\0\1\77\1\0\1\77\1\0\4\77"+
    "\1\0\13\77\2\0\4\77\5\0\5\77\4\0\1\77\21\0\51\77"+
    "\u032d\0\64\76\u0716\0\57\77\1\0\57\77\1\0\205\77\6\0\11\77"+
    "\14\0\46\77\1\0\1\77\5\0\1\77\2\0\70\77\7\0\1\77"+
    "\17\0\30\77\11\0\7\77\1\0\7\77\1\0\7\77\1\0\7\77"+
    "\1\0\7\77\1\0\7\77\1\0\7\77\1\0\7\77\1\0\40\77"+
    "\57\0\1\77\u01d5\0\3\77\31\0\17\77\1\0\5\77\2\0\5\77"+
    "\4\0\126\77\2\0\2\77\2\0\3\77\1\0\132\77\1\0\4\77"+
    "\5\0\51\77\3\0\136\77\21\0\33\77\65\0\20\77\u0200\0\u19b6\77"+
    "\112\0\u51d6\77\52\0\u048d\77\103\0\56\77\2\0\u010d\77\3\0\34\77"+
    "\24\0\60\77\3\76\1\0\12\77\1\0\163\77\45\0\11\77\2\0"+
    "\147\77\2\0\43\77\1\76\1\0\10\77\77\0\61\77\20\0\1\11"+
    "\7\0\64\77\14\0\105\77\1\76\12\0\12\77\6\0\30\77\3\0"+
    "\1\77\1\0\1\77\2\0\56\77\2\0\44\77\14\0\35\77\3\0"+
    "\101\77\16\0\13\77\6\0\37\77\1\0\67\77\11\0\16\77\2\0"+
    "\12\77\6\0\27\77\3\0\111\77\30\0\3\77\2\0\20\77\2\0"+
    "\5\77\12\0\6\77\2\0\6\77\2\0\6\77\11\0\7\77\1\0"+
    "\7\77\1\0\53\77\1\0\12\77\12\0\173\77\1\0\2\77\2\0"+
    "\12\77\6\0\u2ba4\77\14\0\27\77\4\0\61\77\u2104\0\u016e\77\2\0"+
    "\152\77\46\0\7\77\14\0\5\77\5\0\14\77\1\0\15\77\1\0"+
    "\5\77\1\0\1\77\1\0\2\77\1\0\2\77\1\0\154\77\41\0"+
    "\u016b\77\22\0\100\77\2\0\66\77\50\0\14\77\1\11\3\0\20\77"+
    "\20\0\20\77\3\0\2\77\30\0\3\77\31\0\1\11\6\0\5\77"+
    "\1\0\207\77\2\0\1\11\4\0\1\11\13\0\12\77\7\0\32\77"+
    "\4\0\1\77\1\0\32\77\13\0\131\77\3\0\6\77\2\0\6\77"+
    "\2\0\6\77\2\0\3\77\3\0\2\11\3\0\2\11\22\0\3\11"+
    "\4\0\14\77\1\0\32\77\1\0\23\77\1\0\2\77\1\0\17\77"+
    "\2\0\16\77\42\0\173\77\105\0\65\77\210\0\1\77\202\0\35\77"+
    "\3\0\61\77\17\0\1\77\37\0\40\77\20\0\33\77\5\0\53\77"+
    "\5\0\36\77\2\0\44\77\4\0\10\77\1\0\5\77\52\0\236\77"+
    "\2\0\12\77\6\0\44\76\4\0\44\76\4\0\50\77\10\0\64\77"+
    "\234\0\u0137\77\11\0\26\77\12\0\10\77\230\0\6\77\2\0\1\77"+
    "\1\0\54\77\1\0\2\77\3\0\1\77\2\0\27\77\12\0\27\77"+
    "\11\0\37\77\101\0\23\77\1\0\2\77\12\0\26\77\12\0\32\77"+
    "\106\0\70\77\6\0\2\77\100\0\4\77\1\0\2\77\5\0\10\77"+
    "\1\0\3\77\1\0\33\77\4\0\3\77\4\0\1\77\40\0\35\77"+
    "\3\0\35\77\43\0\10\77\1\0\36\77\31\0\66\77\12\0\26\77"+
    "\12\0\23\77\15\0\22\77\156\0\111\77\67\0\63\77\15\0\63\77"+
    "\u030d\0\107\77\37\0\12\77\17\0\74\77\2\0\1\11\22\0\31\77"+
    "\7\0\12\77\6\0\65\77\1\0\12\77\20\0\44\77\2\0\1\77"+
    "\11\0\105\77\5\0\3\77\3\0\13\77\1\0\1\77\43\0\22\77"+
    "\1\0\45\77\6\0\1\76\101\0\7\77\1\0\1\77\1\0\4\77"+
    "\1\0\17\77\1\0\12\77\7\0\73\77\5\0\12\77\6\0\4\77"+
    "\1\0\10\77\2\0\2\77\2\0\26\77\1\0\7\77\1\0\2\77"+
    "\1\0\5\77\2\0\11\77\2\0\2\77\2\0\3\77\2\0\1\77"+
    "\6\0\1\77\5\0\7\77\2\0\7\77\3\0\5\77\213\0\113\76"+
    "\5\0\12\76\46\0\106\77\1\0\1\77\10\0\12\77\246\0\66\77"+
    "\2\0\11\77\27\0\6\77\42\0\101\77\3\0\1\77\13\0\12\77"+
    "\46\0\70\77\10\0\12\77\66\0\32\77\3\0\17\77\4\0\12\77"+
    "\u0166\0\112\77\25\0\1\77\u01c0\0\71\77\u0107\0\11\76\1\0\55\76"+
    "\1\0\11\76\17\0\12\76\30\0\36\76\2\0\26\76\1\0\16\76"+
    "\u0349\0\u039a\77\146\0\157\77\21\0\304\77\u0abc\0\u042f\77\u0fd1\0\u0247\77"+
    "\u21b9\0\u0239\77\7\0\37\77\1\0\12\77\146\0\36\77\2\0\5\77"+
    "\13\0\67\77\11\0\4\77\14\0\12\77\11\0\25\77\5\0\23\77"+
    "\u0370\0\105\77\13\0\57\77\20\0\21\77\100\0\1\76\37\0\u17ed\76"+
    "\23\0\u02f3\76\u250d\0\2\77\u0bfe\0\153\77\5\0\15\77\3\0\11\77"+
    "\7\0\12\77\3\0\2\77\1\0\4\11\u14c1\0\5\77\3\0\6\77"+
    "\10\11\10\77\2\0\7\77\36\0\4\77\224\0\3\77\u01bb\0\125\77"+
    "\1\0\107\77\1\0\2\77\2\0\1\77\2\0\2\77\2\0\4\77"+
    "\1\0\14\77\1\0\1\77\1\0\7\77\1\0\101\77\1\0\4\77"+
    "\2\0\10\77\1\0\7\77\1\0\34\77\1\0\4\77\1\0\5\77"+
    "\1\0\1\77\3\0\7\77\1\0\u0154\77\2\0\31\77\1\0\31\77"+
    "\1\0\37\77\1\0\31\77\1\0\37\77\1\0\31\77\1\0\37\77"+
    "\1\0\31\77\1\0\37\77\1\0\31\77\1\0\10\77\2\0\62\77"+
    "\u0200\0\67\77\4\0\62\77\10\0\1\77\16\0\1\77\26\0\5\77"+
    "\1\0\17\77\u0550\0\7\76\1\0\21\76\2\0\7\76\1\0\2\76"+
    "\1\0\5\76\u07d5\0\305\77\13\0\7\77\51\0\113\76\5\0\12\76"+
    "\u04a6\0\4\77\1\0\33\77\1\0\2\77\1\0\1\77\2\0\1\77"+
    "\1\0\12\77\1\0\4\77\1\0\1\77\1\0\1\77\6\0\1\77"+
    "\4\0\1\77\1\0\1\77\1\0\1\77\1\0\3\77\1\0\2\77"+
    "\1\0\1\77\2\0\1\77\1\0\1\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\2\77\1\0\1\77\2\0\4\77\1\0\7\77"+
    "\1\0\4\77\1\0\4\77\1\0\1\77\1\0\12\77\1\0\21\77"+
    "\5\0\3\77\1\0\5\77\1\0\21\77\u0274\0\32\76\6\0\32\76"+
    "\6\0\32\76\u0e76\0\ua6d7\77\51\0\u1035\77\13\0\336\77\2\0\u1682\77"+
    "\u295e\0\u021e\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\77\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\6\1\1\3\1\4\1\5\1\6"+
    "\1\7\15\1\17\0\1\10\26\0\1\11\41\0\1\12"+
    "\30\0\1\13\24\0\1\14\13\0\1\15\1\0\1\15"+
    "\4\0\1\15\2\0\1\15\5\0\1\16\1\17\2\0"+
    "\1\20\3\0\1\21\1\22\2\0\1\23\17\0\2\24"+
    "\1\25\1\0\1\25\2\0\1\24\5\0\1\26\1\27"+
    "\3\0\1\30\2\0\1\31\11\0\1\32\31\0\1\33"+
    "\1\34\11\0\1\35\1\36\1\37\1\35\1\0\1\37"+
    "\1\36\1\35\14\0\1\40\7\0\1\41\1\42\1\43"+
    "\16\0\1\44\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\10\0\1\51\24\0\1\52\3\0\1\53\12\0\1\54"+
    "\1\55\1\56\5\0\1\57\14\0\1\60\3\0\1\61"+
    "\10\0\1\62\1\0\1\63\4\0\1\64\1\0\1\65"+
    "\4\0\1\66\1\67\3\0\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\104\0\314\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\104\0\104\0\104\0\104\0\u0264\0\u02a8"+
    "\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8"+
    "\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8"+
    "\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908"+
    "\0\u094c\0\u0990\0\u09d4\0\104\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\104\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\104\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\104\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\104\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\104\0\u27d8\0\u292c"+
    "\0\u281c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\104\0\104"+
    "\0\u2ac4\0\u2b08\0\104\0\u2b4c\0\u2b90\0\u2bd4\0\104\0\104"+
    "\0\u2c18\0\u2c5c\0\104\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0"+
    "\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\104\0\u31ac"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\104"+
    "\0\104\0\u33cc\0\u3410\0\u3454\0\104\0\u3498\0\u34dc\0\104"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\104\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8"+
    "\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8"+
    "\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\104\0\104\0\u3e28\0\u3e6c\0\u3eb0"+
    "\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0"+
    "\0\u4114\0\104\0\u4158\0\u408c\0\u419c\0\u4114\0\u41e0\0\u4224"+
    "\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444"+
    "\0\u4488\0\u44cc\0\104\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620"+
    "\0\u4664\0\u46a8\0\u46ec\0\104\0\104\0\u4730\0\u4774\0\u47b8"+
    "\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8"+
    "\0\u4a1c\0\u4a60\0\u4aa4\0\104\0\104\0\104\0\u4ae8\0\104"+
    "\0\u4b2c\0\104\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4"+
    "\0\u4d08\0\u4d4c\0\104\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0"+
    "\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\104"+
    "\0\u52e0\0\u5324\0\u5368\0\104\0\u53ac\0\u53f0\0\u5434\0\u5478"+
    "\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\104\0\104"+
    "\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\104\0\u57ec"+
    "\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5654\0\u5940\0\u5984\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\u5a94\0\104\0\u5ad8\0\u5b1c\0\u5b60\0\104"+
    "\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80"+
    "\0\104\0\u5dc4\0\104\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\104"+
    "\0\u5f18\0\104\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\104\0\104"+
    "\0\u606c\0\u60b0\0\u60f4\0\104\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\6\2\1\5\1\6\3\2\1\7"+
    "\1\10\1\2\1\11\6\2\1\12\1\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\10\1\12\1\22"+
    "\1\23\1\24\1\25\1\2\1\26\1\2\1\27\1\2"+
    "\1\30\1\31\1\2\1\32\1\33\2\2\1\34\15\2"+
    "\1\4\1\2\106\0\1\4\113\0\1\35\1\36\1\37"+
    "\1\0\1\40\6\0\1\41\16\0\1\40\2\0\1\41"+
    "\3\0\1\36\1\0\1\37\40\0\1\42\1\0\1\37"+
    "\10\0\1\43\21\0\1\43\5\0\1\37\40\0\1\40"+
    "\3\0\1\40\25\0\1\40\51\0\1\44\12\0\1\44"+
    "\21\0\1\44\46\0\2\45\37\0\1\45\42\0\2\46"+
    "\37\0\1\46\36\0\3\47\105\0\1\40\3\0\1\40"+
    "\22\0\1\50\2\0\1\40\104\0\1\51\112\0\1\52"+
    "\75\0\1\53\107\0\1\54\73\0\1\55\3\0\1\56"+
    "\101\0\1\57\51\0\1\42\1\0\1\37\10\0\1\43"+
    "\12\0\1\60\6\0\1\43\5\0\1\37\4\0\1\61"+
    "\1\62\64\0\1\63\16\0\1\64\62\0\1\65\105\0"+
    "\1\66\51\0\2\45\37\0\1\67\30\0\4\70\1\71"+
    "\1\72\3\73\32\70\1\74\2\70\1\75\1\76\2\70"+
    "\1\77\2\70\1\100\2\70\1\101\1\102\3\70\1\103"+
    "\3\70\1\104\1\105\1\70\1\106\7\70\12\0\1\107"+
    "\1\0\1\110\1\111\5\0\1\112\1\113\5\0\1\114"+
    "\13\0\1\111\5\0\1\112\1\110\2\0\1\113\2\0"+
    "\1\114\32\0\1\115\10\0\1\116\6\0\1\114\21\0"+
    "\1\116\6\0\1\114\32\0\1\110\1\0\1\110\40\0"+
    "\1\110\40\0\1\113\11\0\1\113\33\0\1\113\35\0"+
    "\1\117\2\0\1\111\5\0\1\120\22\0\1\111\5\0"+
    "\1\120\41\0\1\121\1\0\1\110\6\0\1\120\30\0"+
    "\1\120\1\110\40\0\1\120\10\0\1\120\30\0\1\120"+
    "\41\0\1\111\2\0\1\111\30\0\1\111\47\0\1\116"+
    "\10\0\1\116\30\0\1\116\41\0\1\114\17\0\1\114"+
    "\30\0\1\114\24\0\6\122\1\0\20\122\5\0\24\122"+
    "\2\0\4\122\1\0\2\122\2\0\1\122\3\0\1\122"+
    "\42\0\1\123\102\0\1\124\110\0\1\125\104\0\1\126"+
    "\122\0\1\127\64\0\1\130\110\0\1\131\104\0\1\132"+
    "\102\0\1\133\75\0\1\134\1\135\117\0\1\136\73\0"+
    "\1\137\105\0\1\140\100\0\1\141\43\0\1\116\10\0"+
    "\1\116\26\0\1\142\1\0\1\116\5\0\1\143\21\0"+
    "\65\70\1\103\22\70\2\144\57\70\1\145\22\70\2\146"+
    "\57\70\1\145\22\70\6\147\1\70\20\147\5\70\24\147"+
    "\1\70\1\103\4\147\1\70\2\147\2\70\1\147\3\70"+
    "\1\147\46\70\1\150\16\70\1\103\76\70\1\151\4\70"+
    "\1\103\1\70\1\152\62\70\1\153\16\70\1\103\60\70"+
    "\1\154\22\70\1\103\60\70\1\155\22\70\1\103\60\70"+
    "\1\156\22\70\1\103\71\70\1\157\11\70\1\103\57\70"+
    "\1\160\23\70\1\103\22\70\2\161\5\70\2\161\3\70"+
    "\1\161\5\70\1\161\13\70\1\161\6\70\3\161\1\70"+
    "\2\161\6\70\1\103\5\70\1\161\35\70\1\162\37\70"+
    "\1\103\16\70\12\0\1\163\1\164\1\0\1\165\1\166"+
    "\7\0\1\167\1\0\1\170\13\0\1\166\1\0\1\165"+
    "\2\0\1\167\1\0\1\164\14\0\1\170\25\0\1\171"+
    "\2\0\1\171\30\0\1\171\47\0\1\170\15\0\1\170"+
    "\37\0\1\170\25\0\1\172\1\164\1\0\1\173\30\0"+
    "\1\173\4\0\1\164\42\0\1\167\13\0\1\167\22\0"+
    "\1\167\44\0\1\166\3\0\1\166\25\0\1\166\51\0"+
    "\1\174\1\164\2\0\1\166\25\0\1\166\6\0\1\164"+
    "\42\0\2\164\37\0\1\164\42\0\1\175\2\0\1\173"+
    "\12\0\1\170\15\0\1\173\21\0\1\170\25\0\1\173"+
    "\2\0\1\173\30\0\1\173\47\0\1\165\2\0\1\165"+
    "\30\0\1\165\41\0\6\122\1\0\20\122\4\0\1\176"+
    "\24\122\2\0\4\122\1\0\2\122\2\0\1\122\3\0"+
    "\1\122\43\0\1\177\113\0\1\200\112\0\1\201\67\0"+
    "\1\202\104\0\1\203\75\0\1\204\116\0\1\205\106\0"+
    "\1\206\66\0\1\207\101\0\1\210\104\0\1\211\106\0"+
    "\1\212\104\0\1\213\115\0\1\214\72\0\1\215\111\0"+
    "\1\216\75\0\1\217\35\0\4\70\2\220\57\70\1\103"+
    "\22\70\2\221\57\70\1\145\22\70\6\147\1\222\20\147"+
    "\5\70\24\147\1\70\1\223\4\147\1\70\2\147\2\70"+
    "\1\147\3\70\1\147\52\70\1\224\12\70\1\103\71\70"+
    "\1\225\11\70\1\103\103\70\1\103\2\70\1\226\62\70"+
    "\1\227\15\70\1\103\72\70\1\230\10\70\1\103\56\70"+
    "\1\231\24\70\1\103\56\70\1\232\24\70\1\103\72\70"+
    "\1\233\10\70\1\103\63\70\1\234\17\70\1\103\22\70"+
    "\2\235\5\70\2\235\3\70\1\235\5\70\1\235\13\70"+
    "\1\235\6\70\3\235\1\70\2\235\6\70\1\103\5\70"+
    "\1\235\35\70\1\236\37\70\1\103\16\70\12\0\1\237"+
    "\3\0\1\240\4\0\1\241\1\242\1\0\1\243\1\244"+
    "\11\0\1\244\2\0\1\240\4\0\1\243\2\0\1\241"+
    "\3\0\1\242\35\0\1\242\11\0\1\242\33\0\1\242"+
    "\35\0\1\245\3\0\1\240\7\0\1\243\15\0\1\240"+
    "\4\0\1\243\44\0\1\246\10\0\1\246\30\0\1\246"+
    "\41\0\1\247\10\0\1\247\30\0\1\247\41\0\1\244"+
    "\14\0\1\244\11\0\1\244\54\0\1\240\3\0\1\240"+
    "\25\0\1\240\51\0\1\250\11\0\1\242\1\0\1\243"+
    "\22\0\1\243\6\0\1\242\35\0\1\243\13\0\1\243"+
    "\22\0\1\243\44\0\1\251\10\0\1\246\1\242\27\0"+
    "\1\246\3\0\1\242\35\0\1\252\13\0\1\243\1\244"+
    "\11\0\1\244\7\0\1\243\76\0\1\253\6\0\1\254"+
    "\104\0\1\255\71\0\1\256\105\0\1\257\103\0\1\260"+
    "\122\0\1\261\73\0\1\262\74\0\1\263\121\0\1\264"+
    "\63\0\1\265\115\0\1\266\103\0\1\267\71\0\1\270"+
    "\114\0\1\271\106\0\1\272\67\0\1\273\101\0\1\274"+
    "\43\0\4\70\2\275\57\70\1\103\22\70\2\276\57\70"+
    "\1\145\24\70\3\277\54\70\1\103\60\70\1\300\22\70"+
    "\1\103\100\70\1\301\2\70\1\103\57\70\1\302\23\70"+
    "\1\103\57\70\1\303\23\70\1\103\60\70\1\304\22\70"+
    "\1\103\65\70\1\305\15\70\1\103\57\70\1\306\23\70"+
    "\1\103\72\70\1\307\10\70\1\103\65\70\1\310\15\70"+
    "\1\103\22\70\2\311\5\70\2\311\3\70\1\311\5\70"+
    "\1\311\13\70\1\311\6\70\3\311\1\70\2\311\6\70"+
    "\1\103\5\70\1\311\32\70\1\312\42\70\1\103\16\70"+
    "\12\0\1\313\4\0\1\314\1\315\6\0\1\316\10\0"+
    "\1\314\1\316\1\315\53\0\1\314\4\0\1\314\20\0"+
    "\1\314\55\0\1\317\5\0\1\317\21\0\1\317\53\0"+
    "\1\320\5\0\1\320\21\0\1\320\53\0\1\316\14\0"+
    "\1\316\11\0\1\316\54\0\1\321\5\0\1\321\21\0"+
    "\1\321\53\0\1\322\4\0\1\314\7\0\1\316\10\0"+
    "\1\314\1\316\54\0\1\323\5\0\1\320\6\0\1\316"+
    "\11\0\1\316\1\320\53\0\1\324\5\0\1\321\6\0"+
    "\1\316\11\0\1\316\1\321\50\0\1\325\103\0\1\326"+
    "\142\0\1\327\75\0\1\330\107\0\1\331\113\0\1\332"+
    "\102\0\1\333\103\0\1\334\103\0\1\335\37\0\1\336"+
    "\142\0\1\337\110\0\1\340\30\0\6\70\1\341\56\70"+
    "\1\103\22\70\2\342\1\341\56\70\1\145\22\70\6\343"+
    "\1\70\20\343\5\70\24\343\1\70\1\103\4\343\1\70"+
    "\2\343\2\70\1\343\3\70\1\343\44\70\1\344\20\70"+
    "\1\103\60\70\1\345\22\70\1\103\64\70\1\346\16\70"+
    "\1\103\101\70\1\347\1\70\1\103\73\70\1\350\7\70"+
    "\1\103\72\70\1\351\10\70\1\103\103\70\1\352\71\70"+
    "\1\353\11\70\1\103\64\70\1\354\16\70\1\103\22\70"+
    "\2\355\5\70\2\355\3\70\1\355\5\70\1\355\13\70"+
    "\1\355\6\70\3\355\1\70\2\355\6\70\1\103\5\70"+
    "\1\355\31\70\1\356\43\70\1\103\7\70\1\357\6\70"+
    "\12\0\1\360\5\0\1\361\4\0\1\362\14\0\1\361"+
    "\4\0\1\362\46\0\1\361\5\0\1\361\21\0\1\361"+
    "\53\0\1\363\12\0\1\363\21\0\1\363\46\0\1\364"+
    "\12\0\1\364\21\0\1\364\46\0\1\365\12\0\1\365"+
    "\21\0\1\365\46\0\1\366\12\0\1\366\21\0\1\366"+
    "\46\0\1\367\5\0\1\361\4\0\1\364\14\0\1\361"+
    "\4\0\1\364\46\0\1\370\12\0\1\370\21\0\1\370"+
    "\46\0\1\371\12\0\1\371\21\0\1\371\101\0\1\372"+
    "\117\0\1\373\66\0\1\374\46\0\1\375\150\0\1\376"+
    "\104\0\1\377\103\0\1\u0100\2\0\1\u0101\100\0\1\u0102"+
    "\26\0\4\70\2\u0103\57\70\1\103\22\70\2\342\57\70"+
    "\1\145\22\70\6\343\1\222\20\343\5\70\24\343\1\70"+
    "\1\u0104\4\343\1\70\2\343\2\70\1\343\3\70\1\343"+
    "\65\70\1\u0105\56\70\1\u0106\24\70\1\103\60\70\1\u0107"+
    "\22\70\1\103\62\70\1\u0108\20\70\1\103\75\70\1\u0109"+
    "\5\70\1\103\71\70\1\u010a\11\70\1\103\74\70\1\u010b"+
    "\6\70\1\103\74\70\1\u010c\6\70\1\103\22\70\2\u010d"+
    "\5\70\2\u010d\3\70\1\u010d\5\70\1\u010d\13\70\1\u010d"+
    "\6\70\3\u010d\1\70\2\u010d\6\70\1\103\5\70\1\u010d"+
    "\75\70\1\103\7\70\1\357\41\70\1\u010e\31\70\1\103"+
    "\16\70\12\0\1\u010f\1\u0110\2\0\1\u0111\2\0\1\u0112"+
    "\1\0\1\u0113\20\0\1\u0111\1\u0112\5\0\1\u0110\1\u0113"+
    "\41\0\1\u0112\6\0\1\u0112\23\0\1\u0112\50\0\1\u0114"+
    "\1\u0110\2\0\1\u0111\4\0\1\u0113\20\0\1\u0111\6\0"+
    "\1\u0110\1\u0113\41\0\1\u0115\1\u0110\7\0\1\u0113\27\0"+
    "\1\u0110\1\u0113\41\0\1\u0111\3\0\1\u0111\25\0\1\u0111"+
    "\51\0\1\u0113\10\0\1\u0113\30\0\1\u0113\41\0\2\u0110"+
    "\37\0\1\u0110\42\0\1\u0116\3\0\1\u0111\2\0\1\u0112"+
    "\22\0\1\u0111\1\u0112\50\0\1\u0114\3\0\1\u0111\4\0"+
    "\1\u0113\20\0\1\u0111\7\0\1\u0113\41\0\1\u0111\1\u0110"+
    "\2\0\1\u0111\25\0\1\u0111\6\0\1\u0110\76\0\1\u0117"+
    "\110\0\1\u0118\37\0\1\u0119\141\0\1\u011a\7\0\1\u011b"+
    "\3\0\1\u011c\31\0\1\u011d\142\0\1\u011e\111\0\1\u011f"+
    "\73\0\1\u0120\112\0\1\u0121\30\0\4\70\2\u0122\57\70"+
    "\1\103\103\70\1\u0123\72\70\1\u0124\10\70\1\103\103\70"+
    "\1\331\71\70\1\u0125\11\70\1\103\72\70\1\u0126\10\70"+
    "\1\103\62\70\1\u0127\20\70\1\103\64\70\1\u0128\16\70"+
    "\1\103\22\70\2\u0129\5\70\2\u0129\3\70\1\u0129\5\70"+
    "\1\u0129\13\70\1\u0129\6\70\3\u0129\1\70\2\u0129\6\70"+
    "\1\103\5\70\1\u0129\43\70\1\u012a\31\70\1\103\16\70"+
    "\12\0\1\u012b\3\0\1\u012b\2\0\1\u012c\22\0\1\u012b"+
    "\1\u012c\50\0\1\u012d\6\0\1\u012d\23\0\1\u012d\50\0"+
    "\1\u012c\6\0\1\u012c\23\0\1\u012c\50\0\1\u012b\3\0"+
    "\1\u012b\25\0\1\u012b\51\0\1\u012b\3\0\1\u012b\2\0"+
    "\1\u012d\22\0\1\u012b\1\u012d\105\0\1\u012e\116\0\1\u012f"+
    "\76\0\1\u0130\2\0\1\u0131\71\0\1\u0132\101\0\1\u0133"+
    "\112\0\1\u0134\105\0\1\u0135\72\0\1\u0136\101\0\1\u0137"+
    "\113\0\1\u0138\105\0\1\u0139\27\0\6\70\1\u013a\56\70"+
    "\1\103\70\70\1\u013b\12\70\1\103\103\70\1\u013c\103\70"+
    "\1\u013d\103\70\1\u013e\73\70\1\u013f\7\70\1\103\103\70"+
    "\1\u0140\22\70\4\u0141\3\70\20\u0141\5\70\24\u0141\1\70"+
    "\1\103\4\u0141\1\70\2\u0141\1\70\2\u0141\4\70\12\0"+
    "\1\u0142\6\0\1\u0142\23\0\1\u0142\104\0\1\u0143\103\0"+
    "\1\u0144\111\0\1\u0145\73\0\1\u0146\106\0\1\u0147\114\0"+
    "\1\u0148\105\0\1\u0149\65\0\1\u014a\77\0\1\u014b\116\0"+
    "\1\u014c\76\0\1\u014d\44\0\1\u014e\74\0\4\70\2\u014f"+
    "\57\70\1\103\71\70\1\u0150\11\70\1\103\71\70\1\u0151"+
    "\11\70\1\103\22\70\4\u0141\3\70\20\u0141\5\70\24\u0141"+
    "\1\70\1\103\4\u0141\1\70\2\u0141\1\70\2\u0141\1\u0152"+
    "\3\70\44\0\1\u0153\77\0\1\u0154\105\0\1\u0155\113\0"+
    "\1\u0156\77\0\1\u0157\116\0\1\u0158\70\0\1\u0159\115\0"+
    "\1\u015a\100\0\1\u015b\104\0\1\u015c\102\0\1\u015d\3\0"+
    "\1\u015e\22\0\4\70\2\u015f\57\70\1\103\103\70\1\u0160"+
    "\72\70\1\u0161\10\70\1\103\22\70\4\u0162\3\70\20\u0162"+
    "\5\70\24\u0162\1\70\1\103\4\u0162\1\70\2\u0162\1\70"+
    "\2\u0162\4\70\7\0\1\u0163\147\0\1\u0164\103\0\1\u0165"+
    "\76\0\1\u0166\101\0\1\u0167\103\0\1\u0168\77\0\1\u0169"+
    "\124\0\1\u016a\70\0\1\u016b\103\0\1\u016c\101\0\1\u016d"+
    "\112\0\1\u016e\30\0\65\70\1\u016f\103\70\1\u0170\16\70"+
    "\1\u0162\2\70\62\u0162\1\u0171\13\u0162\3\70\50\0\1\u0172"+
    "\110\0\1\u0173\104\0\1\u0174\34\0\1\u0175\134\0\1\u0176"+
    "\116\0\1\u0177\74\0\1\u0178\103\0\1\u0179\114\0\1\u017a"+
    "\106\0\1\u017b\105\0\1\u017c\21\0\1\u017d\2\0\62\u017d"+
    "\1\u0171\13\u017d\45\0\1\u017e\107\0\1\u017f\103\0\1\u0180"+
    "\105\0\1\u0181\75\0\1\u0182\101\0\1\u0183\103\0\1\u0184"+
    "\116\0\1\u0185\111\0\1\u0186\70\0\1\u0187\106\0\1\u0188"+
    "\76\0\1\u0189\114\0\1\u018a\70\0\1\u018b\101\0\1\u018c"+
    "\105\0\1\u018d\116\0\1\u018e\72\0\1\u018f\77\0\1\u0190"+
    "\103\0\1\u0191\116\0\1\u0192\101\0\1\u0193\101\0\1\u0194"+
    "\74\0\1\u0195\111\0\1\u0196\75\0\1\u0197\116\0\1\u0198"+
    "\105\0\1\u0199\70\0\1\u019a\110\0\1\u019b\100\0\1\u019c"+
    "\101\0\1\u019d\107\0\1\u019e\77\0\1\u019f\101\0\1\u01a0"+
    "\103\0\1\u01a1\107\0\1\u01a2\106\0\1\u01a3\74\0\1\u01a4"+
    "\105\0\1\u01a5\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24888];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\4\11\16\1\17\0"+
    "\1\11\26\0\1\11\41\0\1\11\30\0\1\11\24\0"+
    "\1\11\13\0\1\1\1\0\1\1\4\0\1\11\2\0"+
    "\1\1\5\0\2\11\2\0\1\11\3\0\2\11\2\0"+
    "\1\11\17\0\3\1\1\0\1\11\2\0\1\1\5\0"+
    "\2\11\3\0\1\11\2\0\1\11\11\0\1\11\31\0"+
    "\2\11\11\0\3\1\1\11\1\0\3\1\14\0\1\11"+
    "\7\0\1\1\2\11\16\0\3\11\1\0\1\11\1\0"+
    "\1\11\10\0\1\11\24\0\1\11\3\0\1\11\12\0"+
    "\2\11\1\1\5\0\1\11\14\0\1\11\3\0\1\11"+
    "\10\0\1\11\1\0\1\11\4\0\1\11\1\0\1\11"+
    "\4\0\2\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  ClienteFrame clienteFrame;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  public void iniciarFrame(ClienteFrame clienteFrame){
        this.clienteFrame=clienteFrame;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3044) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { clienteFrame.mostrarError("lexico",yyline+1,yycolumn+1,yytext());clienteFrame.setSeDebeEnviarElTexto(false);
            } 
            // fall through
          case 58: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 59: break;
          case 3: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 60: break;
          case 4: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 61: break;
          case 5: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 62: break;
          case 6: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 63: break;
          case 7: 
            { return symbol(COMILLA,yytext());
            } 
            // fall through
          case 64: break;
          case 8: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 65: break;
          case 9: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION,yytext());
            } 
            // fall through
          case 66: break;
          case 10: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 67: break;
          case 11: 
            { return symbol(IDENTIFICADOR_COMILLA,yytext());
            } 
            // fall through
          case 68: break;
          case 12: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 69: break;
          case 13: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 70: break;
          case 14: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 71: break;
          case 15: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 72: break;
          case 16: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 73: break;
          case 17: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 74: break;
          case 18: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 75: break;
          case 19: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 76: break;
          case 20: 
            { return symbol(ACCION,yytext());
            } 
            // fall through
          case 77: break;
          case 21: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 78: break;
          case 22: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 79: break;
          case 23: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 80: break;
          case 24: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 81: break;
          case 25: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 82: break;
          case 26: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 83: break;
          case 27: 
            { System.out.println("ConjuntoDeEtiquetas:"+yytext());return symbol(CONJUNTO_DE_ETIQUETAS,yytext());
            } 
            // fall through
          case 84: break;
          case 28: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 85: break;
          case 29: 
            { return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 86: break;
          case 30: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 87: break;
          case 31: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 88: break;
          case 32: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 89: break;
          case 33: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 90: break;
          case 34: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 91: break;
          case 35: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 92: break;
          case 36: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 93: break;
          case 37: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 94: break;
          case 38: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 95: break;
          case 39: 
            { System.out.println("Codigo color:"+yytext());return symbol(CODIGO_COLOR,yytext());
            } 
            // fall through
          case 96: break;
          case 40: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 98: break;
          case 42: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 99: break;
          case 43: 
            { return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 100: break;
          case 44: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 101: break;
          case 45: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 102: break;
          case 46: 
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 103: break;
          case 47: 
            { return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 104: break;
          case 48: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 105: break;
          case 49: 
            { return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 106: break;
          case 50: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 107: break;
          case 51: 
            { return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 108: break;
          case 52: 
            { return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 109: break;
          case 53: 
            { return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 110: break;
          case 54: 
            { return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 111: break;
          case 55: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 112: break;
          case 56: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 113: break;
          case 57: 
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
