/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;
import frontend.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\75\1\76\1\1\16\11\4\0\1\3\1\0"+
    "\1\37\1\73\1\12\3\107\3\0\2\107\1\6\1\110\1\33\1\4"+
    "\1\7\7\5\1\106\1\102\1\0\1\34\1\36\1\35\1\107\1\0"+
    "\1\54\1\52\1\56\1\53\1\42\1\57\1\63\1\60\1\47\1\72"+
    "\1\103\1\64\1\61\1\40\1\44\1\62\1\65\1\55\1\46\1\50"+
    "\1\41\1\43\1\51\1\70\1\103\1\71\1\66\1\107\1\67\1\0"+
    "\1\45\1\0\1\13\1\26\1\14\1\74\1\20\1\101\1\103\1\100"+
    "\1\15\2\103\1\32\1\24\1\17\1\16\1\22\1\30\1\23\1\21"+
    "\1\25\1\27\1\31\4\103\1\0\1\10\2\0\6\11\1\77\32\11"+
    "\2\0\4\11\4\0\1\105\2\0\1\11\7\0\1\105\4\0\1\105"+
    "\5\0\27\105\1\0\37\105\1\0\u01ca\105\4\0\14\105\16\0\5\105"+
    "\7\0\1\105\1\0\1\105\21\0\165\105\1\0\2\105\2\0\4\105"+
    "\1\0\1\105\6\0\1\105\1\0\3\105\1\0\1\105\1\0\24\105"+
    "\1\0\123\105\1\0\213\105\1\0\5\105\2\104\246\105\1\0\46\105"+
    "\2\0\1\105\7\0\47\105\7\0\1\11\1\0\55\105\1\0\1\105"+
    "\1\0\2\105\1\0\2\105\1\0\1\105\10\0\33\105\5\0\3\105"+
    "\15\0\6\11\5\0\1\11\4\0\13\105\1\0\1\11\3\0\112\105"+
    "\4\0\146\105\1\0\10\105\1\11\1\0\12\105\1\0\23\105\2\0"+
    "\1\105\17\0\1\11\73\105\2\0\145\105\16\0\66\105\4\0\1\105"+
    "\5\0\56\105\22\0\34\105\104\0\25\105\1\0\10\104\26\0\16\104"+
    "\1\0\201\105\2\0\12\105\1\0\23\105\1\0\10\105\2\0\2\105"+
    "\2\0\26\105\1\0\7\105\1\0\1\105\3\0\4\105\2\0\11\105"+
    "\2\0\2\105\2\0\4\105\10\0\1\105\4\0\2\105\1\0\5\105"+
    "\2\0\14\105\2\11\7\0\1\11\5\0\3\105\1\0\6\105\4\0"+
    "\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0\2\105\1\0"+
    "\2\105\2\0\1\105\1\0\5\105\4\0\2\105\2\0\3\105\3\0"+
    "\1\105\7\0\4\105\1\0\1\105\7\0\20\105\13\0\3\105\1\0"+
    "\11\105\1\0\3\105\1\0\26\105\1\0\7\105\1\0\2\105\1\0"+
    "\5\105\2\0\12\105\1\0\3\105\1\0\3\105\2\0\1\105\17\0"+
    "\4\105\2\0\12\105\1\0\1\11\7\0\1\105\7\0\3\105\1\0"+
    "\10\105\2\0\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0"+
    "\5\105\2\0\11\105\2\0\2\105\2\0\3\105\10\0\2\105\4\0"+
    "\2\105\1\0\5\105\2\0\12\105\1\0\1\105\20\0\2\105\1\0"+
    "\6\105\3\0\3\105\1\0\4\105\3\0\2\105\1\0\1\105\1\0"+
    "\2\105\3\0\2\105\3\0\3\105\3\0\14\105\4\0\5\105\3\0"+
    "\3\105\1\0\4\105\2\0\1\105\6\0\1\105\16\0\12\105\11\0"+
    "\1\11\6\0\4\105\1\0\10\105\1\0\3\105\1\0\27\105\1\0"+
    "\20\105\3\0\10\105\1\0\3\105\1\0\4\105\7\0\2\105\1\0"+
    "\3\105\5\0\4\105\2\0\12\105\20\0\1\104\3\105\1\0\10\105"+
    "\1\0\3\105\1\0\27\105\1\0\12\105\1\0\5\105\2\0\11\105"+
    "\1\0\3\105\1\0\4\105\7\0\2\105\7\0\1\105\1\0\4\105"+
    "\2\0\12\105\1\0\2\105\16\0\3\105\1\0\10\105\1\0\3\105"+
    "\1\0\51\105\2\0\10\105\1\0\3\105\1\0\5\105\5\0\3\104"+
    "\1\105\7\0\5\105\2\0\12\105\12\0\6\105\2\0\2\105\1\0"+
    "\22\105\3\0\30\105\1\0\11\105\1\0\1\105\2\0\7\105\3\0"+
    "\1\105\4\0\6\105\1\0\1\105\1\0\10\105\6\0\12\105\2\0"+
    "\2\105\15\0\72\105\4\0\1\11\17\105\1\0\12\105\47\0\2\105"+
    "\1\0\1\105\2\0\2\105\1\0\1\105\2\0\1\105\6\0\4\105"+
    "\1\0\7\105\1\0\3\105\1\0\1\105\1\0\1\105\2\0\2\105"+
    "\1\0\15\105\1\0\3\105\2\0\5\105\1\0\1\105\1\0\6\105"+
    "\2\0\12\105\2\0\4\105\40\0\1\105\27\0\2\105\6\0\12\105"+
    "\13\0\1\105\1\0\1\105\1\0\1\105\4\0\12\105\1\0\44\105"+
    "\4\0\24\105\1\0\22\105\1\0\44\105\11\0\1\105\71\0\112\105"+
    "\6\0\116\105\2\0\46\105\1\0\1\105\5\0\1\105\2\0\53\105"+
    "\1\0\u014d\105\1\0\4\105\2\0\7\105\1\0\1\105\1\0\4\105"+
    "\2\0\51\105\1\0\4\105\2\0\41\105\1\0\4\105\2\0\7\105"+
    "\1\0\1\105\1\0\4\105\2\0\17\105\1\0\71\105\1\0\4\105"+
    "\2\0\103\105\2\0\3\105\40\0\20\105\20\0\126\105\2\0\6\105"+
    "\3\0\u026c\105\2\0\21\105\1\0\32\105\5\0\113\105\3\0\13\105"+
    "\7\0\15\105\1\0\7\105\13\0\25\105\13\0\24\105\14\0\15\105"+
    "\1\0\3\105\1\0\2\105\14\0\124\105\3\0\1\105\3\0\1\11"+
    "\2\105\2\0\12\105\41\0\3\105\1\11\1\0\12\105\6\0\130\105"+
    "\10\0\53\105\5\0\106\105\12\0\37\105\1\0\14\105\4\0\14\105"+
    "\12\0\50\105\2\0\5\105\13\0\54\105\4\0\32\105\6\0\12\105"+
    "\46\0\34\105\4\0\77\105\1\0\35\105\2\0\13\105\6\0\12\105"+
    "\15\0\1\105\10\0\16\105\1\104\101\0\114\105\4\0\12\105\21\0"+
    "\11\105\14\0\164\105\14\0\70\105\10\0\12\105\3\0\61\105\2\0"+
    "\11\104\107\0\3\105\1\0\43\105\1\0\2\105\6\0\366\105\5\0"+
    "\1\104\u011a\105\2\0\6\105\2\0\46\105\2\0\6\105\2\0\10\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\37\105\2\0\65\105"+
    "\1\0\7\105\1\0\1\105\3\0\3\105\1\0\7\105\3\0\4\105"+
    "\2\0\6\105\4\0\15\105\5\0\3\105\1\0\7\105\16\0\5\11"+
    "\30\0\1\75\1\75\5\11\20\0\2\105\23\0\1\105\13\0\5\11"+
    "\1\0\12\11\1\0\1\105\15\0\1\105\20\0\15\105\3\0\37\11"+
    "\21\0\15\105\4\104\1\105\3\104\14\105\21\0\1\105\4\0\1\105"+
    "\2\0\12\105\1\0\1\105\3\0\5\105\6\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\4\105\1\0\13\105\2\0\4\105\5\0\5\105"+
    "\4\0\1\105\21\0\51\105\u032d\0\64\104\u0716\0\57\105\1\0\57\105"+
    "\1\0\205\105\6\0\11\105\14\0\46\105\1\0\1\105\5\0\1\105"+
    "\2\0\70\105\7\0\1\105\17\0\30\105\11\0\7\105\1\0\7\105"+
    "\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105"+
    "\1\0\7\105\1\0\40\105\57\0\1\105\u01d5\0\3\105\31\0\17\105"+
    "\1\0\5\105\2\0\5\105\4\0\126\105\2\0\2\105\2\0\3\105"+
    "\1\0\132\105\1\0\4\105\5\0\51\105\3\0\136\105\21\0\33\105"+
    "\65\0\20\105\u0200\0\u19b6\105\112\0\u51d6\105\52\0\u048d\105\103\0\56\105"+
    "\2\0\u010d\105\3\0\34\105\24\0\60\105\3\104\1\0\12\105\1\0"+
    "\163\105\45\0\11\105\2\0\147\105\2\0\43\105\1\104\1\0\10\105"+
    "\77\0\61\105\20\0\1\11\7\0\64\105\14\0\105\105\1\104\12\0"+
    "\12\105\6\0\30\105\3\0\1\105\1\0\1\105\2\0\56\105\2\0"+
    "\44\105\14\0\35\105\3\0\101\105\16\0\13\105\6\0\37\105\1\0"+
    "\67\105\11\0\16\105\2\0\12\105\6\0\27\105\3\0\111\105\30\0"+
    "\3\105\2\0\20\105\2\0\5\105\12\0\6\105\2\0\6\105\2\0"+
    "\6\105\11\0\7\105\1\0\7\105\1\0\53\105\1\0\12\105\12\0"+
    "\173\105\1\0\2\105\2\0\12\105\6\0\u2ba4\105\14\0\27\105\4\0"+
    "\61\105\u2104\0\u016e\105\2\0\152\105\46\0\7\105\14\0\5\105\5\0"+
    "\14\105\1\0\15\105\1\0\5\105\1\0\1\105\1\0\2\105\1\0"+
    "\2\105\1\0\154\105\41\0\u016b\105\22\0\100\105\2\0\66\105\50\0"+
    "\14\105\1\11\3\0\20\105\20\0\20\105\3\0\2\105\30\0\3\105"+
    "\31\0\1\11\6\0\5\105\1\0\207\105\2\0\1\11\4\0\1\11"+
    "\13\0\12\105\7\0\32\105\4\0\1\105\1\0\32\105\13\0\131\105"+
    "\3\0\6\105\2\0\6\105\2\0\6\105\2\0\3\105\3\0\2\11"+
    "\3\0\2\11\22\0\3\11\4\0\14\105\1\0\32\105\1\0\23\105"+
    "\1\0\2\105\1\0\17\105\2\0\16\105\42\0\173\105\105\0\65\105"+
    "\210\0\1\105\202\0\35\105\3\0\61\105\17\0\1\105\37\0\40\105"+
    "\20\0\33\105\5\0\53\105\5\0\36\105\2\0\44\105\4\0\10\105"+
    "\1\0\5\105\52\0\236\105\2\0\12\105\6\0\44\104\4\0\44\104"+
    "\4\0\50\105\10\0\64\105\234\0\u0137\105\11\0\26\105\12\0\10\105"+
    "\230\0\6\105\2\0\1\105\1\0\54\105\1\0\2\105\3\0\1\105"+
    "\2\0\27\105\12\0\27\105\11\0\37\105\101\0\23\105\1\0\2\105"+
    "\12\0\26\105\12\0\32\105\106\0\70\105\6\0\2\105\100\0\4\105"+
    "\1\0\2\105\5\0\10\105\1\0\3\105\1\0\33\105\4\0\3\105"+
    "\4\0\1\105\40\0\35\105\3\0\35\105\43\0\10\105\1\0\36\105"+
    "\31\0\66\105\12\0\26\105\12\0\23\105\15\0\22\105\156\0\111\105"+
    "\67\0\63\105\15\0\63\105\u030d\0\107\105\37\0\12\105\17\0\74\105"+
    "\2\0\1\11\22\0\31\105\7\0\12\105\6\0\65\105\1\0\12\105"+
    "\20\0\44\105\2\0\1\105\11\0\105\105\5\0\3\105\3\0\13\105"+
    "\1\0\1\105\43\0\22\105\1\0\45\105\6\0\1\104\101\0\7\105"+
    "\1\0\1\105\1\0\4\105\1\0\17\105\1\0\12\105\7\0\73\105"+
    "\5\0\12\105\6\0\4\105\1\0\10\105\2\0\2\105\2\0\26\105"+
    "\1\0\7\105\1\0\2\105\1\0\5\105\2\0\11\105\2\0\2\105"+
    "\2\0\3\105\2\0\1\105\6\0\1\105\5\0\7\105\2\0\7\105"+
    "\3\0\5\105\213\0\113\104\5\0\12\104\46\0\106\105\1\0\1\105"+
    "\10\0\12\105\246\0\66\105\2\0\11\105\27\0\6\105\42\0\101\105"+
    "\3\0\1\105\13\0\12\105\46\0\70\105\10\0\12\105\66\0\32\105"+
    "\3\0\17\105\4\0\12\105\u0166\0\112\105\25\0\1\105\u01c0\0\71\105"+
    "\u0107\0\11\104\1\0\55\104\1\0\11\104\17\0\12\104\30\0\36\104"+
    "\2\0\26\104\1\0\16\104\u0349\0\u039a\105\146\0\157\105\21\0\304\105"+
    "\u0abc\0\u042f\105\u0fd1\0\u0247\105\u21b9\0\u0239\105\7\0\37\105\1\0\12\105"+
    "\146\0\36\105\2\0\5\105\13\0\67\105\11\0\4\105\14\0\12\105"+
    "\11\0\25\105\5\0\23\105\u0370\0\105\105\13\0\57\105\20\0\21\105"+
    "\100\0\1\104\37\0\u17ed\104\23\0\u02f3\104\u250d\0\2\105\u0bfe\0\153\105"+
    "\5\0\15\105\3\0\11\105\7\0\12\105\3\0\2\105\1\0\4\11"+
    "\u14c1\0\5\105\3\0\6\105\10\11\10\105\2\0\7\105\36\0\4\105"+
    "\224\0\3\105\u01bb\0\125\105\1\0\107\105\1\0\2\105\2\0\1\105"+
    "\2\0\2\105\2\0\4\105\1\0\14\105\1\0\1\105\1\0\7\105"+
    "\1\0\101\105\1\0\4\105\2\0\10\105\1\0\7\105\1\0\34\105"+
    "\1\0\4\105\1\0\5\105\1\0\1\105\3\0\7\105\1\0\u0154\105"+
    "\2\0\31\105\1\0\31\105\1\0\37\105\1\0\31\105\1\0\37\105"+
    "\1\0\31\105\1\0\37\105\1\0\31\105\1\0\37\105\1\0\31\105"+
    "\1\0\10\105\2\0\62\105\u0200\0\67\105\4\0\62\105\10\0\1\105"+
    "\16\0\1\105\26\0\5\105\1\0\17\105\u0550\0\7\104\1\0\21\104"+
    "\2\0\7\104\1\0\2\104\1\0\5\104\u07d5\0\305\105\13\0\7\105"+
    "\51\0\113\104\5\0\12\104\u04a6\0\4\105\1\0\33\105\1\0\2\105"+
    "\1\0\1\105\2\0\1\105\1\0\12\105\1\0\4\105\1\0\1\105"+
    "\1\0\1\105\6\0\1\105\4\0\1\105\1\0\1\105\1\0\1\105"+
    "\1\0\3\105\1\0\2\105\1\0\1\105\2\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\2\105\1\0\1\105"+
    "\2\0\4\105\1\0\7\105\1\0\4\105\1\0\4\105\1\0\1\105"+
    "\1\0\12\105\1\0\21\105\5\0\3\105\1\0\5\105\1\0\21\105"+
    "\u0274\0\32\104\6\0\32\104\6\0\32\104\u0e76\0\ua6d7\105\51\0\u1035\105"+
    "\13\0\336\105\2\0\u1682\105\u295e\0\u021e\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\105\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\5\1\1\4\1\5\1\6"+
    "\1\7\5\1\13\0\1\10\30\0\1\11\40\0\1\12"+
    "\35\0\1\13\16\0\1\14\14\0\1\15\1\0\1\15"+
    "\4\0\1\15\2\0\1\15\37\0\2\16\1\17\1\0"+
    "\1\17\2\0\1\16\35\0\1\20\23\0\1\21\1\22"+
    "\2\0\1\23\3\0\1\24\1\25\2\0\1\26\2\0"+
    "\1\27\7\0\1\30\1\0\1\31\1\32\1\33\1\31"+
    "\1\0\1\33\1\32\1\31\4\0\1\34\1\35\3\0"+
    "\1\36\3\0\1\37\1\0\1\40\5\0\2\41\4\0"+
    "\1\42\1\43\1\44\16\0\1\45\1\46\1\47\1\0"+
    "\1\50\1\0\1\51\25\0\1\52\11\0\1\53\11\0"+
    "\1\54\4\0\1\55\1\56\15\0\1\57\17\0\1\60"+
    "\13\0\1\61\3\0\1\62\10\0\1\63\1\0\1\64"+
    "\4\0\1\65\1\0\1\66\4\0\1\67\1\70\3\0"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\222\0\u0124\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\222\0\222\0\222\0\222\0\u02da"+
    "\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522"+
    "\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\222"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9"+
    "\0\222\0\u0e42\0\u0e8b\0\u03fe\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f"+
    "\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687"+
    "\0\u16d0\0\222\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\222"+
    "\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d"+
    "\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\222\0\u235c"+
    "\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u287e\0\222\0\u275a\0\u28c7\0\u27a3\0\u2910\0\u2959"+
    "\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1"+
    "\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9"+
    "\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031"+
    "\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279"+
    "\0\u32c2\0\222\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478"+
    "\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0"+
    "\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908"+
    "\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3b50"+
    "\0\u3b99\0\u3be2\0\222\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f"+
    "\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97"+
    "\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\222\0\222"+
    "\0\u4196\0\u41df\0\222\0\u4228\0\u4271\0\u42ba\0\222\0\222"+
    "\0\u4303\0\u434c\0\222\0\u4395\0\u43de\0\222\0\u4427\0\u4470"+
    "\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\222\0\u4626\0\u466f"+
    "\0\u46b8\0\u4701\0\222\0\u474a\0\u466f\0\u4793\0\u4701\0\u47dc"+
    "\0\u4825\0\u486e\0\u48b7\0\222\0\222\0\u4900\0\u4949\0\u4992"+
    "\0\222\0\u49db\0\u4a24\0\u4a6d\0\222\0\u4ab6\0\222\0\u4aff"+
    "\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\222\0\u4cb5\0\u4cfe"+
    "\0\u4d47\0\u4d90\0\u4dd9\0\222\0\222\0\u4e22\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u50fc"+
    "\0\u5145\0\u518e\0\u51d7\0\222\0\222\0\222\0\u5220\0\222"+
    "\0\u5269\0\222\0\u52b2\0\u52fb\0\u5344\0\u538d\0\u53d6\0\u541f"+
    "\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u558c\0\u55d5\0\u561e\0\u5667"+
    "\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u57d4\0\u581d\0\u5866\0\222"+
    "\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae"+
    "\0\u5af7\0\222\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad"+
    "\0\u5cf6\0\u5d3f\0\u5d88\0\222\0\u5dd1\0\u5e1a\0\u5e63\0\u5eac"+
    "\0\222\0\222\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u6019\0\u6062"+
    "\0\u60ab\0\u60f4\0\u613d\0\u6186\0\u61cf\0\u6218\0\u6261\0\222"+
    "\0\u62aa\0\u62f3\0\u633c\0\u6385\0\u63ce\0\u6417\0\u6460\0\u64a9"+
    "\0\u64f2\0\u653b\0\u6584\0\u65cd\0\u6616\0\u665f\0\u66a8\0\222"+
    "\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815\0\u685e\0\u68a7\0\u68f0"+
    "\0\u6939\0\u6982\0\u69cb\0\222\0\u6a14\0\u6a5d\0\u6aa6\0\222"+
    "\0\u6aef\0\u6b38\0\u6b81\0\u6bca\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee"+
    "\0\222\0\u6d37\0\222\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b\0\222"+
    "\0\u6ea4\0\222\0\u6eed\0\u6f36\0\u6f7f\0\u6fc8\0\222\0\222"+
    "\0\u7011\0\u705a\0\u70a3\0\222\0\222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\4\3\1\6\2\3\1\7\3\3"+
    "\1\10\1\11\1\3\1\12\6\3\1\13\1\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\10\1\3\1\11\1\13"+
    "\10\3\1\7\5\3\1\12\3\3\1\21\4\3\1\22"+
    "\2\3\1\5\13\3\1\4\2\5\4\3\1\6\2\3"+
    "\1\7\3\3\1\10\1\11\1\3\1\12\6\3\1\13"+
    "\1\3\1\14\1\15\1\16\1\17\1\20\1\10\1\3"+
    "\1\11\1\13\10\3\1\7\5\3\1\12\3\3\1\21"+
    "\4\3\1\22\2\3\1\5\1\3\1\23\1\24\7\3"+
    "\113\0\1\5\116\0\1\25\2\0\1\26\1\27\1\0"+
    "\1\30\6\0\1\31\16\0\1\30\3\0\1\31\3\0"+
    "\1\26\1\0\1\27\42\0\1\32\3\0\1\27\10\0"+
    "\1\33\22\0\1\33\5\0\1\27\42\0\1\30\5\0"+
    "\1\30\25\0\1\30\54\0\1\34\14\0\1\34\22\0"+
    "\1\34\50\0\1\35\2\0\1\35\40\0\1\35\44\0"+
    "\1\36\2\0\1\36\40\0\1\36\34\0\37\37\1\40"+
    "\1\41\1\42\1\43\1\37\1\44\1\37\1\45\1\46"+
    "\1\47\1\37\1\50\1\37\1\51\1\37\1\52\1\53"+
    "\1\37\1\54\1\55\26\37\4\56\1\57\1\60\1\61"+
    "\1\60\1\61\1\56\1\61\30\56\1\62\1\56\1\61"+
    "\1\56\1\63\1\64\2\56\1\65\2\56\1\66\2\56"+
    "\1\67\1\70\4\56\1\71\2\56\1\72\13\56\1\60"+
    "\2\56\4\0\2\73\1\0\1\73\3\0\2\73\3\0"+
    "\1\73\5\0\1\73\13\0\1\73\7\0\3\73\1\0"+
    "\2\73\14\0\1\73\4\0\1\73\4\0\1\73\27\0"+
    "\1\74\110\0\1\75\73\0\1\76\3\0\1\77\1\100"+
    "\5\0\1\101\1\102\5\0\1\103\14\0\1\100\5\0"+
    "\1\101\1\77\2\0\1\102\2\0\1\103\34\0\1\104"+
    "\12\0\1\105\6\0\1\103\22\0\1\105\6\0\1\103"+
    "\34\0\1\77\3\0\1\77\41\0\1\77\42\0\1\102"+
    "\13\0\1\102\34\0\1\102\37\0\1\106\4\0\1\100"+
    "\5\0\1\107\23\0\1\100\5\0\1\107\43\0\1\110"+
    "\3\0\1\77\6\0\1\107\31\0\1\107\1\77\42\0"+
    "\1\107\12\0\1\107\31\0\1\107\43\0\1\100\4\0"+
    "\1\100\31\0\1\100\51\0\1\105\12\0\1\105\31\0"+
    "\1\105\43\0\1\103\21\0\1\103\31\0\1\103\24\0"+
    "\37\37\1\40\110\37\1\40\1\37\1\111\106\37\1\40"+
    "\6\37\1\112\101\37\1\40\10\37\1\113\77\37\1\40"+
    "\15\37\1\114\72\37\1\40\7\37\1\115\100\37\1\40"+
    "\13\37\1\116\74\37\1\40\2\37\1\117\4\37\1\120"+
    "\100\37\1\40\4\37\1\121\103\37\1\40\1\122\22\37"+
    "\1\123\1\124\63\37\1\40\4\37\1\125\17\37\1\126"+
    "\63\37\1\40\2\37\1\127\105\37\1\40\4\37\1\130"+
    "\103\37\1\40\14\37\1\131\34\37\67\56\1\71\110\56"+
    "\1\132\25\56\2\133\1\56\1\133\57\56\1\132\16\56"+
    "\1\133\6\56\2\134\1\61\1\134\1\61\22\134\5\56"+
    "\26\134\1\56\1\71\3\134\1\56\1\134\2\56\3\134"+
    "\1\56\1\134\1\56\2\134\51\56\1\135\17\56\1\71"+
    "\102\56\1\136\5\56\1\71\1\56\1\137\66\56\1\140"+
    "\17\56\1\71\63\56\1\141\24\56\1\71\63\56\1\142"+
    "\24\56\1\71\63\56\1\143\24\56\1\71\75\56\1\144"+
    "\12\56\1\71\62\56\1\145\25\56\1\71\21\56\4\0"+
    "\2\146\1\0\1\146\3\0\2\146\3\0\1\146\5\0"+
    "\1\146\13\0\1\146\7\0\3\146\1\0\2\146\14\0"+
    "\1\146\4\0\1\146\4\0\1\146\24\0\1\147\76\0"+
    "\1\150\2\0\1\151\1\0\1\152\1\153\7\0\1\154"+
    "\1\0\1\155\13\0\1\153\2\0\1\152\2\0\1\154"+
    "\1\0\1\151\10\0\1\155\33\0\1\156\4\0\1\156"+
    "\31\0\1\156\51\0\1\155\17\0\1\155\34\0\1\155"+
    "\33\0\1\157\2\0\1\151\1\0\1\160\31\0\1\160"+
    "\4\0\1\151\44\0\1\154\15\0\1\154\23\0\1\154"+
    "\46\0\1\153\5\0\1\153\25\0\1\153\54\0\1\161"+
    "\2\0\1\151\2\0\1\153\25\0\1\153\7\0\1\151"+
    "\44\0\1\151\2\0\1\151\40\0\1\151\44\0\1\162"+
    "\4\0\1\160\12\0\1\155\16\0\1\160\15\0\1\155"+
    "\33\0\1\160\4\0\1\160\31\0\1\160\51\0\1\152"+
    "\4\0\1\152\31\0\1\152\41\0\37\37\1\40\2\37"+
    "\1\163\105\37\1\40\1\37\1\164\106\37\1\40\7\37"+
    "\1\165\100\37\1\40\7\37\1\166\100\37\1\40\10\37"+
    "\1\167\77\37\1\170\110\37\1\40\30\37\1\171\57\37"+
    "\1\40\10\37\1\172\77\37\1\40\15\37\1\173\72\37"+
    "\1\40\16\37\1\174\71\37\1\40\15\37\1\175\72\37"+
    "\1\40\7\37\1\176\1\177\77\37\1\40\24\37\1\200"+
    "\63\37\1\40\14\37\1\201\73\37\1\40\16\37\1\202"+
    "\71\37\1\40\13\37\1\203\74\37\1\40\13\37\1\204"+
    "\7\37\1\205\25\37\4\56\2\206\1\56\1\206\57\56"+
    "\1\132\16\56\1\206\6\56\2\134\1\61\1\134\1\61"+
    "\22\134\5\56\26\134\1\56\1\207\3\134\1\56\1\134"+
    "\2\56\3\134\1\56\1\134\1\56\2\134\55\56\1\210"+
    "\13\56\1\71\75\56\1\211\12\56\1\71\106\56\1\212"+
    "\1\56\1\71\71\56\1\213\16\56\1\71\76\56\1\214"+
    "\11\56\1\71\61\56\1\215\26\56\1\71\61\56\1\216"+
    "\26\56\1\71\76\56\1\217\11\56\1\71\67\56\1\220"+
    "\20\56\1\71\21\56\4\0\2\221\1\0\1\221\3\0"+
    "\2\221\3\0\1\221\5\0\1\221\13\0\1\221\7\0"+
    "\3\221\1\0\2\221\14\0\1\221\4\0\1\221\4\0"+
    "\1\221\23\0\1\222\60\0\1\223\16\0\1\224\5\0"+
    "\1\225\4\0\1\226\1\227\1\0\1\230\1\231\11\0"+
    "\1\231\2\0\1\225\5\0\1\230\2\0\1\226\3\0"+
    "\1\227\37\0\1\227\13\0\1\227\34\0\1\227\37\0"+
    "\1\232\5\0\1\225\7\0\1\230\15\0\1\225\5\0"+
    "\1\230\46\0\1\233\12\0\1\233\31\0\1\233\43\0"+
    "\1\234\12\0\1\234\31\0\1\234\43\0\1\231\16\0"+
    "\1\231\11\0\1\231\57\0\1\225\5\0\1\225\25\0"+
    "\1\225\54\0\1\235\13\0\1\227\1\0\1\230\23\0"+
    "\1\230\6\0\1\227\37\0\1\230\15\0\1\230\23\0"+
    "\1\230\46\0\1\236\12\0\1\233\1\227\30\0\1\233"+
    "\3\0\1\227\37\0\1\237\15\0\1\230\1\231\11\0"+
    "\1\231\10\0\1\230\36\0\37\37\1\40\3\37\1\240"+
    "\104\37\1\40\14\37\1\241\73\37\1\40\25\37\1\242"+
    "\62\37\1\40\23\37\1\243\64\37\1\40\7\37\1\244"+
    "\100\37\1\40\10\37\1\245\77\37\1\40\1\37\1\246"+
    "\106\37\1\40\15\37\1\247\72\37\1\40\20\37\1\250"+
    "\67\37\1\40\2\37\1\251\105\37\1\40\1\252\107\37"+
    "\1\40\1\37\1\253\106\37\1\40\4\37\1\254\103\37"+
    "\1\40\6\37\1\255\101\37\1\40\20\37\1\256\67\37"+
    "\1\40\7\37\1\257\100\37\1\40\15\37\1\260\72\37"+
    "\1\40\7\37\1\261\41\37\4\56\2\262\1\56\1\262"+
    "\57\56\1\132\16\56\1\262\44\56\1\263\24\56\1\71"+
    "\104\56\1\264\3\56\1\71\62\56\1\265\25\56\1\71"+
    "\62\56\1\266\25\56\1\71\63\56\1\267\24\56\1\71"+
    "\71\56\1\270\16\56\1\71\62\56\1\271\25\56\1\71"+
    "\76\56\1\272\11\56\1\71\71\56\1\273\16\56\1\71"+
    "\21\56\4\0\2\274\1\0\1\274\3\0\2\274\3\0"+
    "\1\274\5\0\1\274\13\0\1\274\7\0\3\274\1\0"+
    "\2\274\14\0\1\274\4\0\1\274\4\0\1\274\104\0"+
    "\1\223\41\0\1\275\65\0\1\276\6\0\1\277\1\300"+
    "\6\0\1\301\10\0\1\277\1\301\1\300\56\0\1\277"+
    "\6\0\1\277\20\0\1\277\60\0\1\302\7\0\1\302"+
    "\21\0\1\302\56\0\1\303\7\0\1\303\21\0\1\303"+
    "\56\0\1\301\16\0\1\301\11\0\1\301\57\0\1\304"+
    "\7\0\1\304\21\0\1\304\56\0\1\305\6\0\1\277"+
    "\7\0\1\301\10\0\1\277\1\301\57\0\1\306\7\0"+
    "\1\303\6\0\1\301\11\0\1\301\1\303\56\0\1\307"+
    "\7\0\1\304\6\0\1\301\11\0\1\301\1\304\46\0"+
    "\37\37\1\40\4\37\1\310\7\37\1\311\73\37\1\40"+
    "\15\37\1\312\72\37\1\40\1\37\1\313\106\37\1\40"+
    "\2\37\1\314\105\37\1\40\4\37\1\315\103\37\1\40"+
    "\4\37\1\316\103\37\1\40\24\37\1\317\63\37\1\40"+
    "\14\37\1\320\73\37\1\40\4\37\1\321\103\37\1\40"+
    "\23\37\1\322\64\37\1\40\2\37\1\323\105\37\1\40"+
    "\15\37\1\324\72\37\1\40\15\37\1\325\72\37\1\40"+
    "\2\37\1\326\105\37\1\40\14\37\1\327\73\37\1\40"+
    "\17\37\1\330\70\37\1\40\2\37\1\331\105\37\1\40"+
    "\1\332\50\37\4\56\2\333\1\334\1\333\57\56\1\132"+
    "\16\56\1\333\46\56\1\335\22\56\1\71\63\56\1\336"+
    "\24\56\1\71\70\56\1\337\17\56\1\71\105\56\1\340"+
    "\2\56\1\71\77\56\1\341\10\56\1\71\76\56\1\342"+
    "\11\56\1\71\110\56\1\343\75\56\1\344\12\56\1\71"+
    "\70\56\1\345\17\56\1\71\21\56\4\0\2\346\1\0"+
    "\1\346\3\0\2\346\3\0\1\346\5\0\1\346\13\0"+
    "\1\346\7\0\3\346\1\0\2\346\14\0\1\346\4\0"+
    "\1\346\4\0\1\346\35\0\1\347\65\0\1\350\7\0"+
    "\1\351\4\0\1\352\14\0\1\351\5\0\1\352\50\0"+
    "\1\351\7\0\1\351\21\0\1\351\56\0\1\353\14\0"+
    "\1\353\22\0\1\353\50\0\1\354\14\0\1\354\22\0"+
    "\1\354\50\0\1\355\14\0\1\355\22\0\1\355\50\0"+
    "\1\356\14\0\1\356\22\0\1\356\50\0\1\357\7\0"+
    "\1\351\4\0\1\354\14\0\1\351\5\0\1\354\50\0"+
    "\1\360\14\0\1\360\22\0\1\360\50\0\1\361\14\0"+
    "\1\361\22\0\1\361\40\0\37\37\1\40\5\37\1\362"+
    "\102\37\1\40\5\37\1\363\102\37\1\40\7\37\1\364"+
    "\100\37\1\40\2\37\1\365\105\37\1\40\1\366\107\37"+
    "\1\367\110\37\1\370\110\37\1\40\4\37\1\371\103\37"+
    "\1\40\15\37\1\372\72\37\1\373\110\37\1\40\14\37"+
    "\1\374\73\37\1\40\14\37\1\375\73\37\1\40\14\37"+
    "\1\376\73\37\1\377\110\37\1\u0100\110\37\1\40\5\37"+
    "\1\u0101\102\37\1\40\7\37\1\u0102\100\37\1\u0103\110\37"+
    "\1\40\14\37\1\u0104\34\37\4\56\2\333\1\56\1\333"+
    "\57\56\1\132\16\56\1\333\6\56\1\u0105\2\56\1\u0105"+
    "\57\56\1\71\110\56\1\u0106\61\56\1\u0107\26\56\1\71"+
    "\63\56\1\u0108\24\56\1\71\65\56\1\u0109\22\56\1\71"+
    "\101\56\1\u010a\6\56\1\71\75\56\1\u010b\12\56\1\71"+
    "\100\56\1\u010c\7\56\1\71\100\56\1\u010d\7\56\1\71"+
    "\21\56\4\0\2\u010e\1\0\1\u010e\3\0\2\u010e\3\0"+
    "\1\u010e\5\0\1\u010e\13\0\1\u010e\7\0\3\u010e\1\0"+
    "\2\u010e\14\0\1\u010e\4\0\1\u010e\4\0\1\u010e\6\0"+
    "\2\u010f\1\0\1\u010f\3\0\20\u010f\5\0\5\u010f\1\0"+
    "\20\u010f\2\0\3\u010f\1\0\1\u010f\3\0\2\u010f\1\0"+
    "\1\u010f\2\0\1\u010f\12\0\1\u0110\2\0\1\u0111\2\0"+
    "\1\u0112\2\0\1\u0113\1\0\1\u0114\20\0\1\u0112\1\0"+
    "\1\u0113\5\0\1\u0111\1\u0114\43\0\1\u0113\10\0\1\u0113"+
    "\24\0\1\u0113\52\0\1\u0115\2\0\1\u0111\2\0\1\u0112"+
    "\4\0\1\u0114\20\0\1\u0112\7\0\1\u0111\1\u0114\43\0"+
    "\1\u0116\2\0\1\u0111\7\0\1\u0114\30\0\1\u0111\1\u0114"+
    "\43\0\1\u0112\5\0\1\u0112\25\0\1\u0112\54\0\1\u0114"+
    "\12\0\1\u0114\31\0\1\u0114\43\0\1\u0111\2\0\1\u0111"+
    "\40\0\1\u0111\44\0\1\u0117\5\0\1\u0112\2\0\1\u0113"+
    "\22\0\1\u0112\1\0\1\u0113\52\0\1\u0115\5\0\1\u0112"+
    "\4\0\1\u0114\20\0\1\u0112\10\0\1\u0114\43\0\1\u0112"+
    "\2\0\1\u0111\2\0\1\u0112\25\0\1\u0112\7\0\1\u0111"+
    "\34\0\37\37\1\40\6\37\1\u0118\101\37\1\40\22\37"+
    "\1\u0119\65\37\1\40\4\37\1\u011a\103\37\1\40\10\37"+
    "\1\u011b\77\37\1\u011c\110\37\1\u011d\110\37\1\40\5\37"+
    "\1\u011e\102\37\1\40\15\37\1\u011f\72\37\1\40\16\37"+
    "\1\u0120\71\37\1\u0121\110\37\1\40\16\37\1\u0122\2\37"+
    "\1\u0123\66\37\1\40\16\37\1\u0124\71\37\1\u0125\51\37"+
    "\5\56\1\u0126\1\56\1\u0126\57\56\1\71\16\56\1\u0126"+
    "\71\56\1\u0127\76\56\1\u0128\11\56\1\71\110\56\1\u011d"+
    "\75\56\1\u0129\12\56\1\71\76\56\1\u012a\11\56\1\71"+
    "\65\56\1\u012b\22\56\1\71\70\56\1\u012c\17\56\1\71"+
    "\21\56\1\0\1\u012d\1\u012e\1\0\2\u010f\1\u012f\1\u010f"+
    "\2\0\1\u0130\20\u010f\1\u0130\4\0\5\u010f\1\u012f\20\u010f"+
    "\2\0\3\u010f\1\u0130\1\u010f\3\u012e\2\u010f\1\u0131\1\u010f"+
    "\2\u0132\1\u010f\1\u0130\1\u012f\10\0\1\u0133\5\0\1\u0133"+
    "\2\0\1\u0134\22\0\1\u0133\1\0\1\u0134\52\0\1\u0135"+
    "\10\0\1\u0135\24\0\1\u0135\52\0\1\u0134\10\0\1\u0134"+
    "\24\0\1\u0134\52\0\1\u0133\5\0\1\u0133\25\0\1\u0133"+
    "\54\0\1\u0133\5\0\1\u0133\2\0\1\u0135\22\0\1\u0133"+
    "\1\0\1\u0135\42\0\37\37\1\40\7\37\1\u0136\100\37"+
    "\1\40\14\37\1\u0137\73\37\1\40\5\37\1\u0138\102\37"+
    "\1\40\14\37\1\u0139\73\37\1\40\6\37\1\u013a\7\37"+
    "\1\u013b\3\37\1\u013c\65\37\1\40\5\37\1\u013d\102\37"+
    "\1\40\7\37\1\u013e\100\37\1\40\15\37\1\u013f\72\37"+
    "\1\40\4\37\1\u0140\103\37\1\40\14\37\1\u0141\34\37"+
    "\6\56\1\u0142\60\56\1\71\74\56\1\u0143\13\56\1\71"+
    "\110\56\1\u0144\110\56\1\u0145\110\56\1\u0146\77\56\1\u0147"+
    "\10\56\1\71\21\56\2\0\1\u0148\107\0\1\u012d\1\u012e"+
    "\1\0\2\u010f\1\u012f\1\u010f\2\0\1\u0130\20\u010f\1\u0130"+
    "\4\0\5\u010f\1\u012f\20\u010f\2\0\3\u010f\1\u0130\1\u010f"+
    "\3\u012e\2\u010f\1\0\1\u010f\2\u0132\1\u010f\1\u0130\1\u012f"+
    "\1\0\1\u012d\1\u012e\1\0\4\u0130\2\0\22\u0130\4\0"+
    "\26\u0130\2\0\5\u0130\3\u012e\2\u0130\1\0\1\u0130\2\0"+
    "\3\u0130\1\0\1\u012d\1\u012e\1\0\1\u0149\3\u0130\2\0"+
    "\22\u0130\4\0\26\u0130\2\0\5\u0130\3\u012e\2\u0130\1\u0131"+
    "\1\u0130\2\0\3\u0130\4\0\2\u010f\1\u0132\1\u010f\3\0"+
    "\20\u010f\5\0\5\u010f\1\u0132\20\u010f\2\0\3\u010f\1\0"+
    "\1\u010f\3\0\2\u010f\1\0\1\u010f\2\u0132\1\u010f\1\0"+
    "\1\u0132\10\0\1\u014a\10\0\1\u014a\24\0\1\u014a\42\0"+
    "\37\37\1\40\10\37\1\u014b\77\37\1\40\23\37\1\u014c"+
    "\64\37\1\40\16\37\1\u014d\2\37\1\u014e\66\37\1\40"+
    "\6\37\1\u014f\101\37\1\40\7\37\1\u0150\100\37\1\40"+
    "\4\37\1\u0151\103\37\1\40\14\37\1\u0152\73\37\1\40"+
    "\16\37\1\u0153\71\37\1\40\4\37\1\u0154\103\37\1\40"+
    "\2\37\1\u0155\105\37\1\40\13\37\1\u0156\74\37\1\40"+
    "\15\37\1\u0157\33\37\4\56\1\u0158\2\56\1\u0158\57\56"+
    "\1\71\75\56\1\u0159\12\56\1\71\75\56\1\u015a\12\56"+
    "\1\71\21\56\1\0\1\u012d\1\u012e\1\0\2\u0130\1\u015b"+
    "\1\u0130\2\0\22\u0130\4\0\26\u0130\2\0\5\u0130\3\u012e"+
    "\2\u0130\1\0\1\u0130\2\0\3\u0130\37\37\1\40\7\37"+
    "\1\u015c\100\37\1\40\7\37\1\u015d\100\37\1\40\15\37"+
    "\1\u015e\72\37\1\40\4\37\1\u015f\103\37\1\u0160\110\37"+
    "\1\40\10\37\1\u0161\77\37\1\40\21\37\1\u0162\66\37"+
    "\1\40\23\37\1\u0163\64\37\1\40\4\37\1\u0164\103\37"+
    "\1\40\1\u0165\107\37\1\40\14\37\1\u0166\73\37\1\40"+
    "\7\37\1\u0167\100\37\1\40\5\37\1\u0168\43\37\5\56"+
    "\1\u0169\1\56\1\u0169\57\56\1\71\16\56\1\u0169\71\56"+
    "\1\u016a\76\56\1\u016b\11\56\1\71\21\56\1\0\1\u012d"+
    "\1\u012e\1\0\4\u0130\2\0\22\u0130\4\0\26\u0130\2\0"+
    "\5\u0130\3\u012e\2\u0130\1\0\1\u0130\2\0\1\u0131\2\u0130"+
    "\37\37\1\40\4\37\1\u016c\103\37\1\40\1\u016d\107\37"+
    "\1\40\2\37\1\u016e\105\37\1\40\13\37\1\u016f\74\37"+
    "\1\40\7\37\1\u0170\100\37\1\40\22\37\1\u0171\65\37"+
    "\1\40\7\37\1\u0172\100\37\1\40\21\37\1\u0173\66\37"+
    "\1\u0174\110\37\1\40\16\37\1\u0175\71\37\1\40\17\37"+
    "\1\u0176\70\37\1\40\16\37\1\u0177\3\37\1\u0178\26\37"+
    "\67\56\1\u0179\110\56\1\u017a\21\56\37\37\1\40\5\37"+
    "\1\u017b\102\37\1\40\14\37\1\u017c\73\37\1\40\14\37"+
    "\1\u017d\73\37\1\40\7\37\1\u017e\100\37\1\40\4\37"+
    "\1\u017f\103\37\1\40\4\37\1\u0180\103\37\1\40\1\u0181"+
    "\107\37\1\40\22\37\1\u0182\65\37\1\40\7\37\1\u0183"+
    "\100\37\1\40\7\37\1\u0184\100\37\1\40\4\37\1\u0185"+
    "\103\37\1\40\14\37\1\u0186\73\37\1\40\11\37\1\u0187"+
    "\76\37\1\u0188\110\37\1\40\16\37\1\u0189\71\37\1\40"+
    "\17\37\1\u018a\70\37\1\40\5\37\1\u018b\102\37\1\40"+
    "\1\u018c\107\37\1\40\14\37\1\u018d\73\37\1\40\4\37"+
    "\1\u018e\103\37\1\40\4\37\1\u018f\103\37\1\40\16\37"+
    "\1\u0190\71\37\1\40\21\37\1\u0191\66\37\1\40\23\37"+
    "\1\u0192\64\37\1\40\2\37\1\u0193\105\37\1\40\7\37"+
    "\1\u0194\100\37\1\40\7\37\1\u0195\100\37\1\40\11\37"+
    "\1\u0196\76\37\1\40\2\37\1\u0197\105\37\1\u0198\110\37"+
    "\1\40\1\u0199\107\37\1\40\1\u019a\107\37\1\40\14\37"+
    "\1\u019b\73\37\1\40\22\37\1\u019c\65\37\1\40\7\37"+
    "\1\u019d\100\37\1\40\12\37\1\u019e\75\37\1\40\4\37"+
    "\1\u019f\103\37\1\40\16\37\1\u01a0\71\37\1\40\2\37"+
    "\1\u01a1\105\37\1\40\1\u01a2\107\37\1\40\2\37\1\u01a3"+
    "\105\37\1\u01a4\110\37\1\40\16\37\1\u01a5\71\37\1\40"+
    "\4\37\1\u01a6\103\37\1\40\1\u01a7\107\37\1\u01a8\110\37"+
    "\1\40\1\u01a9\107\37\1\40\14\37\1\u01aa\73\37\1\40"+
    "\12\37\1\u01ab\75\37\1\40\10\37\1\u01ac\77\37\1\40"+
    "\1\u01ad\107\37\1\40\7\37\1\u01ae\100\37\1\40\1\u01af"+
    "\107\37\1\40\14\37\1\u01b0\73\37\1\u01b1\110\37\1\40"+
    "\16\37\1\u01b2\71\37\1\u01b3\110\37\1\40\2\37\1\u01b4"+
    "\105\37\1\40\10\37\1\u01b5\77\37\1\40\4\37\1\u01b6"+
    "\103\37\1\40\2\37\1\u01b7\105\37\1\u01b8\110\37\1\40"+
    "\7\37\1\u01b9\100\37\1\u01ba\110\37\1\40\2\37\1\u01bb"+
    "\105\37\1\40\1\u01bc\107\37\1\40\1\u01bd\107\37\1\40"+
    "\4\37\1\u01be\103\37\1\u01bf\110\37\1\u01c0\110\37\1\40"+
    "\10\37\1\u01c1\77\37\1\40\1\u01c2\107\37\1\40\2\37"+
    "\1\u01c3\105\37\1\u01c4\110\37\1\u01c5\51\37";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28908];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\6\1\4\11\5\1\13\0"+
    "\1\11\30\0\1\11\40\0\1\11\35\0\1\11\16\0"+
    "\1\11\14\0\1\1\1\0\1\1\4\0\1\11\2\0"+
    "\1\1\37\0\3\1\1\0\1\11\2\0\1\1\35\0"+
    "\1\11\23\0\2\11\2\0\1\11\3\0\2\11\2\0"+
    "\1\11\2\0\1\11\7\0\1\11\1\0\3\1\1\11"+
    "\1\0\3\1\4\0\2\11\3\0\1\11\3\0\1\11"+
    "\1\0\1\11\5\0\1\1\1\11\4\0\1\1\2\11"+
    "\16\0\3\11\1\0\1\11\1\0\1\11\25\0\1\11"+
    "\11\0\1\11\11\0\1\11\4\0\2\11\15\0\1\11"+
    "\17\0\1\11\13\0\1\11\3\0\1\11\10\0\1\11"+
    "\1\0\1\11\4\0\1\11\1\0\1\11\4\0\2\11"+
    "\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  ClienteFrame clienteFrame;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  public void iniciarFrame(ClienteFrame clienteFrame){
        this.clienteFrame=clienteFrame;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3052) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { clienteFrame.mostrarError("lexico",yyline+1,yycolumn+1,yytext());clienteFrame.setSeDebeEnviarElTexto(false);
            } 
            // fall through
          case 59: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 60: break;
          case 3: 
            { return symbol(DIAGONAL_RECTA,yytext());
            } 
            // fall through
          case 61: break;
          case 4: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 62: break;
          case 5: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 63: break;
          case 6: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 64: break;
          case 7: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 65: break;
          case 8: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION_ETIQUETA,yytext());
            } 
            // fall through
          case 66: break;
          case 9: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION,yytext());
            } 
            // fall through
          case 67: break;
          case 10: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 68: break;
          case 11: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 69: break;
          case 12: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 70: break;
          case 13: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 71: break;
          case 14: 
            { return symbol(ACCION,yytext());
            } 
            // fall through
          case 72: break;
          case 15: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 73: break;
          case 16: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 74: break;
          case 17: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 75: break;
          case 18: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 76: break;
          case 19: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 77: break;
          case 20: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 78: break;
          case 21: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 79: break;
          case 22: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 80: break;
          case 23: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 81: break;
          case 24: 
            { System.out.println("Codigo color:"+yytext());return symbol(CODIGO_COLOR,yytext());
            } 
            // fall through
          case 82: break;
          case 25: 
            { return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 83: break;
          case 26: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 84: break;
          case 27: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 85: break;
          case 28: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 86: break;
          case 29: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 87: break;
          case 30: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 88: break;
          case 31: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 89: break;
          case 32: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 90: break;
          case 33: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 91: break;
          case 34: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 92: break;
          case 35: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 93: break;
          case 36: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 94: break;
          case 37: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 95: break;
          case 38: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 96: break;
          case 39: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 97: break;
          case 40: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 98: break;
          case 41: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 99: break;
          case 42: 
            { return symbol(ETIQUETAS_TEXTO_MENU,yytext());
            } 
            // fall through
          case 100: break;
          case 43: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 101: break;
          case 44: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 102: break;
          case 45: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 103: break;
          case 46: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 104: break;
          case 47: 
            { return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 105: break;
          case 48: 
            { return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 106: break;
          case 49: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 107: break;
          case 50: 
            { return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 108: break;
          case 51: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 109: break;
          case 52: 
            { return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 110: break;
          case 53: 
            { return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 111: break;
          case 54: 
            { return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 112: break;
          case 55: 
            { return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 113: break;
          case 56: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 114: break;
          case 57: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 115: break;
          case 58: 
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
