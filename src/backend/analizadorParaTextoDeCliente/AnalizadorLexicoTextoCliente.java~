/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.analizadorParaTextoDeCliente;
import java_cup.runtime.*;
import static backend.analizadorParaTextoDeCliente.sym.*;
import frontend.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexEstructura.flex</tt>
 */
public class AnalizadorLexicoTextoCliente implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\75\1\76\1\1\16\11\4\0\1\3\1\0"+
    "\1\41\1\73\1\12\3\107\3\0\2\107\1\6\1\110\1\33\1\4"+
    "\1\7\7\5\1\106\1\102\1\0\1\34\1\40\1\35\1\107\1\0"+
    "\1\56\1\54\1\60\1\55\1\44\1\61\1\65\1\62\1\51\1\72"+
    "\1\103\1\66\1\63\1\42\1\46\1\64\1\71\1\57\1\50\1\52"+
    "\1\43\1\45\1\53\1\67\1\103\1\70\1\36\1\107\1\37\1\0"+
    "\1\47\1\0\1\13\1\26\1\14\1\74\1\20\1\101\1\103\1\100"+
    "\1\15\2\103\1\32\1\24\1\17\1\16\1\22\1\30\1\23\1\21"+
    "\1\25\1\27\1\31\4\103\1\0\1\10\2\0\6\11\1\77\32\11"+
    "\2\0\4\11\4\0\1\105\2\0\1\11\7\0\1\105\4\0\1\105"+
    "\5\0\27\105\1\0\37\105\1\0\u01ca\105\4\0\14\105\16\0\5\105"+
    "\7\0\1\105\1\0\1\105\21\0\165\105\1\0\2\105\2\0\4\105"+
    "\1\0\1\105\6\0\1\105\1\0\3\105\1\0\1\105\1\0\24\105"+
    "\1\0\123\105\1\0\213\105\1\0\5\105\2\104\246\105\1\0\46\105"+
    "\2\0\1\105\7\0\47\105\7\0\1\11\1\0\55\105\1\0\1\105"+
    "\1\0\2\105\1\0\2\105\1\0\1\105\10\0\33\105\5\0\3\105"+
    "\15\0\6\11\5\0\1\11\4\0\13\105\1\0\1\11\3\0\112\105"+
    "\4\0\146\105\1\0\10\105\1\11\1\0\12\105\1\0\23\105\2\0"+
    "\1\105\17\0\1\11\73\105\2\0\145\105\16\0\66\105\4\0\1\105"+
    "\5\0\56\105\22\0\34\105\104\0\25\105\1\0\10\104\26\0\16\104"+
    "\1\0\201\105\2\0\12\105\1\0\23\105\1\0\10\105\2\0\2\105"+
    "\2\0\26\105\1\0\7\105\1\0\1\105\3\0\4\105\2\0\11\105"+
    "\2\0\2\105\2\0\4\105\10\0\1\105\4\0\2\105\1\0\5\105"+
    "\2\0\14\105\2\11\7\0\1\11\5\0\3\105\1\0\6\105\4\0"+
    "\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0\2\105\1\0"+
    "\2\105\2\0\1\105\1\0\5\105\4\0\2\105\2\0\3\105\3\0"+
    "\1\105\7\0\4\105\1\0\1\105\7\0\20\105\13\0\3\105\1\0"+
    "\11\105\1\0\3\105\1\0\26\105\1\0\7\105\1\0\2\105\1\0"+
    "\5\105\2\0\12\105\1\0\3\105\1\0\3\105\2\0\1\105\17\0"+
    "\4\105\2\0\12\105\1\0\1\11\7\0\1\105\7\0\3\105\1\0"+
    "\10\105\2\0\2\105\2\0\26\105\1\0\7\105\1\0\2\105\1\0"+
    "\5\105\2\0\11\105\2\0\2\105\2\0\3\105\10\0\2\105\4\0"+
    "\2\105\1\0\5\105\2\0\12\105\1\0\1\105\20\0\2\105\1\0"+
    "\6\105\3\0\3\105\1\0\4\105\3\0\2\105\1\0\1\105\1\0"+
    "\2\105\3\0\2\105\3\0\3\105\3\0\14\105\4\0\5\105\3\0"+
    "\3\105\1\0\4\105\2\0\1\105\6\0\1\105\16\0\12\105\11\0"+
    "\1\11\6\0\4\105\1\0\10\105\1\0\3\105\1\0\27\105\1\0"+
    "\20\105\3\0\10\105\1\0\3\105\1\0\4\105\7\0\2\105\1\0"+
    "\3\105\5\0\4\105\2\0\12\105\20\0\1\104\3\105\1\0\10\105"+
    "\1\0\3\105\1\0\27\105\1\0\12\105\1\0\5\105\2\0\11\105"+
    "\1\0\3\105\1\0\4\105\7\0\2\105\7\0\1\105\1\0\4\105"+
    "\2\0\12\105\1\0\2\105\16\0\3\105\1\0\10\105\1\0\3\105"+
    "\1\0\51\105\2\0\10\105\1\0\3\105\1\0\5\105\5\0\3\104"+
    "\1\105\7\0\5\105\2\0\12\105\12\0\6\105\2\0\2\105\1\0"+
    "\22\105\3\0\30\105\1\0\11\105\1\0\1\105\2\0\7\105\3\0"+
    "\1\105\4\0\6\105\1\0\1\105\1\0\10\105\6\0\12\105\2\0"+
    "\2\105\15\0\72\105\4\0\1\11\17\105\1\0\12\105\47\0\2\105"+
    "\1\0\1\105\2\0\2\105\1\0\1\105\2\0\1\105\6\0\4\105"+
    "\1\0\7\105\1\0\3\105\1\0\1\105\1\0\1\105\2\0\2\105"+
    "\1\0\15\105\1\0\3\105\2\0\5\105\1\0\1\105\1\0\6\105"+
    "\2\0\12\105\2\0\4\105\40\0\1\105\27\0\2\105\6\0\12\105"+
    "\13\0\1\105\1\0\1\105\1\0\1\105\4\0\12\105\1\0\44\105"+
    "\4\0\24\105\1\0\22\105\1\0\44\105\11\0\1\105\71\0\112\105"+
    "\6\0\116\105\2\0\46\105\1\0\1\105\5\0\1\105\2\0\53\105"+
    "\1\0\u014d\105\1\0\4\105\2\0\7\105\1\0\1\105\1\0\4\105"+
    "\2\0\51\105\1\0\4\105\2\0\41\105\1\0\4\105\2\0\7\105"+
    "\1\0\1\105\1\0\4\105\2\0\17\105\1\0\71\105\1\0\4\105"+
    "\2\0\103\105\2\0\3\105\40\0\20\105\20\0\126\105\2\0\6\105"+
    "\3\0\u026c\105\2\0\21\105\1\0\32\105\5\0\113\105\3\0\13\105"+
    "\7\0\15\105\1\0\7\105\13\0\25\105\13\0\24\105\14\0\15\105"+
    "\1\0\3\105\1\0\2\105\14\0\124\105\3\0\1\105\3\0\1\11"+
    "\2\105\2\0\12\105\41\0\3\105\1\11\1\0\12\105\6\0\130\105"+
    "\10\0\53\105\5\0\106\105\12\0\37\105\1\0\14\105\4\0\14\105"+
    "\12\0\50\105\2\0\5\105\13\0\54\105\4\0\32\105\6\0\12\105"+
    "\46\0\34\105\4\0\77\105\1\0\35\105\2\0\13\105\6\0\12\105"+
    "\15\0\1\105\10\0\16\105\1\104\101\0\114\105\4\0\12\105\21\0"+
    "\11\105\14\0\164\105\14\0\70\105\10\0\12\105\3\0\61\105\2\0"+
    "\11\104\107\0\3\105\1\0\43\105\1\0\2\105\6\0\366\105\5\0"+
    "\1\104\u011a\105\2\0\6\105\2\0\46\105\2\0\6\105\2\0\10\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\37\105\2\0\65\105"+
    "\1\0\7\105\1\0\1\105\3\0\3\105\1\0\7\105\3\0\4\105"+
    "\2\0\6\105\4\0\15\105\5\0\3\105\1\0\7\105\16\0\5\11"+
    "\30\0\1\75\1\75\5\11\20\0\2\105\23\0\1\105\13\0\5\11"+
    "\1\0\12\11\1\0\1\105\15\0\1\105\20\0\15\105\3\0\37\11"+
    "\21\0\15\105\4\104\1\105\3\104\14\105\21\0\1\105\4\0\1\105"+
    "\2\0\12\105\1\0\1\105\3\0\5\105\6\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\4\105\1\0\13\105\2\0\4\105\5\0\5\105"+
    "\4\0\1\105\21\0\51\105\u032d\0\64\104\u0716\0\57\105\1\0\57\105"+
    "\1\0\205\105\6\0\11\105\14\0\46\105\1\0\1\105\5\0\1\105"+
    "\2\0\70\105\7\0\1\105\17\0\30\105\11\0\7\105\1\0\7\105"+
    "\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105\1\0\7\105"+
    "\1\0\7\105\1\0\40\105\57\0\1\105\u01d5\0\3\105\31\0\17\105"+
    "\1\0\5\105\2\0\5\105\4\0\126\105\2\0\2\105\2\0\3\105"+
    "\1\0\132\105\1\0\4\105\5\0\51\105\3\0\136\105\21\0\33\105"+
    "\65\0\20\105\u0200\0\u19b6\105\112\0\u51d6\105\52\0\u048d\105\103\0\56\105"+
    "\2\0\u010d\105\3\0\34\105\24\0\60\105\3\104\1\0\12\105\1\0"+
    "\163\105\45\0\11\105\2\0\147\105\2\0\43\105\1\104\1\0\10\105"+
    "\77\0\61\105\20\0\1\11\7\0\64\105\14\0\105\105\1\104\12\0"+
    "\12\105\6\0\30\105\3\0\1\105\1\0\1\105\2\0\56\105\2\0"+
    "\44\105\14\0\35\105\3\0\101\105\16\0\13\105\6\0\37\105\1\0"+
    "\67\105\11\0\16\105\2\0\12\105\6\0\27\105\3\0\111\105\30\0"+
    "\3\105\2\0\20\105\2\0\5\105\12\0\6\105\2\0\6\105\2\0"+
    "\6\105\11\0\7\105\1\0\7\105\1\0\53\105\1\0\12\105\12\0"+
    "\173\105\1\0\2\105\2\0\12\105\6\0\u2ba4\105\14\0\27\105\4\0"+
    "\61\105\u2104\0\u016e\105\2\0\152\105\46\0\7\105\14\0\5\105\5\0"+
    "\14\105\1\0\15\105\1\0\5\105\1\0\1\105\1\0\2\105\1\0"+
    "\2\105\1\0\154\105\41\0\u016b\105\22\0\100\105\2\0\66\105\50\0"+
    "\14\105\1\11\3\0\20\105\20\0\20\105\3\0\2\105\30\0\3\105"+
    "\31\0\1\11\6\0\5\105\1\0\207\105\2\0\1\11\4\0\1\11"+
    "\13\0\12\105\7\0\32\105\4\0\1\105\1\0\32\105\13\0\131\105"+
    "\3\0\6\105\2\0\6\105\2\0\6\105\2\0\3\105\3\0\2\11"+
    "\3\0\2\11\22\0\3\11\4\0\14\105\1\0\32\105\1\0\23\105"+
    "\1\0\2\105\1\0\17\105\2\0\16\105\42\0\173\105\105\0\65\105"+
    "\210\0\1\105\202\0\35\105\3\0\61\105\17\0\1\105\37\0\40\105"+
    "\20\0\33\105\5\0\53\105\5\0\36\105\2\0\44\105\4\0\10\105"+
    "\1\0\5\105\52\0\236\105\2\0\12\105\6\0\44\104\4\0\44\104"+
    "\4\0\50\105\10\0\64\105\234\0\u0137\105\11\0\26\105\12\0\10\105"+
    "\230\0\6\105\2\0\1\105\1\0\54\105\1\0\2\105\3\0\1\105"+
    "\2\0\27\105\12\0\27\105\11\0\37\105\101\0\23\105\1\0\2\105"+
    "\12\0\26\105\12\0\32\105\106\0\70\105\6\0\2\105\100\0\4\105"+
    "\1\0\2\105\5\0\10\105\1\0\3\105\1\0\33\105\4\0\3\105"+
    "\4\0\1\105\40\0\35\105\3\0\35\105\43\0\10\105\1\0\36\105"+
    "\31\0\66\105\12\0\26\105\12\0\23\105\15\0\22\105\156\0\111\105"+
    "\67\0\63\105\15\0\63\105\u030d\0\107\105\37\0\12\105\17\0\74\105"+
    "\2\0\1\11\22\0\31\105\7\0\12\105\6\0\65\105\1\0\12\105"+
    "\20\0\44\105\2\0\1\105\11\0\105\105\5\0\3\105\3\0\13\105"+
    "\1\0\1\105\43\0\22\105\1\0\45\105\6\0\1\104\101\0\7\105"+
    "\1\0\1\105\1\0\4\105\1\0\17\105\1\0\12\105\7\0\73\105"+
    "\5\0\12\105\6\0\4\105\1\0\10\105\2\0\2\105\2\0\26\105"+
    "\1\0\7\105\1\0\2\105\1\0\5\105\2\0\11\105\2\0\2\105"+
    "\2\0\3\105\2\0\1\105\6\0\1\105\5\0\7\105\2\0\7\105"+
    "\3\0\5\105\213\0\113\104\5\0\12\104\46\0\106\105\1\0\1\105"+
    "\10\0\12\105\246\0\66\105\2\0\11\105\27\0\6\105\42\0\101\105"+
    "\3\0\1\105\13\0\12\105\46\0\70\105\10\0\12\105\66\0\32\105"+
    "\3\0\17\105\4\0\12\105\u0166\0\112\105\25\0\1\105\u01c0\0\71\105"+
    "\u0107\0\11\104\1\0\55\104\1\0\11\104\17\0\12\104\30\0\36\104"+
    "\2\0\26\104\1\0\16\104\u0349\0\u039a\105\146\0\157\105\21\0\304\105"+
    "\u0abc\0\u042f\105\u0fd1\0\u0247\105\u21b9\0\u0239\105\7\0\37\105\1\0\12\105"+
    "\146\0\36\105\2\0\5\105\13\0\67\105\11\0\4\105\14\0\12\105"+
    "\11\0\25\105\5\0\23\105\u0370\0\105\105\13\0\57\105\20\0\21\105"+
    "\100\0\1\104\37\0\u17ed\104\23\0\u02f3\104\u250d\0\2\105\u0bfe\0\153\105"+
    "\5\0\15\105\3\0\11\105\7\0\12\105\3\0\2\105\1\0\4\11"+
    "\u14c1\0\5\105\3\0\6\105\10\11\10\105\2\0\7\105\36\0\4\105"+
    "\224\0\3\105\u01bb\0\125\105\1\0\107\105\1\0\2\105\2\0\1\105"+
    "\2\0\2\105\2\0\4\105\1\0\14\105\1\0\1\105\1\0\7\105"+
    "\1\0\101\105\1\0\4\105\2\0\10\105\1\0\7\105\1\0\34\105"+
    "\1\0\4\105\1\0\5\105\1\0\1\105\3\0\7\105\1\0\u0154\105"+
    "\2\0\31\105\1\0\31\105\1\0\37\105\1\0\31\105\1\0\37\105"+
    "\1\0\31\105\1\0\37\105\1\0\31\105\1\0\37\105\1\0\31\105"+
    "\1\0\10\105\2\0\62\105\u0200\0\67\105\4\0\62\105\10\0\1\105"+
    "\16\0\1\105\26\0\5\105\1\0\17\105\u0550\0\7\104\1\0\21\104"+
    "\2\0\7\104\1\0\2\104\1\0\5\104\u07d5\0\305\105\13\0\7\105"+
    "\51\0\113\104\5\0\12\104\u04a6\0\4\105\1\0\33\105\1\0\2\105"+
    "\1\0\1\105\2\0\1\105\1\0\12\105\1\0\4\105\1\0\1\105"+
    "\1\0\1\105\6\0\1\105\4\0\1\105\1\0\1\105\1\0\1\105"+
    "\1\0\3\105\1\0\2\105\1\0\1\105\2\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\2\105\1\0\1\105"+
    "\2\0\4\105\1\0\7\105\1\0\4\105\1\0\4\105\1\0\1\105"+
    "\1\0\12\105\1\0\21\105\5\0\3\105\1\0\5\105\1\0\21\105"+
    "\u0274\0\32\104\6\0\32\104\6\0\32\104\u0e76\0\ua6d7\105\51\0\u1035\105"+
    "\13\0\336\105\2\0\u1682\105\u295e\0\u021e\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\105\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\2\3\1\1\1\4\5\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\22\1\1\0"+
    "\1\14\1\15\1\3\1\16\1\0\1\14\1\0\1\16"+
    "\2\0\4\16\1\15\1\14\2\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\1\14\2\0\1\14\1\17\1\0"+
    "\1\14\1\0\1\14\1\15\1\20\5\0\1\21\24\0"+
    "\1\3\1\0\5\16\1\0\1\16\3\0\1\16\3\0"+
    "\1\14\1\0\1\14\2\0\1\14\2\0\1\14\2\0"+
    "\1\14\2\0\1\14\2\0\1\17\1\0\1\15\1\20"+
    "\1\0\1\14\1\20\33\0\1\3\1\0\5\16\1\0"+
    "\1\16\2\0\1\16\11\0\1\14\1\0\1\14\2\0"+
    "\1\14\2\0\1\14\2\0\1\14\2\0\1\14\2\0"+
    "\1\20\23\0\1\22\10\0\1\3\1\0\1\23\1\16"+
    "\1\23\3\16\2\0\1\23\1\0\1\16\4\0\1\23"+
    "\4\0\1\14\1\0\1\14\2\0\1\14\2\0\1\14"+
    "\2\0\1\14\1\0\2\23\3\0\1\24\1\0\1\25"+
    "\2\0\1\26\3\0\1\27\4\0\1\30\1\31\2\0"+
    "\1\32\6\0\2\33\1\34\1\16\1\34\1\0\1\16"+
    "\2\0\1\16\1\33\2\0\2\33\1\0\1\33\1\14"+
    "\1\0\2\34\1\0\1\14\2\0\1\14\4\0\1\35"+
    "\1\36\1\0\1\37\4\0\1\40\4\0\1\41\5\0"+
    "\2\16\2\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\2\0\1\16\1\0\1\16\3\0\1\14\1\0"+
    "\1\14\2\0\1\14\2\0\1\14\6\0\1\42\2\0"+
    "\1\43\3\0\1\44\1\0\1\45\2\0\1\46\1\47"+
    "\1\50\1\46\1\16\1\50\1\47\1\0\2\46\1\50"+
    "\2\46\1\50\2\47\1\0\1\14\16\0\2\51\5\0"+
    "\1\52\1\53\1\54\2\53\2\54\2\52\4\0\1\55"+
    "\11\0\1\56\1\0\1\57\3\60\10\0\1\61\3\0"+
    "\1\62\16\0\1\63\17\0\1\64\13\0\1\65\3\0"+
    "\1\66\10\0\1\67\1\0\1\70\4\0\1\71\1\0"+
    "\1\72\4\0\1\73\1\74\3\0\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\222\0\222\0\u0124\0\u016d"+
    "\0\u01b6\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\222\0\222"+
    "\0\222\0\u036c\0\u03b5\0\222\0\u03fe\0\u0447\0\u0490\0\u04d9"+
    "\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\222"+
    "\0\u0969\0\u03b5\0\u09b2\0\u016d\0\u016d\0\u09fb\0\u0969\0\u09fb"+
    "\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa"+
    "\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42"+
    "\0\u0e8b\0\u0ed4\0\u036c\0\u0f1d\0\u03b5\0\u03b5\0\u0bb1\0\u03fe"+
    "\0\u0f66\0\u0faf\0\222\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c"+
    "\0\222\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563"+
    "\0\u15ac\0\u15f5\0\u163e\0\u0920\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1762\0\u183d"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1a3c\0\u1ace\0\u1a85"+
    "\0\u1b17\0\u1b60\0\u1b60\0\u1ba9\0\u1bf2\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d16\0\u1d5f\0\u0f1d\0\u0bb1\0\u0f66"+
    "\0\u1da8\0\u0969\0\u0faf\0\u1da8\0\u03b5\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb"+
    "\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313"+
    "\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b"+
    "\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3"+
    "\0\u27a3\0\u275a\0\u27ec\0\u2835\0\u2711\0\u26c8\0\u287e\0\u2636"+
    "\0\u28c7\0\u2835\0\u2910\0\u2959\0\u29a2\0\u2959\0\u29eb\0\u29a2"+
    "\0\u2a34\0\u2a7d\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b0f\0\u2b58\0\u2ba1"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c33\0\u2c7c\0\u1da8\0\u0bb1\0\u2cc5"+
    "\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d"+
    "\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155"+
    "\0\u319e\0\u31e7\0\222\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354"+
    "\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c"+
    "\0\u35e5\0\u362e\0\u3677\0\u35e5\0\u36c0\0\u09fb\0\u359c\0\u359c"+
    "\0\u3677\0\u3553\0\u3709\0\u362e\0\u35e5\0\u3752\0\u379b\0\u37e4"+
    "\0\u382d\0\u37e4\0\u3876\0\u382d\0\u38bf\0\u3908\0\u3908\0\u3951"+
    "\0\u399a\0\u399a\0\u39e3\0\u3a2c\0\u3a2c\0\u3a75\0\u0969\0\222"+
    "\0\u3abe\0\u3b07\0\u3b50\0\222\0\u3b99\0\222\0\u3be2\0\u3c2b"+
    "\0\222\0\u3c74\0\u3cbd\0\u3d06\0\222\0\u3d4f\0\u3d98\0\u3de1"+
    "\0\u3e2a\0\222\0\222\0\u3e73\0\u3ebc\0\222\0\u3f05\0\u3f4e"+
    "\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196"+
    "\0\u09fb\0\u41df\0\u41df\0\u4196\0\u4228\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u43de\0\u4470\0\u0969"+
    "\0\222\0\u44b9\0\u44b9\0\u4502\0\u454b\0\u454b\0\u4594\0\u45dd"+
    "\0\u4626\0\u466f\0\222\0\222\0\u46b8\0\222\0\u4701\0\u474a"+
    "\0\u4793\0\u47dc\0\222\0\u4825\0\u486e\0\u48b7\0\u4900\0\222"+
    "\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4ab6"+
    "\0\u4b48\0\u4b48\0\u4b91\0\u4b91\0\u4bda\0\u4bda\0\u4c23\0\u4c23"+
    "\0\u4c6c\0\u4cb5\0\u4cb5\0\u4cfe\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9"+
    "\0\u4d90\0\u4e22\0\u4dd9\0\u4e6b\0\u4eb4\0\u4eb4\0\u4efd\0\u4f46"+
    "\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u50fc\0\222"+
    "\0\u5145\0\u518e\0\222\0\u51d7\0\u5220\0\u5269\0\222\0\u52b2"+
    "\0\222\0\u52fb\0\u5344\0\u538d\0\u53d6\0\u541f\0\u09fb\0\u5468"+
    "\0\u538d\0\u54b1\0\u5468\0\u541f\0\u54fa\0\u54fa\0\u0969\0\222"+
    "\0\u5543\0\u558c\0\u55d5\0\u561e\0\u561e\0\u5667\0\u56b0\0\u56f9"+
    "\0\u5742\0\u578b\0\u57d4\0\u581d\0\u5866\0\u58af\0\u58f8\0\u5941"+
    "\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\222\0\u5aae\0\u5af7\0\u5b40"+
    "\0\u5b89\0\u5bd2\0\u5c1b\0\u09fb\0\u09fb\0\u0969\0\222\0\u0969"+
    "\0\222\0\u5c64\0\u5cad\0\u5cf6\0\u5d3f\0\u5d88\0\u5dd1\0\222"+
    "\0\u5e1a\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u6019"+
    "\0\u6062\0\222\0\u60ab\0\222\0\u09fb\0\u0969\0\222\0\u60f4"+
    "\0\u613d\0\u6186\0\u61cf\0\u6218\0\u6261\0\u62aa\0\u62f3\0\222"+
    "\0\u633c\0\u6385\0\u63ce\0\222\0\u6417\0\u6460\0\u64a9\0\u64f2"+
    "\0\u653b\0\u6584\0\u65cd\0\u6616\0\u665f\0\u66a8\0\u66f1\0\u673a"+
    "\0\u6783\0\u67cc\0\222\0\u6815\0\u685e\0\u68a7\0\u68f0\0\u6939"+
    "\0\u6982\0\u69cb\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef\0\u6b38\0\u6b81"+
    "\0\u6bca\0\u6c13\0\222\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37\0\u6d80"+
    "\0\u6dc9\0\u6e12\0\u6e5b\0\u6ea4\0\u6eed\0\u6f36\0\222\0\u6f7f"+
    "\0\u6fc8\0\u7011\0\222\0\u705a\0\u70a3\0\u70ec\0\u7135\0\u717e"+
    "\0\u71c7\0\u7210\0\u7259\0\222\0\u72a2\0\222\0\u72eb\0\u7334"+
    "\0\u737d\0\u73c6\0\222\0\u740f\0\222\0\u7458\0\u74a1\0\u74ea"+
    "\0\u7533\0\222\0\222\0\u757c\0\u75c5\0\u760e\0\222\0\222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\7\1\11"+
    "\1\3\1\10\1\12\3\3\1\13\1\14\1\3\1\15"+
    "\6\3\1\16\1\3\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\14\1\30\1\31\1\10"+
    "\1\32\1\33\1\34\1\3\1\35\1\36\1\37\1\3"+
    "\1\40\1\41\1\3\1\42\1\43\5\3\1\44\1\45"+
    "\2\3\1\5\7\3\1\7\3\3\1\4\2\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\3\1\10\1\12\3\3"+
    "\1\13\1\14\1\3\1\15\6\3\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\14\1\30\1\31\1\10\1\32\1\33\1\34\1\3"+
    "\1\35\1\36\1\37\1\3\1\40\1\41\1\3\1\42"+
    "\1\43\5\3\1\44\1\45\2\3\1\5\1\3\1\46"+
    "\1\47\4\3\1\7\2\3\10\50\1\51\26\50\1\52"+
    "\53\50\1\5\5\50\1\51\26\50\1\52\55\50\2\53"+
    "\1\50\1\53\1\51\26\50\1\52\46\50\1\53\6\50"+
    "\2\54\1\55\1\54\1\56\22\54\4\50\1\52\2\50"+
    "\31\54\1\50\1\54\2\50\3\54\1\50\1\54\1\50"+
    "\2\54\2\50\4\57\2\60\1\61\1\60\1\62\2\60"+
    "\1\63\1\64\1\60\1\65\6\60\1\66\5\60\4\57"+
    "\1\67\2\57\4\60\1\65\3\60\1\66\3\60\1\63"+
    "\1\60\1\64\12\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\2\57\10\50\1\70\3\50\1\71"+
    "\10\50\1\72\11\50\1\52\12\50\1\72\5\50\1\71"+
    "\40\50\1\73\5\50\1\74\20\50\1\52\6\50\1\74"+
    "\52\50\1\75\14\50\1\76\11\50\1\52\12\50\1\76"+
    "\46\50\1\77\2\50\1\100\23\50\1\52\16\50\1\100"+
    "\42\50\1\101\2\50\1\102\23\50\1\52\16\50\1\102"+
    "\32\50\10\103\1\104\26\103\1\105\51\103\10\106\1\107"+
    "\100\106\10\110\1\111\26\110\1\112\1\110\1\113\47\110"+
    "\10\50\1\73\5\50\1\74\20\50\1\52\3\50\1\114"+
    "\2\50\1\74\52\50\1\51\26\50\1\52\10\50\1\115"+
    "\50\50\1\101\2\50\1\102\23\50\1\52\11\50\1\116"+
    "\4\50\1\102\42\50\1\51\26\50\1\52\17\50\1\117"+
    "\41\50\1\51\26\50\1\52\11\50\1\120\47\50\1\51"+
    "\26\50\1\52\15\50\1\121\5\50\1\122\4\50\1\123"+
    "\30\50\1\51\26\50\1\52\4\50\1\124\4\50\1\125"+
    "\47\50\1\51\26\50\1\52\6\50\1\126\52\50\1\51"+
    "\26\50\1\52\4\50\1\127\54\50\1\70\3\50\1\71"+
    "\10\50\1\72\11\50\1\52\2\50\1\130\7\50\1\72"+
    "\5\50\1\71\4\50\1\131\1\132\32\50\1\51\26\50"+
    "\1\52\4\50\1\133\1\50\1\134\17\50\1\135\32\50"+
    "\1\51\26\50\1\52\4\50\1\136\54\50\1\51\26\50"+
    "\1\52\4\50\1\137\1\50\1\140\52\50\1\77\2\50"+
    "\1\100\23\50\1\52\16\50\1\141\42\50\1\51\26\50"+
    "\1\52\3\50\1\142\51\50\2\143\1\50\1\143\1\51"+
    "\2\50\2\143\3\50\1\143\5\50\1\143\10\50\1\52"+
    "\4\50\1\143\7\50\3\143\1\50\2\143\12\50\1\143"+
    "\4\50\1\143\4\50\1\143\12\50\1\51\14\50\1\144"+
    "\11\50\1\52\61\50\1\51\14\50\1\145\11\50\1\52"+
    "\51\50\37\57\1\67\51\57\4\50\2\146\1\50\1\146"+
    "\1\51\26\50\1\52\46\50\1\146\2\50\4\57\2\60"+
    "\1\61\1\60\1\61\22\60\4\57\1\67\2\57\31\60"+
    "\1\57\1\60\2\57\3\60\1\57\1\60\1\57\2\60"+
    "\6\57\2\60\1\61\1\60\1\147\3\60\1\150\1\151"+
    "\5\60\1\152\1\153\5\60\1\154\4\57\1\67\2\57"+
    "\7\60\1\151\5\60\1\152\1\150\2\60\1\153\2\60"+
    "\1\154\4\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\155\12\60"+
    "\1\156\6\60\1\154\4\57\1\67\2\57\15\60\1\156"+
    "\6\60\1\154\4\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\157"+
    "\3\60\1\150\16\60\4\57\1\67\2\57\16\60\1\150"+
    "\12\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\6\57\2\60\1\61\1\60\1\160\13\60\1\153"+
    "\6\60\4\57\1\67\2\57\21\60\1\153\7\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\6\57"+
    "\2\60\1\61\1\60\1\161\4\60\1\151\5\60\1\162"+
    "\7\60\4\57\1\67\2\57\7\60\1\151\5\60\1\162"+
    "\13\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\2\57\111\0\10\57\1\163\3\57\1\164\6\57"+
    "\1\165\13\57\1\67\17\57\1\165\1\164\30\57\10\50"+
    "\1\166\3\50\1\167\22\50\1\52\20\50\1\167\40\50"+
    "\1\170\12\50\1\171\13\50\1\52\17\50\1\171\31\50"+
    "\10\57\1\172\13\57\1\172\12\57\1\67\23\57\1\172"+
    "\25\57\10\50\1\173\13\50\1\174\12\50\1\52\23\50"+
    "\1\174\25\50\10\57\1\175\4\57\1\175\21\57\1\67"+
    "\11\57\1\175\37\57\10\50\1\176\4\50\1\177\21\50"+
    "\1\52\11\50\1\177\37\50\10\57\1\200\12\57\1\200"+
    "\13\57\1\67\17\57\1\200\31\57\10\50\1\201\12\50"+
    "\1\202\13\50\1\52\17\50\1\202\31\50\10\57\1\203"+
    "\21\57\1\203\4\57\1\67\26\57\1\203\22\57\10\50"+
    "\1\204\21\50\1\205\4\50\1\52\26\50\1\205\22\50"+
    "\37\206\1\207\51\206\37\210\1\211\1\210\1\212\47\210"+
    "\10\213\1\214\30\213\1\215\47\213\10\50\1\51\26\50"+
    "\1\52\4\50\1\216\54\50\1\51\26\50\1\52\3\50"+
    "\1\217\55\50\1\51\26\50\1\52\15\50\1\220\43\50"+
    "\1\51\26\50\1\52\11\50\1\221\47\50\1\51\26\50"+
    "\1\52\12\50\1\222\46\50\1\51\26\50\1\52\16\50"+
    "\1\223\42\50\1\51\26\50\1\52\31\50\1\224\27\50"+
    "\1\51\26\50\1\52\27\50\1\225\31\50\1\51\26\50"+
    "\1\52\12\50\1\226\46\50\1\51\26\50\1\52\17\50"+
    "\1\227\41\50\1\51\26\50\1\52\17\50\1\230\41\50"+
    "\1\51\26\50\1\52\20\50\1\231\40\50\1\51\26\50"+
    "\1\52\17\50\1\232\41\50\1\51\26\50\1\52\11\50"+
    "\1\233\1\234\46\50\1\51\26\50\1\52\2\50\1\235"+
    "\56\50\1\51\26\50\1\52\26\50\1\236\32\50\1\51"+
    "\26\50\1\52\16\50\1\237\42\50\1\51\26\50\1\52"+
    "\20\50\1\240\40\50\1\51\26\50\1\52\2\50\1\241"+
    "\56\50\1\51\26\50\1\52\15\50\1\242\43\50\1\201"+
    "\12\50\1\202\13\50\1\52\15\50\1\243\1\50\1\244"+
    "\5\50\1\245\33\50\1\51\26\50\1\52\10\50\1\246"+
    "\44\50\2\247\1\50\1\247\1\51\2\50\2\247\3\50"+
    "\1\247\5\50\1\247\10\50\1\52\4\50\1\247\7\50"+
    "\3\247\1\50\2\247\12\50\1\247\4\50\1\247\4\50"+
    "\1\247\12\50\1\51\11\50\1\250\14\50\1\52\55\50"+
    "\2\251\1\50\1\251\1\51\26\50\1\52\46\50\1\251"+
    "\2\50\4\57\2\60\1\61\1\60\1\252\2\60\1\253"+
    "\1\60\1\254\1\255\7\60\1\256\1\60\1\257\2\60"+
    "\4\57\1\67\2\57\4\60\1\255\2\60\1\254\2\60"+
    "\1\256\1\60\1\253\12\60\1\257\1\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\260\4\60\1\261\15\60\4\57\1\67"+
    "\2\57\7\60\1\261\21\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\262\17\60\1\257\2\60\4\57\1\67\2\57\27\60"+
    "\1\257\1\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\263\2\60"+
    "\1\253\1\60\1\264\15\60\4\57\1\67\2\57\7\60"+
    "\1\264\4\60\1\253\14\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\265\15\60\1\256\4\60\4\57\1\67\2\57\12\60"+
    "\1\256\16\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\266\5\60"+
    "\1\255\14\60\4\57\1\67\2\57\4\60\1\255\24\60"+
    "\1\57\1\60\2\57\3\60\1\57\1\60\1\57\2\60"+
    "\6\57\2\60\1\61\1\60\1\267\2\60\1\253\2\60"+
    "\1\255\14\60\4\57\1\67\2\57\4\60\1\255\7\60"+
    "\1\253\14\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\270\2\60"+
    "\1\253\17\60\4\57\1\67\2\57\14\60\1\253\14\60"+
    "\1\57\1\60\2\57\3\60\1\57\1\60\1\57\2\60"+
    "\6\57\2\60\1\61\1\60\1\271\4\60\1\264\12\60"+
    "\1\257\2\60\4\57\1\67\2\57\7\60\1\264\17\60"+
    "\1\257\1\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\272\4\60"+
    "\1\264\15\60\4\57\1\67\2\57\7\60\1\264\21\60"+
    "\1\57\1\60\2\57\3\60\1\57\1\60\1\57\2\60"+
    "\12\57\1\273\4\57\1\273\21\57\1\67\11\57\1\273"+
    "\47\57\1\274\4\57\1\274\21\57\1\67\11\57\1\274"+
    "\47\57\1\275\4\57\1\275\21\57\1\67\11\57\1\275"+
    "\37\57\10\50\1\276\4\50\1\277\21\50\1\52\11\50"+
    "\1\277\47\50\1\300\4\50\1\301\21\50\1\52\11\50"+
    "\1\301\37\50\10\57\1\302\15\57\1\302\10\57\1\67"+
    "\14\57\1\302\34\57\10\50\1\303\15\50\1\304\10\50"+
    "\1\52\14\50\1\304\34\50\10\57\1\305\17\57\1\305"+
    "\6\57\1\67\31\57\1\305\17\57\10\50\1\306\17\50"+
    "\1\307\6\50\1\52\31\50\1\307\17\50\10\57\1\310"+
    "\2\57\1\310\23\57\1\67\16\57\1\310\32\57\10\50"+
    "\1\311\2\50\1\312\23\50\1\52\16\50\1\312\32\50"+
    "\10\57\1\313\5\57\1\313\20\57\1\67\6\57\1\313"+
    "\42\57\10\50\1\314\5\50\1\315\20\50\1\52\6\50"+
    "\1\315\42\50\41\316\1\317\47\316\10\50\1\51\26\50"+
    "\1\52\5\50\1\320\53\50\1\51\26\50\1\52\16\50"+
    "\1\321\42\50\1\51\26\50\1\52\4\50\1\322\54\50"+
    "\1\51\26\50\1\52\25\50\1\323\33\50\1\51\26\50"+
    "\1\52\11\50\1\324\47\50\1\51\26\50\1\52\25\50"+
    "\1\325\33\50\1\51\26\50\1\52\3\50\1\326\55\50"+
    "\1\51\26\50\1\52\12\50\1\327\46\50\1\51\26\50"+
    "\1\52\3\50\1\330\55\50\1\51\26\50\1\52\17\50"+
    "\1\331\41\50\1\51\26\50\1\52\4\50\1\332\54\50"+
    "\1\51\26\50\1\52\22\50\1\333\36\50\1\51\26\50"+
    "\1\52\4\50\1\334\54\50\1\51\26\50\1\52\2\50"+
    "\1\335\56\50\1\51\26\50\1\52\3\50\1\336\55\50"+
    "\1\51\26\50\1\52\12\50\1\337\46\50\1\51\26\50"+
    "\1\52\6\50\1\340\52\50\1\51\26\50\1\52\10\50"+
    "\1\341\50\50\1\51\26\50\1\52\22\50\1\342\36\50"+
    "\1\51\26\50\1\52\3\50\1\343\55\50\1\51\26\50"+
    "\1\52\11\50\1\344\47\50\1\51\26\50\1\52\17\50"+
    "\1\345\41\50\1\311\2\50\1\312\23\50\1\52\16\50"+
    "\1\312\1\346\41\50\1\51\26\50\1\52\11\50\1\347"+
    "\47\50\1\51\26\50\1\52\12\50\1\350\42\50\2\351"+
    "\1\50\1\351\1\51\2\50\2\351\3\50\1\351\5\50"+
    "\1\351\10\50\1\52\4\50\1\351\7\50\3\351\1\50"+
    "\2\351\12\50\1\351\4\50\1\351\4\50\1\351\12\50"+
    "\1\51\10\50\1\352\15\50\1\52\42\50\1\353\12\50"+
    "\2\354\1\355\1\354\1\51\26\50\1\52\46\50\1\354"+
    "\2\50\4\57\2\60\1\61\1\60\1\356\5\60\1\357"+
    "\4\60\1\360\1\361\1\60\1\362\1\363\3\60\4\57"+
    "\1\67\2\57\1\60\1\363\2\60\1\357\5\60\1\362"+
    "\2\60\1\360\3\60\1\361\7\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\6\57\2\60\1\61"+
    "\1\60\1\364\13\60\1\361\6\60\4\57\1\67\2\57"+
    "\21\60\1\361\7\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\365"+
    "\5\60\1\357\7\60\1\362\4\60\4\57\1\67\2\57"+
    "\4\60\1\357\5\60\1\362\16\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\6\57\2\60\1\61"+
    "\1\60\1\366\12\60\1\366\7\60\4\57\1\67\2\57"+
    "\15\60\1\366\13\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\367"+
    "\12\60\1\370\7\60\4\57\1\67\2\57\15\60\1\370"+
    "\13\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\6\57\2\60\1\61\1\60\1\371\16\60\1\363"+
    "\3\60\4\57\1\67\2\57\1\60\1\363\27\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\6\57"+
    "\2\60\1\61\1\60\1\372\5\60\1\357\14\60\4\57"+
    "\1\67\2\57\4\60\1\357\24\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\6\57\2\60\1\61"+
    "\1\60\1\373\13\60\1\361\1\60\1\362\4\60\4\57"+
    "\1\67\2\57\12\60\1\362\6\60\1\361\7\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\6\57"+
    "\2\60\1\61\1\60\1\374\15\60\1\362\4\60\4\57"+
    "\1\67\2\57\12\60\1\362\16\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\6\57\2\60\1\61"+
    "\1\60\1\375\12\60\1\366\1\361\6\60\4\57\1\67"+
    "\2\57\15\60\1\366\3\60\1\361\7\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\376\15\60\1\362\1\363\3\60\4\57"+
    "\1\67\2\57\1\60\1\363\10\60\1\362\16\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\12\57"+
    "\1\377\5\57\1\u0100\7\57\1\u0101\10\57\1\67\6\57"+
    "\1\u0100\5\57\1\u0101\44\57\1\u0100\5\57\1\u0100\20\57"+
    "\1\67\6\57\1\u0100\52\57\1\u0101\15\57\1\u0101\10\57"+
    "\1\67\14\57\1\u0101\34\57\10\50\1\u0102\5\50\1\u0103"+
    "\20\50\1\52\6\50\1\u0103\52\50\1\u0104\15\50\1\u0105"+
    "\10\50\1\52\14\50\1\u0105\34\50\10\57\1\u0106\12\57"+
    "\1\u0106\13\57\1\67\17\57\1\u0106\31\57\10\50\1\u0107"+
    "\12\50\1\u0108\13\50\1\52\17\50\1\u0108\31\50\10\57"+
    "\1\u0109\16\57\1\u0109\7\57\1\67\3\57\1\u0109\45\57"+
    "\10\50\1\u010a\16\50\1\u010b\7\50\1\52\3\50\1\u010b"+
    "\45\50\10\57\1\u010c\13\57\1\u010c\12\57\1\67\23\57"+
    "\1\u010c\25\57\10\50\1\u010d\13\50\1\u010e\12\50\1\52"+
    "\23\50\1\u010e\25\50\10\57\1\u010f\12\57\1\u010f\13\57"+
    "\1\67\17\57\1\u010f\31\57\10\50\1\u010f\12\50\1\u0110"+
    "\13\50\1\52\17\50\1\u0110\41\50\1\51\26\50\1\52"+
    "\6\50\1\u0111\7\50\1\u0112\42\50\1\51\26\50\1\52"+
    "\17\50\1\u0113\41\50\1\51\26\50\1\52\6\50\1\u0114"+
    "\52\50\1\51\26\50\1\52\4\50\1\u0115\54\50\1\51"+
    "\26\50\1\52\6\50\1\u0116\52\50\1\51\26\50\1\52"+
    "\4\50\1\u0117\54\50\1\51\26\50\1\52\11\50\1\u0118"+
    "\47\50\1\51\26\50\1\52\6\50\1\u0119\52\50\1\51"+
    "\26\50\1\52\26\50\1\u011a\32\50\1\51\26\50\1\52"+
    "\16\50\1\u011b\42\50\1\51\26\50\1\52\20\50\1\u011c"+
    "\40\50\1\51\26\50\1\52\6\50\1\u011d\52\50\1\51"+
    "\26\50\1\52\25\50\1\u011e\33\50\1\51\26\50\1\52"+
    "\4\50\1\u011f\54\50\1\51\26\50\1\52\17\50\1\u0120"+
    "\41\50\1\51\26\50\1\52\17\50\1\u0121\41\50\1\51"+
    "\26\50\1\52\17\50\1\u0122\41\50\1\51\26\50\1\52"+
    "\4\50\1\u0123\54\50\1\51\26\50\1\52\16\50\1\u0124"+
    "\42\50\1\51\26\50\1\52\21\50\1\u0125\37\50\1\51"+
    "\26\50\1\52\4\50\1\u0126\54\50\1\51\26\50\1\52"+
    "\16\50\1\u0127\42\50\1\51\26\50\1\52\2\50\1\u0128"+
    "\56\50\1\51\26\50\1\52\11\50\1\u0129\43\50\2\u012a"+
    "\1\50\1\u012a\1\51\2\50\2\u012a\3\50\1\u012a\5\50"+
    "\1\u012a\10\50\1\52\4\50\1\u012a\7\50\3\u012a\1\50"+
    "\2\u012a\12\50\1\u012a\4\50\1\u012a\4\50\1\u012a\12\50"+
    "\1\51\26\50\1\52\42\50\1\353\16\50\1\51\22\50"+
    "\1\u012b\3\50\1\52\55\50\2\354\1\50\1\354\1\51"+
    "\26\50\1\52\46\50\1\354\6\50\1\u012c\2\50\1\u012c"+
    "\1\51\26\50\1\52\51\50\4\57\2\60\1\61\1\60"+
    "\1\u012d\6\60\1\u012e\1\u012f\6\60\1\u0130\3\60\4\57"+
    "\1\67\2\57\1\u012e\1\u0130\1\u012f\26\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\u012e\6\60\1\u012e\13\60\4\57\1\67"+
    "\2\57\1\u012e\30\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\u0131"+
    "\7\60\1\u0131\12\60\4\57\1\67\2\57\2\60\1\u0131"+
    "\26\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\6\57\2\60\1\61\1\60\1\u0132\7\60\1\u0133"+
    "\12\60\4\57\1\67\2\57\2\60\1\u0133\26\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\6\57"+
    "\2\60\1\61\1\60\1\u0134\16\60\1\u0130\3\60\4\57"+
    "\1\67\2\57\1\60\1\u0130\27\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\6\57\2\60\1\61"+
    "\1\60\1\u0135\7\60\1\u0136\12\60\4\57\1\67\2\57"+
    "\2\60\1\u0136\26\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\u0137"+
    "\6\60\1\u012e\7\60\1\u0130\3\60\4\57\1\67\2\57"+
    "\1\u012e\1\u0130\27\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\u0138"+
    "\7\60\1\u0133\6\60\1\u0130\3\60\4\57\1\67\2\57"+
    "\1\60\1\u0130\1\u0133\26\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\u0139\7\60\1\u0136\6\60\1\u0130\3\60\4\57\1\67"+
    "\2\57\1\60\1\u0130\1\u0136\26\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\12\57\1\u013a\6\57"+
    "\1\u013b\7\57\1\u013c\7\57\1\67\2\57\1\u013b\1\u013c"+
    "\55\57\1\u013b\6\57\1\u013b\17\57\1\67\2\57\1\u013b"+
    "\56\57\1\u013c\16\57\1\u013c\7\57\1\67\3\57\1\u013c"+
    "\45\57\10\50\1\u013b\6\50\1\u013d\17\50\1\52\2\50"+
    "\1\u013d\56\50\1\u013e\16\50\1\u013f\7\50\1\52\3\50"+
    "\1\u013f\45\50\10\57\1\u0140\7\57\1\u0140\16\57\1\67"+
    "\4\57\1\u0140\44\57\10\50\1\u0140\7\50\1\u0141\16\50"+
    "\1\52\4\50\1\u0141\44\50\10\57\1\u0142\7\57\1\u0142"+
    "\16\57\1\67\4\57\1\u0142\44\57\10\50\1\u0143\7\50"+
    "\1\u0144\16\50\1\52\4\50\1\u0144\44\50\10\57\1\u0145"+
    "\7\57\1\u0145\16\57\1\67\4\57\1\u0145\44\57\10\50"+
    "\1\u0146\7\50\1\u0147\16\50\1\52\4\50\1\u0147\54\50"+
    "\1\51\26\50\1\52\7\50\1\u0148\51\50\1\51\26\50"+
    "\1\52\7\50\1\u0149\51\50\1\51\26\50\1\52\11\50"+
    "\1\u014a\47\50\1\51\26\50\1\52\2\50\1\u014b\56\50"+
    "\1\51\26\50\1\52\2\50\1\u014c\56\50\1\51\26\50"+
    "\1\52\4\50\1\u014d\54\50\1\51\26\50\1\52\6\50"+
    "\1\u014e\52\50\1\51\26\50\1\52\17\50\1\u014f\41\50"+
    "\1\51\26\50\1\52\22\50\1\u0150\36\50\1\51\26\50"+
    "\1\52\16\50\1\u0151\42\50\1\51\26\50\1\52\16\50"+
    "\1\u0152\42\50\1\51\26\50\1\52\16\50\1\u0153\42\50"+
    "\1\51\26\50\1\52\16\50\1\u0154\42\50\1\51\26\50"+
    "\1\52\7\50\1\u0155\51\50\1\51\26\50\1\52\11\50"+
    "\1\u0156\47\50\1\51\26\50\1\52\21\50\1\u0157\37\50"+
    "\1\51\26\50\1\52\16\50\1\u0158\42\50\1\51\26\50"+
    "\1\52\21\50\1\u0159\33\50\2\u015a\1\50\1\u015a\1\51"+
    "\2\50\2\u015a\3\50\1\u015a\5\50\1\u015a\10\50\1\52"+
    "\4\50\1\u015a\7\50\3\u015a\1\50\2\u015a\12\50\1\u015a"+
    "\4\50\1\u015a\4\50\1\u015a\12\50\1\51\22\50\1\u015b"+
    "\3\50\1\52\56\50\1\u015c\1\50\1\u015c\1\51\26\50"+
    "\1\52\46\50\1\u015c\2\50\4\57\2\60\1\61\1\60"+
    "\1\u015d\7\60\1\u015e\4\60\1\u015f\5\60\4\57\1\67"+
    "\2\57\2\60\1\u015e\5\60\1\u015f\20\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\u0160\7\60\1\u015e\12\60\4\57\1\67"+
    "\2\57\2\60\1\u015e\26\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\u0161\14\60\1\u0162\5\60\4\57\1\67\2\57\10\60"+
    "\1\u0162\20\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\u0163\14\60"+
    "\1\u0164\5\60\4\57\1\67\2\57\10\60\1\u0164\20\60"+
    "\1\57\1\60\2\57\3\60\1\57\1\60\1\57\2\60"+
    "\6\57\2\60\1\61\1\60\1\u0165\14\60\1\u0166\5\60"+
    "\4\57\1\67\2\57\10\60\1\u0166\20\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\u0167\14\60\1\u0168\5\60\4\57\1\67"+
    "\2\57\10\60\1\u0168\20\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\u0169\7\60\1\u015e\4\60\1\u0164\5\60\4\57\1\67"+
    "\2\57\2\60\1\u015e\5\60\1\u0164\20\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\u016a\14\60\1\u016b\5\60\4\57\1\67"+
    "\2\57\10\60\1\u016b\20\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\u016c\14\60\1\u016d\5\60\4\57\1\67\2\57\10\60"+
    "\1\u016d\20\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\12\57\1\u016e\7\57\1\u016f\4\57\1\u0170"+
    "\11\57\1\67\4\57\1\u016f\5\57\1\u0170\46\57\1\u016f"+
    "\7\57\1\u016f\16\57\1\67\4\57\1\u016f\54\57\1\u0170"+
    "\14\57\1\u0170\11\57\1\67\12\57\1\u0170\36\57\10\50"+
    "\1\u0171\7\50\1\u0172\16\50\1\52\4\50\1\u0172\54\50"+
    "\1\u0173\14\50\1\u0174\11\50\1\52\12\50\1\u0174\36\50"+
    "\10\57\1\u0175\14\57\1\u0175\11\57\1\67\12\57\1\u0175"+
    "\36\57\10\50\1\u0176\14\50\1\u0177\11\50\1\52\12\50"+
    "\1\u0177\36\50\10\57\1\u0178\14\57\1\u0178\11\57\1\67"+
    "\12\57\1\u0178\36\57\10\50\1\u0179\14\50\1\u017a\11\50"+
    "\1\52\12\50\1\u017a\46\50\1\51\26\50\1\52\10\50"+
    "\1\u017b\50\50\1\51\26\50\1\52\24\50\1\u017c\34\50"+
    "\1\51\26\50\1\52\6\50\1\u017d\52\50\1\51\26\50"+
    "\1\52\17\50\1\u017e\41\50\1\51\26\50\1\52\7\50"+
    "\1\u017f\51\50\1\51\26\50\1\52\16\50\1\u0180\42\50"+
    "\1\51\26\50\1\52\17\50\1\u0181\41\50\1\51\26\50"+
    "\1\52\20\50\1\u0182\40\50\1\51\26\50\1\52\17\50"+
    "\1\u0183\41\50\1\51\26\50\1\52\20\50\1\u0184\2\50"+
    "\1\u0185\35\50\1\51\26\50\1\52\20\50\1\u0186\40\50"+
    "\1\51\26\50\1\52\6\50\1\u0187\52\50\1\51\26\50"+
    "\1\52\11\50\1\u0188\43\50\2\u0189\1\50\1\u0189\1\51"+
    "\2\50\2\u0189\3\50\1\u0189\5\50\1\u0189\10\50\1\52"+
    "\4\50\1\u0189\7\50\3\u0189\1\50\2\u0189\12\50\1\u0189"+
    "\4\50\1\u0189\4\50\1\u0189\6\50\2\u018a\1\50\1\u018a"+
    "\1\51\2\50\20\u018a\4\50\1\52\2\50\5\u018a\1\50"+
    "\23\u018a\1\50\1\u018a\3\50\2\u018a\1\50\1\u018a\2\50"+
    "\1\u018a\10\50\1\u018b\1\50\1\51\26\50\1\52\51\50"+
    "\4\57\2\60\1\61\1\60\1\u018c\2\60\1\u018d\2\60"+
    "\1\u018e\2\60\1\u018f\1\60\1\u0190\7\60\4\57\1\67"+
    "\2\57\4\60\1\u018e\1\60\1\u018f\5\60\1\u018d\1\u0190"+
    "\13\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\6\57\2\60\1\61\1\60\1\u018f\10\60\1\u018f"+
    "\11\60\4\57\1\67\2\57\6\60\1\u018f\22\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\6\57"+
    "\2\60\1\61\1\60\1\u0191\2\60\1\u018d\2\60\1\u018e"+
    "\4\60\1\u0190\7\60\4\57\1\67\2\57\4\60\1\u018e"+
    "\7\60\1\u018d\1\u0190\13\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\u0192\2\60\1\u018d\7\60\1\u0190\7\60\4\57\1\67"+
    "\2\57\14\60\1\u018d\1\u0190\13\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\6\57\2\60\1\61"+
    "\1\60\1\u018e\5\60\1\u018e\14\60\4\57\1\67\2\57"+
    "\4\60\1\u018e\24\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\u0193"+
    "\12\60\1\u0190\7\60\4\57\1\67\2\57\15\60\1\u0190"+
    "\13\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\6\57\2\60\1\61\1\60\1\u018d\2\60\1\u018d"+
    "\17\60\4\57\1\67\2\57\14\60\1\u018d\14\60\1\57"+
    "\1\60\2\57\3\60\1\57\1\60\1\57\2\60\6\57"+
    "\2\60\1\61\1\60\1\u0194\5\60\1\u018e\2\60\1\u018f"+
    "\11\60\4\57\1\67\2\57\4\60\1\u018e\1\60\1\u018f"+
    "\22\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\6\57\2\60\1\61\1\60\1\u0191\5\60\1\u018e"+
    "\4\60\1\u0190\7\60\4\57\1\67\2\57\4\60\1\u018e"+
    "\10\60\1\u0190\13\60\1\57\1\60\2\57\3\60\1\57"+
    "\1\60\1\57\2\60\6\57\2\60\1\61\1\60\1\u018e"+
    "\2\60\1\u018d\2\60\1\u018e\14\60\4\57\1\67\2\57"+
    "\4\60\1\u018e\7\60\1\u018d\14\60\1\57\1\60\2\57"+
    "\3\60\1\57\1\60\1\57\2\60\12\57\1\u0195\5\57"+
    "\1\u0196\2\57\1\u0197\15\57\1\67\6\57\1\u0196\1\57"+
    "\1\u0197\50\57\1\u0197\10\57\1\u0197\15\57\1\67\10\57"+
    "\1\u0197\50\57\1\u0196\5\57\1\u0196\20\57\1\67\6\57"+
    "\1\u0196\42\57\10\50\1\u0197\10\50\1\u0198\15\50\1\52"+
    "\10\50\1\u0198\50\50\1\u0196\5\50\1\u0199\20\50\1\52"+
    "\6\50\1\u0199\42\50\10\57\1\u019a\2\57\1\u019a\23\57"+
    "\1\67\16\57\1\u019a\32\57\10\50\1\u019a\2\50\1\u019b"+
    "\23\50\1\52\16\50\1\u019b\32\50\10\57\1\u019c\12\57"+
    "\1\u019c\13\57\1\67\17\57\1\u019c\31\57\10\50\1\u019d"+
    "\12\50\1\u019e\13\50\1\52\17\50\1\u019e\41\50\1\51"+
    "\26\50\1\52\11\50\1\u019f\47\50\1\51\26\50\1\52"+
    "\16\50\1\u01a0\42\50\1\51\26\50\1\52\7\50\1\u01a1"+
    "\51\50\1\51\26\50\1\52\15\50\1\u01a2\43\50\1\51"+
    "\26\50\1\52\10\50\1\u01a3\7\50\1\u01a4\3\50\1\u01a5"+
    "\34\50\1\51\26\50\1\52\7\50\1\u01a6\51\50\1\51"+
    "\26\50\1\52\11\50\1\u01a7\47\50\1\51\26\50\1\52"+
    "\17\50\1\u01a8\41\50\1\51\26\50\1\52\6\50\1\u01a9"+
    "\52\50\1\51\26\50\1\52\16\50\1\u01aa\42\50\1\51"+
    "\26\50\1\52\20\50\1\u01ab\31\50\1\u01ac\1\u01ad\1\50"+
    "\2\u018a\1\u01ae\1\u018a\1\51\1\50\1\u01af\20\u018a\1\u01af"+
    "\3\50\1\52\2\50\5\u018a\1\u01ae\23\u018a\1\u01af\1\u018a"+
    "\3\u01ad\2\u018a\1\u01b0\1\u018a\2\u01b1\1\u018a\1\u01af\1\u01ae"+
    "\4\50\1\u01b2\2\50\1\u01b2\1\51\26\50\1\52\51\50"+
    "\4\57\2\60\1\61\1\60\1\u01b3\5\60\1\u01b3\2\60"+
    "\1\u01b4\11\60\4\57\1\67\2\57\4\60\1\u01b3\1\60"+
    "\1\u01b4\22\60\1\57\1\60\2\57\3\60\1\57\1\60"+
    "\1\57\2\60\6\57\2\60\1\61\1\60\1\u01b5\10\60"+
    "\1\u01b5\11\60\4\57\1\67\2\57\6\60\1\u01b5\22\60"+
    "\1\57\1\60\2\57\3\60\1\57\1\60\1\57\2\60"+
    "\6\57\2\60\1\61\1\60\1\u01b4\10\60\1\u01b4\11\60"+
    "\4\57\1\67\2\57\6\60\1\u01b4\22\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\6\57\2\60"+
    "\1\61\1\60\1\u01b3\5\60\1\u01b3\14\60\4\57\1\67"+
    "\2\57\4\60\1\u01b3\24\60\1\57\1\60\2\57\3\60"+
    "\1\57\1\60\1\57\2\60\6\57\2\60\1\61\1\60"+
    "\1\u01b3\5\60\1\u01b3\2\60\1\u01b5\11\60\4\57\1\67"+
    "\2\57\4\60\1\u01b3\1\60\1\u01b5\22\60\1\57\1\60"+
    "\2\57\3\60\1\57\1\60\1\57\2\60\12\57\1\u01b6"+
    "\10\57\1\u01b6\15\57\1\67\10\57\1\u01b6\40\57\10\50"+
    "\1\u01b6\10\50\1\u01b7\15\50\1\52\10\50\1\u01b7\40\50"+
    "\10\57\1\u01b8\10\57\1\u01b8\15\57\1\67\10\57\1\u01b8"+
    "\40\57\10\50\1\u01b8\10\50\1\u01b9\15\50\1\52\10\50"+
    "\1\u01b9\40\50\10\57\1\u01ba\5\57\1\u01ba\20\57\1\67"+
    "\6\57\1\u01ba\42\57\10\50\1\u01ba\5\50\1\u01bb\20\50"+
    "\1\52\6\50\1\u01bb\52\50\1\51\26\50\1\52\12\50"+
    "\1\u01bc\46\50\1\51\26\50\1\52\25\50\1\u01bd\33\50"+
    "\1\51\26\50\1\52\20\50\1\u01be\2\50\1\u01bf\35\50"+
    "\1\51\26\50\1\52\16\50\1\u01c0\42\50\1\51\26\50"+
    "\1\52\11\50\1\u01c1\47\50\1\51\26\50\1\52\6\50"+
    "\1\u01c2\52\50\1\51\26\50\1\52\16\50\1\u01c3\42\50"+
    "\1\51\26\50\1\52\20\50\1\u01c4\40\50\1\51\26\50"+
    "\1\52\6\50\1\u01c5\52\50\1\51\26\50\1\52\4\50"+
    "\1\u01c6\54\50\1\51\26\50\1\52\15\50\1\u01c7\43\50"+
    "\1\51\26\50\1\52\17\50\1\u01c8\41\50\1\51\26\50"+
    "\1\52\16\50\1\u01c9\34\50\1\u01ca\5\50\1\51\26\50"+
    "\1\52\52\50\1\u01ac\1\u01ad\1\50\2\u018a\1\u01ae\1\u018a"+
    "\1\51\1\50\1\u01af\20\u018a\1\u01af\3\50\1\52\2\50"+
    "\5\u018a\1\u01ae\23\u018a\1\u01af\1\u018a\3\u01ad\2\u018a\1\50"+
    "\1\u018a\2\u01b1\1\u018a\1\u01af\1\u01ae\1\50\1\u01ac\1\u01ad"+
    "\1\50\4\u01af\1\51\1\50\22\u01af\3\50\1\52\2\50"+
    "\33\u01af\3\u01ad\2\u01af\1\50\1\u01af\2\50\3\u01af\1\50"+
    "\1\u01ac\1\u01ad\1\50\1\u01cb\3\u01af\1\51\1\50\22\u01af"+
    "\3\50\1\52\2\50\33\u01af\3\u01ad\2\u01af\1\u01b0\1\u01af"+
    "\2\50\3\u01af\4\50\2\u018a\1\u01b1\1\u018a\1\51\2\50"+
    "\20\u018a\4\50\1\52\2\50\5\u018a\1\u01b1\23\u018a\1\50"+
    "\1\u018a\3\50\2\u018a\1\50\1\u018a\2\u01b1\1\u018a\1\50"+
    "\1\u01b1\5\50\1\u01cc\1\50\1\u01cc\1\51\26\50\1\52"+
    "\46\50\1\u01cc\2\50\4\57\2\60\1\61\1\60\1\u01cd"+
    "\10\60\1\u01cd\11\60\4\57\1\67\2\57\6\60\1\u01cd"+
    "\22\60\1\57\1\60\2\57\3\60\1\57\1\60\1\57"+
    "\2\60\12\57\1\u01ce\10\57\1\u01ce\15\57\1\67\10\57"+
    "\1\u01ce\40\57\10\50\1\u01ce\10\50\1\u01cf\15\50\1\52"+
    "\10\50\1\u01cf\50\50\1\51\26\50\1\52\11\50\1\u01d0"+
    "\47\50\1\51\26\50\1\52\11\50\1\u01d1\47\50\1\51"+
    "\26\50\1\52\17\50\1\u01d2\41\50\1\51\26\50\1\52"+
    "\6\50\1\u01d3\52\50\1\51\26\50\1\52\12\50\1\u01d4"+
    "\46\50\1\51\26\50\1\52\23\50\1\u01d5\35\50\1\51"+
    "\26\50\1\52\25\50\1\u01d6\33\50\1\51\26\50\1\52"+
    "\6\50\1\u01d7\52\50\1\51\26\50\1\52\2\50\1\u01d8"+
    "\56\50\1\51\26\50\1\52\16\50\1\u01d9\42\50\1\51"+
    "\26\50\1\52\11\50\1\u01da\47\50\1\51\26\50\1\52"+
    "\7\50\1\u01db\51\50\1\51\26\50\1\52\17\50\1\u01dc"+
    "\32\50\1\u01ac\1\u01ad\1\50\2\u01af\1\u01dd\1\u01af\1\51"+
    "\1\50\22\u01af\3\50\1\52\2\50\33\u01af\3\u01ad\2\u01af"+
    "\1\50\1\u01af\2\50\3\u01af\10\50\1\51\26\50\1\52"+
    "\6\50\1\u01de\52\50\1\51\26\50\1\52\2\50\1\u01df"+
    "\56\50\1\51\26\50\1\52\4\50\1\u01e0\54\50\1\51"+
    "\26\50\1\52\15\50\1\u01e1\43\50\1\51\26\50\1\52"+
    "\11\50\1\u01e2\47\50\1\51\26\50\1\52\24\50\1\u01e3"+
    "\34\50\1\51\26\50\1\52\11\50\1\u01e4\47\50\1\51"+
    "\26\50\1\52\23\50\1\u01e5\35\50\1\51\26\50\1\52"+
    "\20\50\1\u01e6\40\50\1\51\26\50\1\52\21\50\1\u01e7"+
    "\37\50\1\51\26\50\1\52\20\50\1\u01e8\3\50\1\u01e9"+
    "\25\50\1\u01ac\1\u01ad\1\50\4\u01af\1\51\1\50\22\u01af"+
    "\3\50\1\52\2\50\33\u01af\3\u01ad\2\u01af\1\50\1\u01af"+
    "\2\50\1\u01b0\2\u01af\10\50\1\51\26\50\1\52\7\50"+
    "\1\u01ea\51\50\1\51\26\50\1\52\16\50\1\u01eb\42\50"+
    "\1\51\26\50\1\52\16\50\1\u01ec\42\50\1\51\26\50"+
    "\1\52\11\50\1\u01ed\47\50\1\51\26\50\1\52\6\50"+
    "\1\u01ee\52\50\1\51\26\50\1\52\6\50\1\u01ef\52\50"+
    "\1\51\26\50\1\52\2\50\1\u01f0\56\50\1\51\26\50"+
    "\1\52\24\50\1\u01f1\34\50\1\51\26\50\1\52\11\50"+
    "\1\u01f2\47\50\1\51\26\50\1\52\11\50\1\u01f3\47\50"+
    "\1\51\26\50\1\52\6\50\1\u01f4\52\50\1\51\26\50"+
    "\1\52\16\50\1\u01f5\42\50\1\51\26\50\1\52\13\50"+
    "\1\u01f6\45\50\1\51\26\50\1\52\20\50\1\u01f7\40\50"+
    "\1\51\26\50\1\52\21\50\1\u01f8\37\50\1\51\26\50"+
    "\1\52\7\50\1\u01f9\51\50\1\51\26\50\1\52\2\50"+
    "\1\u01fa\56\50\1\51\26\50\1\52\16\50\1\u01fb\42\50"+
    "\1\51\26\50\1\52\6\50\1\u01fc\52\50\1\51\26\50"+
    "\1\52\6\50\1\u01fd\52\50\1\51\26\50\1\52\20\50"+
    "\1\u01fe\40\50\1\51\26\50\1\52\23\50\1\u01ff\35\50"+
    "\1\51\26\50\1\52\25\50\1\u0200\33\50\1\51\26\50"+
    "\1\52\4\50\1\u0201\54\50\1\51\26\50\1\52\11\50"+
    "\1\u0202\47\50\1\51\26\50\1\52\11\50\1\u0203\47\50"+
    "\1\51\26\50\1\52\13\50\1\u0204\45\50\1\51\26\50"+
    "\1\52\4\50\1\u0205\54\50\1\51\26\50\1\52\2\50"+
    "\1\u0206\56\50\1\51\26\50\1\52\2\50\1\u0207\56\50"+
    "\1\51\26\50\1\52\16\50\1\u0208\42\50\1\51\26\50"+
    "\1\52\24\50\1\u0209\34\50\1\51\26\50\1\52\11\50"+
    "\1\u020a\47\50\1\51\26\50\1\52\14\50\1\u020b\44\50"+
    "\1\51\26\50\1\52\6\50\1\u020c\52\50\1\51\26\50"+
    "\1\52\20\50\1\u020d\40\50\1\51\26\50\1\52\4\50"+
    "\1\u020e\54\50\1\51\26\50\1\52\2\50\1\u020f\56\50"+
    "\1\51\26\50\1\52\4\50\1\u0210\54\50\1\51\26\50"+
    "\1\52\20\50\1\u0211\40\50\1\51\26\50\1\52\6\50"+
    "\1\u0212\52\50\1\51\26\50\1\52\2\50\1\u0213\56\50"+
    "\1\51\26\50\1\52\2\50\1\u0214\56\50\1\51\26\50"+
    "\1\52\16\50\1\u0215\42\50\1\51\26\50\1\52\14\50"+
    "\1\u0216\44\50\1\51\26\50\1\52\12\50\1\u0217\46\50"+
    "\1\51\26\50\1\52\2\50\1\u0218\56\50\1\51\26\50"+
    "\1\52\11\50\1\u0219\47\50\1\51\26\50\1\52\2\50"+
    "\1\u021a\56\50\1\51\26\50\1\52\16\50\1\u021b\42\50"+
    "\1\51\26\50\1\52\20\50\1\u021c\40\50\1\51\26\50"+
    "\1\52\4\50\1\u021d\54\50\1\51\26\50\1\52\12\50"+
    "\1\u021e\46\50\1\51\26\50\1\52\6\50\1\u021f\52\50"+
    "\1\51\26\50\1\52\4\50\1\u0220\54\50\1\51\26\50"+
    "\1\52\11\50\1\u0221\47\50\1\51\26\50\1\52\4\50"+
    "\1\u0222\54\50\1\51\26\50\1\52\2\50\1\u0223\56\50"+
    "\1\51\26\50\1\52\2\50\1\u0224\56\50\1\51\26\50"+
    "\1\52\6\50\1\u0225\52\50\1\51\26\50\1\52\12\50"+
    "\1\u0226\46\50\1\51\26\50\1\52\2\50\1\u0227\56\50"+
    "\1\51\26\50\1\52\4\50\1\u0228\44\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30295];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\45\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\2\0\4\1\1\11\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\1\11"+
    "\1\0\3\1\5\0\1\1\24\0\1\1\1\0\5\1"+
    "\1\0\1\1\3\0\1\1\3\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\11\1\0\2\1\1\0\2\1\33\0\1\1"+
    "\1\0\5\1\1\0\1\1\2\0\1\1\11\0\1\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\11\23\0\1\1\10\0\1\1"+
    "\1\0\6\1\2\0\1\1\1\0\1\1\4\0\1\1"+
    "\4\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\2\1\3\0\1\1\1\0\1\1"+
    "\2\0\1\1\3\0\1\1\4\0\2\1\2\0\1\1"+
    "\6\0\5\1\1\0\1\1\2\0\2\1\2\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\4\0\2\1\1\0\1\1\4\0\1\1\4\0\1\1"+
    "\5\0\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\3\0\1\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\6\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\2\0\7\1"+
    "\1\0\10\1\1\0\1\1\16\0\2\1\5\0\11\1"+
    "\4\0\1\1\11\0\1\1\1\0\4\1\10\0\1\1"+
    "\3\0\1\1\16\0\1\1\17\0\1\1\13\0\1\1"+
    "\3\0\1\1\10\0\1\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\1\4\0\2\1\3\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  ClienteFrame clienteFrame;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  public void iniciarFrame(ClienteFrame clienteFrame){
        this.clienteFrame=clienteFrame;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTextoCliente(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3052) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { clienteFrame.mostrarError("lexico",yyline+1,yycolumn+1,yytext());clienteFrame.setSeDebeEnviarElTexto(false);
            } 
            // fall through
          case 63: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 64: break;
          case 3: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 65: break;
          case 4: 
            { return symbol(DIAGONAL_RECTA,yytext());
            } 
            // fall through
          case 66: break;
          case 5: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 67: break;
          case 6: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 68: break;
          case 7: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 69: break;
          case 8: 
            { return symbol(CORCHETE_ABIERTO,yytext());
            } 
            // fall through
          case 70: break;
          case 9: 
            { return symbol(CORCHETE_CERRADO,yytext());
            } 
            // fall through
          case 71: break;
          case 10: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 72: break;
          case 11: 
            { return symbol(COMILLA,yytext());
            } 
            // fall through
          case 73: break;
          case 12: 
            { System.out.println("ETIQUETA_MENU:"+yytext());return symbol(ETIQUETA_MENU,yytext());
            } 
            // fall through
          case 74: break;
          case 13: 
            { System.out.println("ETIQUETA_MENU_FIN:"+yytext());return symbol(ETIQUETA_MENU_FIN,yytext());
            } 
            // fall through
          case 75: break;
          case 14: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 76: break;
          case 15: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION,yytext());
            } 
            // fall through
          case 77: break;
          case 16: 
            { System.out.println("Oracion:"+yytext());return symbol(ORACION_ETIQUETA,yytext());
            } 
            // fall through
          case 78: break;
          case 17: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 79: break;
          case 18: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 80: break;
          case 19: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 81: break;
          case 20: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 82: break;
          case 21: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 83: break;
          case 22: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 84: break;
          case 23: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 85: break;
          case 24: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 86: break;
          case 25: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 87: break;
          case 26: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 88: break;
          case 27: 
            { return symbol(ACCION,yytext());
            } 
            // fall through
          case 89: break;
          case 28: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 90: break;
          case 29: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 91: break;
          case 30: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 92: break;
          case 31: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 93: break;
          case 32: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 94: break;
          case 33: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 95: break;
          case 34: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 96: break;
          case 35: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 97: break;
          case 36: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 98: break;
          case 37: 
            { System.out.println("Codigo color:"+yytext());return symbol(CODIGO_COLOR,yytext());
            } 
            // fall through
          case 99: break;
          case 38: 
            { return symbol(ACCIONES,yytext());
            } 
            // fall through
          case 100: break;
          case 39: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 101: break;
          case 40: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 102: break;
          case 41: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 103: break;
          case 42: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 104: break;
          case 43: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 105: break;
          case 44: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 106: break;
          case 45: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 107: break;
          case 46: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 108: break;
          case 47: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 109: break;
          case 48: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 110: break;
          case 49: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 111: break;
          case 50: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 112: break;
          case 51: 
            { return symbol(NUEVA_PAGINA,yytext());
            } 
            // fall through
          case 113: break;
          case 52: 
            { return symbol(BORRAR_PAGINA,yytext());
            } 
            // fall through
          case 114: break;
          case 53: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 115: break;
          case 54: 
            { return symbol(NUEVO_SITIO_WEB,yytext());
            } 
            // fall through
          case 116: break;
          case 55: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 117: break;
          case 56: 
            { return symbol(BORRAR_SITIO_WEB,yytext());
            } 
            // fall through
          case 118: break;
          case 57: 
            { return symbol(MODIFICAR_PAGINA,yytext());
            } 
            // fall through
          case 119: break;
          case 58: 
            { return symbol(BORRAR_COMPONENTE,yytext());
            } 
            // fall through
          case 120: break;
          case 59: 
            { return symbol(AGREGAR_COMPONENTE,yytext());
            } 
            // fall through
          case 121: break;
          case 60: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 122: break;
          case 61: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 123: break;
          case 62: 
            { return symbol(MODIFICAR_COMPONENTE,yytext());
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoTextoCliente [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoTextoCliente scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoTextoCliente(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
